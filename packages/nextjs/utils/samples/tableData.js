export const sampleTableData = [
  {
    id: 1,
    hackathon: "ETHGlobal Tokyo",
    title: "ChatGPT 4 Public Goods",
    more: "https://ethglobal.com/showcase/chatgpt-4-public-goods-66si0",
    repo: "https://github.com/QuietImCoding/ai-trade",
    demo: null,
    video: null,
    winner: null,
    short:
      "ChatGPT 4 Public Goods is an AI-based trading program similar to the hamster / goldfish stock traders people have made. The idea is to convince chatGPT it is playing a video game and have its choices reflected in real cryptocurrency buying-selling decisions.",
    description:
      "ChatGPT 4 Public Goods is an AI-based trading program similar to the hamster / goldfish stock traders people have made. The idea is to convince chatGPT it is playing a video game and have its choices reflected in real cryptocurrency buying-selling decisions.The goal was to create a public spectacle of trading with 1% of the funds in the wallet every day going to public goods funding taking advantage of the (potential) latent trading skill of ChatGPT to fund important infrastructure while simultaneously creating a public spectacle by posting to lens and soliciting trade advice / tips. Unfortunately my laptop internet seemed to stop working entirely so it is largely incomplete :/ This project is written entirely in Python using the Web3 library with all the RPC requests going through Alchemy and Uniswap for the trades. ChatGPT 3.5 turbo is used for the ai parts as I do not yet have access to gpt4. I had hoped to add a front end  but the wifi was not quite working so it's extremely incomplete.",
    date: null,
  },
  {
    id: 2,
    hackathon: "ETHGlobal Tokyo",
    title: "proof of primate",
    more: "https://ethglobal.com/showcase/proof-of-primate-niac0",
    repo: "https://github.com/34r7h/primatehood",
    demo: null,
    video: null,
    winner: null,
    short: "",
    description: "",
    date: null,
  },
  {
    id: 3,
    hackathon: "ETHGlobal Tokyo",
    title: "Blockhead: ETHTokyo 2023",
    more: "https://ethglobal.com/showcase/blockhead-ethtokyo-2023-kx4rh",
    repo: "https://github.com/darrylyeo/blockhead",
    demo: "https://blockhead.info",
    video: null,
    winner: "📜 Scroll — Just Deploy 🛠 Quantstamp — Best Use Case 🏊‍♂️ Polygon — Pool Prize ",
    short: "Track",
    description:
      "visualize & explore all of crypto. DeFi & web3 with Blockhead's crypto portfolio tracker cross-EVM block explorer and interfaces for your favorite dapps and web3 infrastructure. Blockhead is a browser for all of crypto DeFi and web3  built as an ongoing public good project with new features and integrations added at each hackathon. Track  visualize & explore all of crypto DeFi & web3 with Blockhead's crypto portfolio tracker  cross-EVM block explorer and interfaces for your favorite dapps and web3 infrastructure. New features for ETHTokyo 2023:• Built a Lens interface with profile lookups and authentication  with support for all three deployed instances of the protocol (Polygon PoS  Polygon Mumbai  Sandbox Polygon Mumbai) https://blockhead.info/apps/lens• Added first-class support for Lens handles across all address inputs in the interface. Type any Lens handle (e.g. stani.lens or test.test) to automatically resolve to the owner's address based on context.• Added Airstack as a token balance provider and NFT provider in Portfolio/Explorer• Added support for Push Protocol WebSocket subscriptions• Added Polygon zkEVM  Scroll and Scroll Alpha Testnet to Portfolio/Explorer• Added QuickNode endpoint for Polygon zkEVM ",
    date: null,
  },
  {
    id: 4,
    hackathon: "ETHGlobal Tokyo",
    title: "CryptoTipJar",
    more: "https://ethglobal.com/showcase/cryptotipjar-pyxc9",
    repo: "https://github.com/martaGonz/donatedapptokyo",
    demo: null,
    video: null,
    winner: "📜 Scroll — Just Deploy 🛠 Quantstamp — Best Use Case 🏊‍♂️ Polygon — Pool Prize ",
    short: "CryptoTipJar is a dApp that enables content creators to receive micro-donations from supporters",
    description:
      'integrated into social media profiles or personal websites  using Metamask. It fosters community by showcasing recent messages from donors. CryptoTipJar is a decentralized application (dApp) that enables content creators to receive micro-donations (0.01 ETH) from their supporters. It is designed to be integrated into social media profiles  personal websites  or other online platforms  such as TikTok bios. By connecting a Metamask wallet  users can easily send micro-donations and leave messages to support their favorite content creators. In exchange  creators can send NFTs or other gifts to their supporters. The dApp fosters a sense of community and recognition among donors through its "recent messages" list. The CryptoTipJar project was built using various technologies  including React   Next.js  Chakra UI  ethers.js  and MetaMask.React and Next.js were used for building the frontend of the application while Chakra UI provided the design system and UI components. Ethers.js and Web3 were used for interacting with the Ethereum blockchain and Metamask wallet  and enabling the sending and receiving of ETH donations.',
    date: null,
  },
  {
    id: 5,
    hackathon: "ETHGlobal Tokyo",
    title: "Taikonomics",
    more: "https://ethglobal.com/showcase/taikonomics-ww3px",
    demo: "https://docs.google.com/presentation/d/1reJMvuuKEbksNIo3srrJNZwK24-53VhWr6wzt82OHyI/edit?usp=sharing",
    repo: "https://docs.google.com/presentation/d/1reJMvuuKEbksNIo3srrJNZwK24-53VhWr6wzt82OHyI/edit#slide=id.g22e3dae3205_0_385",
    video: "",
    winner: "🤓 Taiko — Protocol Economics ",
    short: "Taiko is a type 1 zkEVM L2 which uses ETH as a native token to pay for fees. This design makes value capture more difficult; Taikonomics is a token economic architecture which captures value to TKO in accordance with technical and design constraints.",
    description: "All of the info is in the presentation in the slides.UsersUsers pay in ETHCaptures value to ETHAligns with Ethereum ecosystem & promotes Ethereum network healthOptimize for cheap tx'ssee in other design componentsPay proposers in ETH",
      "FIELD11": " not TKO",
      "FIELD12": " to minimize user friction while accruing value to ETHProposersNo capital requirementsMinimizes proposers' barriers to entry--> Maximizes # of proposers --> decentralization----> We want deceentralization of proposers because this ultimately drives down users' costsStakers subsidize proposers' required fees to provers in exchange for a DAO-set variable % of tx fees. I followed the Eat Sleep Crypto / Token Dynamics Demand-Side Tokenomics frameworkhttps://www.youtube.com/watch?v=I_4QbbZJjsAInclude one bespoke tokenomic mechanism",
      "FIELD13": " designed to temporarily subsidize user fees with a mint-and-burn modelAlso included staking pools to map the value of ETH flowing through the system to the value of all circulating TKO.",
    },
    {
    id: 6,
    hackathon: "ETHGlobal Tokyo",
    title: "Widget Protocol",
    more: "https://ethglobal.com/showcase/widget-protocol-e6iya",
    demo: "https://testflight.apple.com/join/kwObycZ4",
    repo: "https://github.com/caaaption/WidgetProtocol",
    video: "",
    winner: "🖼 QuickNode — Best use of NFT/Token API 🔟 Push — Top 10 ",
    short: "The Widgets Protocol is the iPhone widget version of the Appstore. Anyone can develop dApps widgets and place them on the iPhone home screen.",
    description: "Widgets Protocol is a revolutionary app that allows Dapps to increase user retention without developing additional apps. With Widgets Protocol",
      "FIELD11": " Dapp developers can easily create customizable and interactive widgets that can be embedded within popular social media platforms and other online channels. By doing so",
      "FIELD12": " Dapp developers can reach a wider audience",
      "FIELD13": " increase user engagement",
      "FIELD14": " and ultimately drive more adoption for their decentralized applications. Widgets Protocol is easy to use",
      "FIELD15": " flexible",
      "FIELD16": " and provides an innovative solution for Dapp developers looking to scale their user base without additional development costs. Try Widgets Protocol today and take your Dapp to the next level! I used SwiftUI throughout the application to provide iOS widgets",
      "FIELD17": " and since I did not create any complex screens that required UIKit",
      "FIELD18": " I was able to create them using SwiftUI alone.The architecture is based on The Composable Architecture.The application is a hyper-module application",
      "FIELD19": " which allows for minimum builds per module and fast development.APIClient is built for each service",
      "FIELD20": " which is DI'd by swift-dependency.Since only one widget can be generated per application",
      "FIELD21": " we have hacked the system so that a large number of widgets can be created.The application passes the content to be displayed to the widget",
      "FIELD22": " and the widget performs UI switching on the widget side",
      "FIELD23": " enabling the creation of a large number of widgets.Some sponsors do not provide Public Rest API",
      "FIELD24": " so we set up our own Express server to reference data from there.https://github.com/caaaption/WidgetProtocolhttps://github.com/caaaption/WidgetProtocol-api",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 7,
    hackathon: "ETHGlobal Tokyo",
    title: "Takarakuji",
    more: "https://ethglobal.com/showcase/takarakuji-d1xak",
    demo: "https://ffqns-paaaa-aaaad-qfhna-cai.ic.fleek.co/",
    repo: "https://github.com/DAppsNDLT/Takarakuji",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "DApp that Let's you play Takarakuji scratch-off online uses ZK rollups",
    description: "This DApp uses an L2 to resolve winning tickets and sends them to L1 for the winner to be notified and have crypt paid out to their wallet. Implements a social leaderboard of wallets that have won with lens. The Linea Metamask testnet is used for ZK rollups.Made with wagmi react",
      "FIELD11": " typescript",
      "FIELD12": " solidity. This DApp uses an L2 to resolve winning tickets and sends them to L1 for the winner to be notified and have crypt paid out to their wallet. Implements a social leaderboard of wallets that have won with lens. The Linea Metamask testnet is used for ZK rollups. Deployed to polygon as well.",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 8,
    hackathon: "ETHGlobal Tokyo",
    title: "XA^2",
    more: "https://ethglobal.com/showcase/xa-2-2zxdx",
    demo: "",
    repo: "https://github.com/sanchaymittal/ax-abstraction",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Chain & Account Abstraction solution to make any DApp x-chain enabled.",
    description: "The codebase showcases the Modular Contracts build to expand the utility of DApps across multiple chains.Modular contracts are a type of smart contract that can be easily combined and customized to create more complex contracts. By using modular contracts",
      "FIELD11": " developers can save time and reduce complexity when building decentralized applications (DApps) that require multiple contracts.Expanding the utility of DApps across multiple chains is an important goal for many blockchain projects. This is because different blockchain networks have different characteristics",
      "FIELD12": " such as scalability",
      "FIELD13": " security",
      "FIELD14": " and interoperability. By using modular contracts",
      "FIELD15": " your project can more easily adapt to these differences and provide a better user experience for your customers. Project Utilizes Connext",
      "FIELD16": " 1Inch",
      "FIELD17": " Polygon",
      "FIELD18": " Polygon zkEVM",
      "FIELD19": " Gnosis",
      "FIELD20": " SAFE.Connext is a cross-chain bridge with trust-minimized solution",
      "FIELD21": " which allows for fast",
      "FIELD22": " cheap",
      "FIELD23": " and secure transfers to multiple domains. 1Inch is a decentralized exchange aggregator",
      "FIELD24": " which allows users to find the best prices for trading tokens across various DEXs. Polygon (previously known as Matic Network) is a Layer 2 scaling solution for Ethereum",
      "FIELD25": " which aims to improve the scalability and usability of the Ethereum network. Polygon zkEVM is a version of Polygon that uses zero-knowledge proofs to improve scalability even further. Gnosis is a decentralized prediction market platform",
      "FIELD26": " which allows users to create and participate in markets predicting the outcome of future events. SAFE is a decentralized autonomous organization (DAO) framework",
      "FIELD27": " which allows groups to make decisions and manage shared resources without the need for a centralized authority.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 9,
    hackathon: "ETHGlobal Tokyo",
    title: "1inch Fusion Dashboard",
    more: "https://ethglobal.com/showcase/1inch-fusion-dashboard-96pev",
    demo: "",
    repo: "https://github.com/0xEljh/1inch-fusion-dashboard",
    video: "",
    winner: "🗃 1inch — 🥇 Best Data Dashboard ",
    short: "On-chain analytics of Resolver activity on 1inch Fusion Swap",
    description: "This proof-of-concept level dashboard presents on-chain analytics of resolvers behaviour on 1inch's fusion swap",
      "FIELD11": " including:USD profit for each resolver transactionUSD \"true volume\" from each resolver (no double counts on intermediate swaps)gas fees paidinternal transactions made during a settlementIt is presented currently as a jupyter notebook",
      "FIELD12": " querying transactions of the settlemenrt contract (0xA88800CD213dA5Ae406ce248380802BD53b47647) via an etherscan and defillama api. This project is the final result of on-chain exploration of the Fusion Swap mechanism and resolvers. To avoid using overly dirty scrapping methods in this hackathon",
      "FIELD13": " we query the data via Etherscan's API. Etherscan had the data more intuitively structured for this analysis than Dune",
      "FIELD14": " hence this choice.Information on the ERC20 tokens and their prices was also needed",
      "FIELD15": " so the DeFillama historical price api was also used",
      "FIELD16": " especially since it supports queries via the ERC20 token address",
      "FIELD17": " while providing us with all the metadata like decimals",
      "FIELD18": " symbol",
      "FIELD19": " etc",
      "FIELD20": " hence avoiding direct eth_calls or contract calls in this poor WiFi hackathon environment.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 10,
    hackathon: "ETHGlobal Tokyo",
    title: "Bot or Not",
    more: "https://ethglobal.com/showcase/bot-or-not-oox84",
    demo: "",
    repo: "https://github.com/kkpsiren/lens-bot-or-not",
    video: "",
    winner: "📜 Scroll — Just Deploy ",
    short: "Bots are taking over the world and are dangerooooous. It is up to us the users the start contributing to fight against them. Let's go. Be the superhero. Earn blockchain cred by executing your insights on-chain. ",
    description: "Using data analysis we first train a machine learning model to uncover the some insight into the bot activity on Lens Protocol by generating a publicly available dataset of over 100k profiles. However as is always the case",
      "FIELD11": " nothing is perfect. Every model is biased and it is impossible to build mindblowing models in few hours. Furthermore labeling the data is the most time consuming and often iterative process. Here in this project we deploy the model for both users to explore the ecosystem but also help to better differentiate between the human and bot activities. We store the user contributions on-chain (Scroll Alpha testnet) and paying them the transaction. We think that this provides users incentives to  contribute to the ecosystem as it leaves permanent traces. Furthermore the user inspection is made easier by providing additional Token/NFT data from Ethereum Mainnet that was not used in the training of machine learning. This is done with the incredible support Airstack. This solo hacked project combined data analytics (scraping like hell for Lens Protocol + onchain data). ML/AI using Google tabnet semisupervised learning (oldie but goldie) for bot classification. Gaming UI to incentivize people to contribute to labeling data and potentially validating the results. New GraphQL checking with Airstack. Cool resource and especially GPT4 plugin to write faster queries. Although complex queries still need some work. Fast data offers lot of interesting possibilities! Here we use it as a tool to assist analytics. Deploying attestations of user contributions to Optimism AttestationStation contract that this project deployed to Scroll. Besides these.  By far the biggest resource that was hacked was Lens Protocol. Flipside Crypto was used for additional analytics. BigQuery",
      "FIELD12": " NextJS",
      "FIELD13": " Python",
      "FIELD14": " NodeJs",
      "FIELD15": " Foundry for contract deployment/verification",
      "FIELD16": " Jupyter Lab",
      "FIELD17": " ChatGPT for collaborative coding and of course Pocketwifi.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 11,
    hackathon: "ETHGlobal Tokyo",
    title: "grteacher",
    more: "https://ethglobal.com/showcase/grteacher-v0a23",
    demo: "",
    repo: "https://github.com/GRTeacher/ethtokyo",
    video: "",
    winner: "",
    short: "A web-based quiz app that uses CELO blockchain and graphprotocol. The questions are preparation for the initial interviews for the Graph Advocates program.",
    description: "A web-based quiz platform that uses Celo blockchain technology for a transparent",
      "FIELD11": " tamper-proof",
      "FIELD12": " and decentralized experience. Users connect their Celo wallet to register",
      "FIELD13": " answer questions",
      "FIELD14": " and receive rewards in Celo tokens. The platform leverages smart contracts for quiz logic and ensures data integrity",
      "FIELD15": " making it ideal for educational or competitive purposes. The user-friendly interface and integration with popular wallet providers offer a seamless experience",
      "FIELD16": " while the underlying blockchain technology fosters trust and fairness for all participants. I used ChatGPT to write all the code",
      "FIELD17": " as I do not have any coding experience. It was very interesting to see how good it was!ChatGPT used: To build this web-based quiz platform",
      "FIELD18": " we utilized the following technologies:Celo Blockchain: The core of the project",
      "FIELD19": " Celo provides a decentralized",
      "FIELD20": " secure",
      "FIELD21": " and transparent system. We used Celo's smart contracts to handle quiz logic",
      "FIELD22": " user registration",
      "FIELD23": " and token rewards. This ensures data integrity and maintains trust among participants.Solidity: We wrote smart contracts in Solidity",
      "FIELD24": " the primary language for Ethereum and Celo blockchain development. These contracts handle quiz creation",
      "FIELD25": " question management",
      "FIELD26": " user participation",
      "FIELD27": " and rewards distribution.React: A popular JavaScript library",
      "FIELD28": " React enabled us to build a responsive and interactive user interface. We integrated it with Web3.js to communicate with the Celo blockchain.Web3.js: This library allowed us to interact with the Celo blockchain",
      "FIELD29": " enabling users to connect their wallets",
      "FIELD30": " participate in quizzes",
      "FIELD31": " and receive rewards.Node.js & Express: We used Node.js for server-side logic",
      "FIELD32": " and Express to create a lightweight",
      "FIELD33": " flexible API to serve quiz content",
      "FIELD34": " user data",
      "FIELD35": " and other necessary information.One notable hacky aspect of our project was the implementation of a custom gas optimization technique. We minimized the amount of data stored on-chain by keeping quiz content off-chain and only storing necessary transactional data. This significantly reduced gas fees and improved user experience without compromising data integrity or decentralization.",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 12,
    hackathon: "ETHGlobal Tokyo",
    title: "Blood-D-Tokens",
    more: "https://ethglobal.com/showcase/blood-d-tokens-fjbsw",
    demo: "https://drive.google.com/file/d/1yfgMSo6UMOzO_Mh8QLXxec79AWIzClxk/view?usp=sharing",
    repo: "https://github.com/0xHashiras/Blood-D-Tokens",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Here we are simulate a Decentralised Blood Bank system",
    description: " where users are rewarded as they donate Blood.",
      "FIELD11": "Blood-Donation-Tokens focuses on giving a social welfare ",
      "FIELD12": " general awareness and a practical approach to blockchain. Here we are simulate a Decentralised Blood Bank system where :User enrolls and applies for donation by filling applicationThe application form is then validated by the 'approver' and then called upon to the blood donation centre.here",
      "FIELD13": " the given details are verified by the \"physical verifier\" and on physical examination",
      "FIELD14": " the donor is moved to blood collection.The collector ",
      "FIELD15": " collects the blood ",
      "FIELD16": " updates the progress in blockchain and moves to screening test.The screener ",
      "FIELD17": " performs screening test and moves the blood to storage if blood is good to be taken.The entire process is updated on-chain step by step. with the user getting a fully On chain NFT . The user also gets blood tokens",
      "FIELD18": " which he later burn to withdraw blood from bank. The project uses Celo",
      "FIELD19": " Airstack",
      "FIELD20": " Push",
      "FIELD21": " Public welfare and encourages usage of Blockchain. The contract is made is an step by step nitty gritty process of the blood donation system with proper rewarding to the usersHere we are simulate a Decentralised Blood Bank system where :User enrolls and applies for donation by filling applicationThe application form is then validated by the 'approver' and then called upon to the blood donation centre.here",
      "FIELD22": " the given details are verified by the \"physical verifier\" and on physical examination",
      "FIELD23": " the donor is moved to blood collection.The collector ",
      "FIELD24": " collects the blood ",
      "FIELD25": " updates the progress in blockchain and moves to screening test.The screener ",
      "FIELD26": " performs screening test and moves the blood to storage if blood is good to be taken.The entire process is updated on-chain step by step. with the user getting a fully On chain NFT . The user also gets blood tokens",
      "FIELD27": " which he later burn to withdraw blood from bank.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 13,
    hackathon: "ETHGlobal Tokyo",
    title: "Chaos Distribute",
    more: "https://ethglobal.com/showcase/chaos-distribute-vdxzj",
    demo: "https://chaos-distribute.vercel.app/",
    repo: "https://github.com/iainnash/chaos-distribute",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Chaotically distribute NFTs",
    description: " Tokens across many chains in a dice/array format where users submit their desires into each slot and the server chooses a slot every 15ish minutes",
      "FIELD11": "Getting testnet and real tokens to use without any introduction to crypto is a race sometimes – for only small amounts of tokens. Why not make it a game? Users can fill slots on a board for 2 minutes and the computer within a semi-random 15 minute interval will select one of those entries on the board to get tokens. I plan to integrate social proof to avoid farming",
      "FIELD12": " but for the hackathon sake we make users login to verify their wallet to receive funds and prevent users signing too many times.While many projects attempt to verify security and trust in a multisig and wallet environment",
      "FIELD13": " this project turns this concept on its head: what if the wallet itself could do lots of random actions and users with no value in their wallets can submit proposed transactions such as getting some tokens or NFTs. Around every 5 minutes",
      "FIELD14": " the server will pick a random square on the proposal grid and execute it through the user's chosen chain and wallet either directly on the chain or via the chain's multisig.The backend here uses gnosis safe SDK and multisigs to collect tokens then a simple forwarder address to submit transactions to the safe. If something happens to the forwarder",
      "FIELD15": " assets are safe and can be recovered from another address associated with the safe to remove the forwarder's permission and fix the issues.Supported chains:Mumbai / PolygonGoerli / ETHGnosis ChainMantle This project uses a standard web front-end interface. Originally",
      "FIELD16": " I wanted the wallets not to be virtual multisigs but instead owned by users and able to do any action. After some thinking and barriers with Metamask SDKs I decided to go a more familiar route – scripting gnosis safe wallets that users can login to and chaotically propose transactions to.System architecture:[ Redis Server ]A redis server stores all previous transactions and upcoming proposed transactions",
      "FIELD17": " along with handling user timeouts.[ Front-end Client & API ]Interfaces with the user and the redis server. Can be found in client/[ Back-end Job Runner API ]This runs the 5 minute interval cron job. Can be found in server/[ NFT ]This is the NFT contract users can win. Can be found in nft/.Used APIs:Connect Wallet / WalletConnect v2EthersNext.jsSafe SDKNFT (ERC721)",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 14,
    hackathon: "ETHGlobal Tokyo",
    title: "DAOAD",
    more: "https://ethglobal.com/showcase/daoad-ks9ww",
    demo: "",
    repo: "https://github.com/hoshinodis/egt-daoad",
    video: "",
    winner: "",
    short: "A fair and open advertising platform using DAO.A fair and open advertising platform using DAO.A fair and open advertising platform using DAO.A fair and open advertising platform using DAO.A fair and open advertising platform using DAO.",
    description: "An innovative ad serving platform.It improves on the disadvantages of Web2 ad serving.DAO's fair and impartial ad screening makes the world of Web3 more exciting.An innovative ad serving platform.It improves on the disadvantages of Web2 ad serving.DAO's fair and impartial ad screening makes the world of Web3 more exciting.An innovative ad serving platform.It improves on the disadvantages of Web2 ad serving.DAO's fair and impartial ad screening makes the world of Web3 more exciting. We built a smart contract and DAO for web3",
      "FIELD11": " built the ad serving system in web2",
      "FIELD12": " and tied the two together on the front end.We built a smart contract and DAO for web3",
      "FIELD13": " built the ad serving system in web2",
      "FIELD14": " and tied the two together on the front end.We built a smart contract and DAO for web3",
      "FIELD15": " built the ad serving system in web2",
      "FIELD16": " and tied the two together on the front end.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 15,
    hackathon: "ETHGlobal Tokyo",
    title: "Galaxy Throne Warfare + ZK NFT Bridge",
    more: "https://ethglobal.com/showcase/galaxy-throne-warfare-zk-nft-bridge-x1cdt",
    demo: "",
    repo: "https://github.com/GalaxyThrone/tokyo_monorepo",
    video: "",
    winner: "⛓ Polygon — Best Cross-Chain Hack 🏊‍♂️ Polygon — Pool Prize ",
    short: "We've built a trustless #ERC721 open access #NFT bridge connecting L1 #Ethereum to L2 #Taiko & #Polygon zkEVM!🌉 Also",
    description: " introducing a fully on-chain turn-based strategy game on Taiko",
      "FIELD11": " Polygon zkEVM & Gnosis🎮. Plus",
      "FIELD12": " an easier zkEVM merkle proof backend!💻 #blockchain #innovation🚀",
      "FIELD13": "Title: Cross-Chain NFT Bridge",
      "FIELD14": " On-Chain Strategy Game & Enhanced zkEVM BackendDescription:We proudly present our hackathon project",
      "FIELD15": " addressing NFT interoperability",
      "FIELD16": " scalability",
      "FIELD17": " and entertainment in the blockchain ecosystem. Our project has three key components:Trustless ERC721 Open Access NFT Bridge: A secure cross-chain bridge connecting L1 Ethereum",
      "FIELD18": " L2 Taiko & L2 Polygon zkEVM",
      "FIELD19": " enabling seamless transfer and management of diverse ERC721 NFTs without intermediaries.Fully On-Chain Turn-Based Strategy Game: Showcasing our bridge's potential",
      "FIELD20": " we've developed an engaging",
      "FIELD21": " scalable game deployed on Taiko",
      "FIELD22": " Polygon zkEVM & Gnosis. Players can use NFT assets across networks",
      "FIELD23": " illustrating blockchain-based gaming's future.Enhanced zkEVM Backend with Merkle Proof Support: We've built a backend service to simplify Merkle proof generation/validation for zkEVM",
      "FIELD24": " streamlining the platform and enabling easier work with zkEVM applications.Our project empowers users and developers by offering flexibility and new opportunities. The cross-chain NFT bridge opens possibilities for creative expression",
      "FIELD25": " while the on-chain strategy game demonstrates blockchain gaming potential. The enhanced zkEVM backend optimizes the ecosystem and simplifies zkEVM application usage.We believe our project will contribute to blockchain growth and evolution",
      "FIELD26": " and we're eager to share it with hackathon judges and participants. We look forward to your feedback and further developing our platform as a comprehensive solution for NFT interoperability",
      "FIELD27": " gaming",
      "FIELD28": " and zkEVM optimization. For this project",
      "FIELD29": " we carefully selected cutting-edge technologies and tools to ensure a robust",
      "FIELD30": " scalable",
      "FIELD31": " and efficient solution. Here's an overview of our tech stack and how we put it all together:NFT Bridge: We utilized Taiko zkEVM and Polygon zkEVM as the backbone for our trustless ERC721 Open Access NFT Bridge. These Layer 2 solutions enable fast and secure cross-chain NFT transfers between Ethereum",
      "FIELD32": " Taiko",
      "FIELD33": " and Polygon",
      "FIELD34": " providing the desired interoperability.Smart Contracts: We developed our smart contracts using Solidity",
      "FIELD35": " a popular and versatile language for Ethereum-based applications. We employed Hardhat",
      "FIELD36": " a powerful development environment",
      "FIELD37": " for compiling",
      "FIELD38": " deploying",
      "FIELD39": " and testing our contracts",
      "FIELD40": " ensuring their reliability and security.Frontend: To create a user-friendly and visually appealing interface",
      "FIELD41": " we chose React",
      "FIELD42": " Next.js",
      "FIELD43": " TypeScript",
      "FIELD44": " and Tailwind CSS. This combination of technologies allowed us to build a responsive",
      "FIELD45": " modular",
      "FIELD46": " and maintainable frontend that interacts seamlessly with our smart contracts and backend services.Backend: For our enhanced zkEVM backend with Merkle Proof Support",
      "FIELD47": " we developed a Rust-based service to efficiently handle Merkle proof generation and validation. Rust's performance and safety features made it an ideal choice for this critical component.Sponsor Technologies: We integrated the @statechannels browser-based wallet to streamline the connection to Coinbase and Bitfinex APIs",
      "FIELD48": " simplifying user onboarding and interaction. We also leveraged MobX to design a reactive frontend that automatically updates based on changes in the underlying data.GPT-4 Assistance: To facilitate our development process",
      "FIELD49": " we occasionally sought help from GPT-4",
      "FIELD50": " OpenAI's advanced language model. GPT-4 provided valuable insights",
      "FIELD51": " suggestions",
      "FIELD52": " and ideas to improve our project throughout the development journey.By combining these technologies",
      "FIELD53": " we built a comprehensive solution that addresses NFT interoperability",
      "FIELD54": " gaming",
      "FIELD55": " and zkEVM optimization. Our project showcases the potential of blockchain-based entertainment and cross-chain interactions",
      "FIELD56": " paving the way for future innovations in the space.",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 16,
    hackathon: "ETHGlobal Tokyo",
    title: "DeFi Gaurdian",
    more: "https://ethglobal.com/showcase/defi-gaurdian-5dvr8",
    demo: "",
    repo: "https://github.com/diyahir/ETH-TOKYO-2023-Rate-Limits",
    video: "",
    winner: "📜 Scroll — Just Deploy 🔟 Push — Top 10 🏊‍♂️ Polygon — Pool Prize 👷 Taiko — 🥈 Best Dapp ",
    short: "Introducing a general purpose rate limit contract guardian to detect hacks and minimize losses at the smart contract level! ",
    description: "This project gives DeFi protocols an opportunity to give depositors additional safety guarantees to prevent hacks and minimize losses. We achieve this by tracking the inflow and outflow of tokens and using existing rate limiting heuristics to determine if a transaction is a probable hack. This smart contract acts like a proxy between the defi protocol and the broader chain. Using this proxy",
      "FIELD11": " we can determine if a token outflow is a likely hack. For example in the euler hack",
      "FIELD12": " 99% of the TVL disappeared in a few blocks",
      "FIELD13": " this is something we can surely detect using smart contracts. Additionally",
      "FIELD14": " we created a web app to monitor the inflow and outflows as well as some quick actions for the admin in the even of a hack.We leverage push notifications to quickly notify the relevant parties.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 17,
    hackathon: "ETHGlobal Tokyo",
    title: "Shin Protocol",
    more: "https://ethglobal.com/showcase/shin-protocol-1umv9",
    demo: "https://shin-protocol.up.railway.app/",
    repo: "https://github.com/imsaptarshi/shin-protocol",
    video: "",
    winner: "🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize ",
    short: "Proving your human credibility on-chain without losing anonymity",
    description: "Shin Protocol provides a two-way proof to verify humanity/credibility of a user on chain without losing anonymity and staying decentralized. Shin is a platform where you can prove your authenticity by completing tracks & quests which are mostly decentralized. By doing this - you would increase your trust score which",
      "FIELD11": " other dApps would use to prove your humanity. This project uses next.js & chakra on the frontend. We have used solidity for our smart contracts and ethers.js to connect them on the frontend.Project documentation is made on nextra by next.js.The project resides on the Polygon chain.We have used QuickNode for fetching user's on-chain analytics and integrate them into Shin's trust score.Bunzz",
      "FIELD12": " which we recently discovered helped us deploy our NFT contracts easily",
      "FIELD13": " which saved us a lot of time.ENS & LENS handle claims and verification were handled by their subgraphs on TheGraph.Lastly",
      "FIELD14": " Shin's on-chain notifications were made easy using Push Protocol.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 18,
    hackathon: "ETHGlobal Tokyo",
    title: "Interest Carry-Trade Arbitrageur",
    more: "https://ethglobal.com/showcase/interest-carry-trade-arbitrageur-4scrx",
    demo: "https://vimeo.com/818009442",
    repo: "https://github.com/Secured-Finance-ETH/Bot-Trading",
    video: "",
    winner: "💸 Secured Finance — Top DeFi Award 🌐 Hyperlane — Best Interchain Security Modules ",
    short: "Automated token carry swap bot 🤖 exploits interest rate 💰 differentials 24/7 ",
    description: "Automated token carry swap bot looks for interest rate differentials between lending / borrowing order pairs on Secured FinanceIt creates a strategy to maximise interest rate differentials",
      "FIELD11": " then executes it by borrowing token X",
      "FIELD12": " swapping it and lending token Y for a higher yield (APR) Technology:ethers.js to connect with the blockchainTypescriptNodeJSSmart contract ABIs from Secured FinanceBinance API for price fetchingArchitecture:Bot script that can be run in a cron job",
      "FIELD13": " listen mempool to run front-run attacksBackend botOur backend stack depends on the sponsor's technology",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 19,
    hackathon: "ETHGlobal Tokyo",
    title: "Lens Network Graph",
    more: "https://ethglobal.com/showcase/lens-network-graph-6jxwr",
    demo: "",
    repo: "https://github.com/gfkacid/lens-network-graph",
    video: "",
    winner: "",
    short: "Visualize the network of any lens profile in an interactive graph format.",
    description: "Lens Network Graph is a standalone app that aims to provide an easy to navigate visual representation of the social network of any lens profile in an interactive graph format.Target any Lens profile (no need to sign in",
      "FIELD11": " you can peep other people's network as well!) and render their connections in a graph",
      "FIELD12": " clustered by connection type:followersfollowingmutual followersUser can search for specific profile name in the graph",
      "FIELD13": " or filter by connection type We are using LensSDK to feftching the Followers & Following profiles for the selected Lens Profile.To render the graph",
      "FIELD14": " our library of choice is Sigma.js",
      "FIELD15": " a powerful dataviz library on top of graphology. We are using the circlepack layaout package of graphology to cluster nodes together based on connection type (relative to target Lens profile)",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 20,
    hackathon: "ETHGlobal Tokyo",
    title: "ZK Governance",
    more: "https://ethglobal.com/showcase/zk-governance-18b0x",
    demo: "https://github.com/Ethglobal-ZK-Wallet",
    repo: "https://github.com/Ethglobal-ZK-Wallet/frontend",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize ",
    short: "Zero Knowledge verification for governance participants that allows voting with anonymity.",
    description: "Our project provides a platform to tackle the problem of anonymity for governance by leveraging on zero knowledge proofs and \"humaness-verification\" (via Worldcoin ID) to mask the transaction identities of participants in a governance vote.We first use authentication sdks such as World Coin to onboard users and bring the amount of bad actors to a minimum.We customize various voting contracts that incorporate Semaphore's on-chain identity hashing and verification to provide non-disclosure of user origin while still being able to proof participation. This project uses WorldCoin ID and authentication/sdk to prove humaness of users while weeding out bots and bad actors.Thereafter we provide a custom voting contract that wraps around Semaphore's voting extension",
      "FIELD11": " to provide anonymity of users while still proving participation and tabulation of vote data.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 21,
    hackathon: "ETHGlobal Tokyo",
    title: "Commit-Reveal Schema Exploration",
    more: "https://ethglobal.com/showcase/commit-reveal-schema-exploration-nj9v7",
    demo: "",
    repo: "https://drive.google.com/file/d/1U2aUmS1RdpSFEv-8R4uSdA5pK62QuzVC/view?usp=sharing",
    video: "",
    winner: "",
    short: "This is an educational projects to learn more about the sharing secrets on a blockchain. ",
    description: "How to simultaneously broadcast secrets on a public blockchain?The difficulty on the blockchain is that participants can't share theirvalues at the same time",
      "FIELD11": " the first participantmust broadcat their value",
      "FIELD12": " meaning other participantscan act accordingly.SOLUTION__Commitment SchemeCryptographic algorithm that allows someone to commit to a valuewhile keep it hidden from others with the abilityto reveal it later.Phase 1: commitPhase 2: revealThe following contract implements commit-and-reveal for a game of rock-paper-scissors. This commit-and-reveal exploratory project uses solidity to implement rock-paper-scissors game logic. A simple React interface was built to manage connecting and deploying to the replit testnet",
      "FIELD13": " as well as providing an interface to invoke the rock-paper-scissors slidity contract.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 22,
    hackathon: "ETHGlobal Tokyo",
    title: "Axel",
    more: "https://ethglobal.com/showcase/axel-0j1yc",
    demo: "https://axel-ethtokyo.netlify.app/",
    repo: "https://github.com/KanishkKhurana/EthTokyo-Submission-2023",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Marketplace where developers can upload their saas products and get paid for usage all on chain! using zk we have abstracted the tedious process of client approvals and are ensuring quick and easy service utilisation",
    description: "Axel is a marketplace where developers can list their SaaS products that can be used by the community. this ensures that no one pays extra for the service and the developer gets a fair share. the entire project is on chain and all payments are controlled by smart contractsthis project uses sismo to ensure zk sign on the also takes care of the reputation of a person in a community. this ensures no bad actors.SISMO APP ID - 0xc7b905501592af8bdd512a91bf0a6ca1then this dapp allows you to list your saas that others can use and all this information is on chain using polygon mumbai testnet. and the payments are streamed for as long as a user actually uses that service using superfluid.finally all deployments have been done using bunnz and we have a quick action suite set up on scroll we use the following features-Sismo - Sismo Connect - we use sismo connect for ZK Sign up and connecting approved users to the dappscroll - we have deployed the smart contract on scroll to ensure smooth onboarding and end to end zk functionality in a fast fashionpolygon - we have deployed the smart contract on polygon for all major functionalities and adding the products and SaaS tools that devs makebunzz was used for deploymentSuperfluid was used to ensure that as a user uses a dapp",
      "FIELD11": " they only pay for the amount of time they spend using it .",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 23,
    hackathon: "ETHGlobal Tokyo",
    title: "Developer Community as a Service",
    more: "https://ethglobal.com/showcase/developer-community-as-a-service-96cyc",
    demo: "",
    repo: "https://github.com/razacodespython/DCAAS",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "A tool built for making delightful developer experiences",
    description: " powered by Lens and Chat GPT.",
      "FIELD11": "As professionals in the Developer Relations field within web3 we have seen first hand how much work It can be to support developers",
      "FIELD12": " builders",
      "FIELD13": " and teams in general that are working towards integrating our companies tools or services. Developer Community as a Service exists to make it easier to multiply the output of Developer relations teams. Our lens-powered",
      "FIELD14": " stack overflow meets message board",
      "FIELD15": " allows for developers to build and share their code in a social setting and receive help from the Protocols and developer communities they are building with.We aim to help foster the growth of developer communities in two ways:Create a platform where insights and code snippets shared in the walled gardens of Discord and telegram can be saved for future reference and discoverability.A Telegram bot that is trained on protocol documentation and on community-supplied questions to help point builders in the right direction as they navigate new technologies.Our smart contracts track comments",
      "FIELD16": " messages",
      "FIELD17": " and associated authors based on a lens profile. We took this approach to make our platform cross-chain from the start and have deployed on Polygon",
      "FIELD18": " Linea",
      "FIELD19": " and Scroll.Moving forward",
      "FIELD20": " we plan to implement lens posts on the Polygon communities and explore ways this can be extended further. This project uses the Lens Protocol API to authenticate and to create developer user accounts. Our smart contracts were built with hardhat and deployed on Polygon",
      "FIELD21": " Linea",
      "FIELD22": " and Scroll.Additionally",
      "FIELD23": " we leveraged the Telegram Bot API as well as Open AI's Chat GPT Fine Tuning API to create a proof of concept bot that can be trained on developers questions and the best answers supplied to those questions. Over time the bot will be better trained and equipped to handle many inquiries.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 24,
    hackathon: "ETHGlobal Tokyo",
    title: "Squirrlideology",
    more: "https://ethglobal.com/showcase/squirrlideology-o6hfg",
    demo: "",
    repo: "https://github.com/WillyDallas/Squirrlideology",
    video: "",
    winner: "",
    short: "This is an AI scenario generator that can create scenarios based on conflict of NPCs of different ideologies in a fictional or reality-based setting.",
    description: "This project is a piece of a larger game that I'm developing that attempts to map user's political ideologies based on their answers to silly questions revolving around squirrel land rights",
      "FIELD11": " squirrel healthcare",
      "FIELD12": " and similar",
      "FIELD13": " completely squirrel related",
      "FIELD14": " political questions.There is a general anger and malaise rising in the global population. People are fed-up with legacy systems of governance that have ballooned in size and budget to support violent bureaucracies while ignoring pressing problems and crises.  Resources are unfairly distributed",
      "FIELD15": " people are sick and hungry",
      "FIELD16": " prices are rising",
      "FIELD17": " and every day there is a new story detailing some failure of government or outrageous incompetency. It seems that waging war",
      "FIELD18": " or threatening to do so",
      "FIELD19": " is one of the few things that governments are still able to do.While we continue to innovate in all sectors of the economy while innovation in systems of governance have stalled. We leave governance to more learned",
      "FIELD20": " legal minds",
      "FIELD21": " and decry the ways government has failed us",
      "FIELD22": " without proposing or pursuing change on a more systemic level.Squirrly is an attempt to engage people in a process of governance experimentation by understanding better what it is they think government should actually do",
      "FIELD23": " and allowing them to build one from scratch.Users will engage in a generative storytelling game",
      "FIELD24": " where decisions are voted on",
      "FIELD25": " ideological impact of decisions are logged",
      "FIELD26": " and a squirrel government is formed to protect the squirrel nation from global catastrophe",
      "FIELD27": " internal strife",
      "FIELD28": " and attack by birds to hopefully arrive at ideas for better systems of governance",
      "FIELD29": " and more broadly",
      "FIELD30": " spark conversation about governance innovation. A conversation we desperately need to have if we are to survive all the natural and unnatural horrors that will confront us as we move forward in time. I was working on the scenario generation engine for this hackathon. With the help of my brother",
      "FIELD31": " we built a querying and classification engine using the OpenAI API and langchain to string together prompts and produce a data object that can be written to chain and pushed to users on a daily basis.",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 25,
    hackathon: "ETHGlobal Tokyo",
    title: "Murasaki",
    more: "https://ethglobal.com/showcase/murasaki-2gpnq",
    demo: "",
    repo: "https://github.com/adachi-440/Murasaki",
    video: "",
    winner: "",
    short: "Bridge between Polygon zkEVM and Layer1 using Hyperlane. In addition",
    description: " Wrap route can be used to easily issue tokens that can be used in various chains",
      "FIELD11": "Easy communication between zkEVM and Layer 1 using permissionless deployment of HyperlaneThe use of Hyperlane will also greatly facilitate integration with other L1 chains in the future.In addition",
      "FIELD12": " Wrap route can be used to easily issue tokens that can be used in various chains Build new endpoints",
      "FIELD13": " validators",
      "FIELD14": " and relayers for Bridge using Hyperlane's permissionless depolyment to allow connection to other chains.The use of Hyperlane will also greatly facilitate integration with other L1 chains in the future.In addition",
      "FIELD15": " Wrap route can be used to easily issue tokens that can be used in various chainsCommunication between Polygon zkEVM testnet and goerli and sepolia",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 26,
    hackathon: "ETHGlobal Tokyo",
    title: "SuperBuidl Platform",
    more: "https://ethglobal.com/showcase/superbuidl-platform-4am37",
    demo: "",
    repo: "https://github.com/junta/super-buidl-platform",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize 🔟 Push — Top 10 🏊‍♂️ Polygon — Pool Prize 💸 Superfluid — Best Financial Project 🏊 UMA & Across — Pool Prize ",
    short: "Community-oriented payment management platform for DAO workers with continuous payment through Superfluid governed by UMA Oracle",
    description: "Our core idea is to decentralize/democratize control of Superfluid money stream(CFA) by UMA’s optimistic oracle. Traditionally",
      "FIELD11": " Superfluid money stream is controlled by ACL(Access Control List)",
      "FIELD12": " which we have to trust those listed entities(wallet addresses).In our platform:In given DAOs(e.g. BuidlGuidl)",
      "FIELD13": " contributors are working with hourly-based fee. (e.g. $20/hour",
      "FIELD14": " over next 3 months)Contributors have to submit his progress within a certain interval(e.g. daily",
      "FIELD15": " weekly) publicly open.Contributors get paid with Superfluid money stream from DAO Treasury.Other community members continuously check his work provided step2.To create/update/delete the money stream",
      "FIELD16": " the corresponding statement of UMA oracle must be settled and “true”. For example",
      "FIELD17": " to delete the money stream",
      "FIELD18": "  someone in the community claims that “A has stopped working(no recent progress submission) anymore” and is settled as a true statement through UMA. This project uses @superfluid for streaming payments to builders based realtime",
      "FIELD19": " we are using @uma oracle to decentralize/democratize control of Superfluid money stream by UMA’s optimistic oracle. Money flow control of Superfluid and UMA’s attestation is integrated on smart contract level.We have used @worldcoin id for human verification before setting up stream for the builder. The platform uses @push chat for better community engagement",
      "FIELD20": " and it's also deployed to @polygonMumbai.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 27,
    hackathon: "ETHGlobal Tokyo",
    title: "ZK Vendor Credentialing",
    more: "https://ethglobal.com/showcase/zk-vendor-credentialing-jdvv4",
    demo: "https://github.com/csalvador58/zk-vendor-credentialing",
    repo: "https://github.com/csalvador58/zk-vendor-credentialing",
    video: "",
    winner: "🏊 Mina — Pool Prize ",
    short: "A Zero Knowledge app for Vendor Credentialing in Healthcare powered by MINA Protocol and zk-SNARKs.  ",
    description: "This project is the first step in a real practical use of zero knowledge in healthcare.  I've worked in Healthcare for several years as a service engineer.  All service workers know the pain point in the redundant vendor credentialing process every and throughout the year.  Multiple instances of personal and medical records are created and uploading to various systems in order to receive the credentials to access the hospitals.  This project looks to reduce and/or eliminate the point of creating and uploading multiple instances of private records.  Leveraging ZK technology",
      "FIELD11": " only specific information and be shared to the verify instead of a full copy of the record.MINA's protocol makes this project possible to create a project that is able to document any relevant information into a off-chain Merkle Tree process while generating a final proof or the root to be stored on-chain.  The project provides a demo of verifying different pieces of information on a simulated medical record.  The project makes use of the assert methods to verify a proof and also allows for updating records off-chain while only storing minimal data of the root on-chain. This project utilizes MINA protocol starting with it's MINA zkApp CLI.  I started learning how to build with MINA and utilized a boilerplate Merkle Tree sample from the documentation.  MINA uses SnarkyJS which allows to program with Typescript.  A lot of time was spent going through the tutorials of the documentation and there are many improvements that could go along in the future especially utilizing recursion into the program.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 28,
    hackathon: "ETHGlobal Tokyo",
    title: "Confide.id",
    more: "https://ethglobal.com/showcase/confide-id-zj7b8",
    demo: "https://confide.id",
    repo: "https://github.com/eli-d/ETHTOKYO2023",
    video: "",
    winner: "🌱 NETH — Ecosystem Impact ",
    short: "Decentralising community trust. Aiming to solve the problem of digital trust and identification by relying on the most reliable metric: human relationships. Users can validate people they know",
    description: " creating a web of trust that can be queried to form new networks and test legitimacy.",
      "FIELD11": "This project aims to create a web of trust on chain",
      "FIELD12": " where instead of validators or other parties creating universal verification (e.g. verifying to anyone that a given user has a given credential)",
      "FIELD13": " the trust is personal between people and based on human relationships. A given user is able to say that they trust another in different ways. They can trust the authenticity of another user",
      "FIELD14": " that is to declare they are a real person (Proof of Personhood). This may be because they have met them in real life at an event such as a hackathon. They can also trust whether the user is truthful and reliable in their judgement. This may be because they are colleagues or friends and know them to be trustworthy. Trusting a user doesn't create any sort of \"reputation\" or \"vouch\"",
      "FIELD15": " only posting on chain the fact that I",
      "FIELD16": " User A",
      "FIELD17": " trust User B to some extent. Once a user has a direct network",
      "FIELD18": " they can expand their network of trusted users by looking at the connections of their own connections. For example",
      "FIELD19": " if User A trusts User B to be real and trustworthy",
      "FIELD20": " and User B does the same for User C",
      "FIELD21": " User A can trust that User C is almost definitely real",
      "FIELD22": " and can make a judgement about whether they fully or partially trust them (or maybe not at all). The project also facilitates making judgements from combining partial trust - if 3 parties User A believes are real but potentially aren't trustworthy agree that User B is real and completely trustworthy",
      "FIELD23": " User A can be sure that User B is almost definitely real",
      "FIELD24": " and can again make a judgement about how trustworthy they are. The onchain implementation stores trusted parties for each user in a contract",
      "FIELD25": " allowing them to look up and update their trusts.  A webapp allows users to determine whether other users are within a certain degree of trust of their network. For the scope of this hackathon all networks are public",
      "FIELD26": " although it could be possible to implement a ZK approach in the future. The frontend uses React/Typescript on Next.js with a bespoke UI component and interaction system. The interface is designed for mobile first. The trust system is stored on chain in a Solidity contract and uses an offchain computation to find paths between users",
      "FIELD27": " which are validated on chain before being accepted.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 29,
    hackathon: "ETHGlobal Tokyo",
    title: "H3aven - Gata (Governance for Data)",
    more: "https://ethglobal.com/showcase/h3aven-gata-governance-for-data-x94o4",
    demo: "https://melodic-kitsune-ec6b61.netlify.app/",
    repo: "https://github.com/H3aven-Labs/h3-gata",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 🪄 FVM — DataDAOs 🪄 Airstack — 🥈 Best Idea Implementation ",
    short: "Tokenized Access Control Application for Granular Data Governance",
    description: "Context:H3aven.com",
      "FIELD11": " the leading B2B-Baas of LATAM serves companies by certificating contract and process workflows via corporate blockchain consensus. In ETH Tokyo our goal is to decentralize data storage",
      "FIELD12": " so we present GATA: A Data Governance Framework based on Tokenized Organizational Roles.User stories:-> Only a NFT holder is capable of accessing encrypted data.-> All profiles with the same role can access the same data.-> Whenever an user is removed of its role",
      "FIELD13": " access to specific data is also atomically removed.Unprecedented Value to Society:Solution to credential double-spending:  It is much more dangerous to share a private-key than to share recoverable credentials (Netflix password).Solution to the corporate data kidnapping problem (Ransomware) by distributing data silos by company roles with complete data redundancy. H3AVEN - GATA uses SAFE'S account abstraction to streamline WEB2 access to WEB3 as well an integration with Gellato a paymaster to outsource fees away from users.For the decentralized storage it uses Filecoin integrated via Lighthouse. All data is encrypted and only accessed if the user is a holder of a given NFT.The best hacker merit we had was to make a mass adoption plataform with easy access and granular data control compatible with the most common token standard in web3.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 30,
    hackathon: "ETHGlobal Tokyo",
    title: "verPor",
    more: "https://ethglobal.com/showcase/verpor-pd787",
    demo: "",
    repo: "https://github.com/Kanoopz/verPro",
    video: "",
    winner: "",
    short: "A way to verify onChain the experience  and work that developers have.",
    description: "A way to keep record of protocols",
      "FIELD11": " projects or companies where a developer has worked with or for. The idea is to issue a SBT from a smartContract to verify a certian protocol and/or project members so other people and/or user can have a proof that someone actually worked with or for an entity. Using lens as the userPlatform",
      "FIELD12": " two modules needed to be created",
      "FIELD13": " one for accepting a new user and other one to issue the actual SBT. A global interface contract was needed to be able to keep track of all the protcols/projects/companies instead of hardcoding (the info) on the modules.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 31,
    hackathon: "ETHGlobal Tokyo",
    title: "0xFable",
    more: "https://ethglobal.com/showcase/0xfable-a6uuo",
    demo: "",
    repo: "https://github.com/norswap/0xFable",
    video: "",
    winner: "",
    short: "Progress on a game",
    description: " but nothing really running yet",
      "FIELD11": " move along!",
      "FIELD12": "cf. short descriptionLorem ipsum dolor sit amet",
      "FIELD13": " consectetur adipiscing elit",
      "FIELD14": " sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam",
      "FIELD15": " quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident",
      "FIELD16": " sunt in culpa qui officia deserunt mollit anim id est laborum. cf. short descriptionLorem ipsum dolor sit amet",
      "FIELD17": " consectetur adipiscing elit",
      "FIELD18": " sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam",
      "FIELD19": " quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident",
      "FIELD20": " sunt in culpa qui officia deserunt mollit anim id est laborum.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 32,
    hackathon: "ETHGlobal Tokyo",
    title: "Buidl",
    more: "https://ethglobal.com/showcase/buidl-r3gnp",
    demo: "",
    repo: "https://github.com/marcuspang/account-abstraction-builder",
    video: "",
    winner: "🔟 Push — Top 10 🏊‍♂️ Polygon — Pool Prize ",
    short: "Buidl enables a tool for wallet creation that provides the legos  to customize and create a wallet with popular libraries",
    description: " using the ERC4337 standard. Through an intuitive plug and play interace",
      "FIELD11": " users can design their own wallets by specifying the parameters for each library.  ",
      "FIELD12": "Problems: Wallets are a key infrastructure for user onboarding into the ecosystem. Yet",
      "FIELD13": " many users today face lock in effects with high switching costs after using a particular wallet and are unable to port over their feature should they intend to change",
      "FIELD14": " steep barriers to entry since this requires technical knowledge to understand the smart contracts running the wallet and an inflexible tool where they are unable to configure the parameters.The project adopts the ERC4337 standard for account abstraction",
      "FIELD15": " enabling users to create and customize they own wallet. A platform with plug and play functions allows them to configure their parameters for each particular library supported.These are stateless libraries on the backend which goes into our account abstracted wallet. The codegen library then generates a smart account based on the parameters keyed in and these are passed to the front end in the for of byte code",
      "FIELD16": " and a signing key. Should the user feel satisfied with these parameters",
      "FIELD17": " they can then deploy where our platform deploys a smart wallet and this can be supported by any account abstraction wallet such as Argent.The libraries that we have supported include those by Push and AAVE Protocols  to enable updated notifications for users.This creates an easy o understand UI for users to create smart contract wallets based on their desired features and preferences. Our team used nextjs for the front end",
      "FIELD18": " and for the back end",
      "FIELD19": " we used codegen to generate a smart account. The Account Abstraction Wallet gets updated with the stateless libraries such as Push and AAVE.With these parameters",
      "FIELD20": " the byte code is pushed to the front end alongside a signing key. It then deploys a smart wallet on chain and this can be supported on any wallets that has account abstraction such as Argent.Polygon : 0x777D8F64781d8548151bad125B1084eeE12C91D7 on polygon mumbaiGoerli Ethereum: 0xf3C302a9dCe602f2EC571c825240d140B4732f23",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 33,
    hackathon: "ETHGlobal Tokyo",
    title: "CreatorCollect",
    more: "https://ethglobal.com/showcase/creatorcollect-cyf9a",
    demo: "https://www.loom.com/share/f4909571e8c94f78a5ab888cde940465",
    repo: "https://github.com/uniyalabhishek/lens-collect-livepeer",
    video: "",
    winner: "",
    short: "Tool for creators to bring utility to their Lens post collects - to token gate their events and special work or anything based on if someone has their particular post collect. Also allowing gated Livepeer video.",
    description: "CreatorCollect is a tool for creators to bring utility to their Lens post collects - they can token gate their events and special work or anything based on if someone has their particular post collect. The member who collects the creator's eligible Lens posts can get the exclusive benefit of this. This tool also has a feature to view gated live-stream or VOD(video on demand) later using Livepeer.In this MVP",
      "FIELD11": " I have gated 2 tickets based on 2 lens post collects and also added a token-gated Livepeer video which you only get access to if you have one of the posts collects.The flow is",
      "FIELD12": " you connect your wallet - there are predefined rules based on lens post collects collections",
      "FIELD13": " if you have anyone the post collects you are able to unlock gated content",
      "FIELD14": " which in this case is an event ticket by the creator. You can also watch the gated stream later. This project uses Lens posts collection contracts",
      "FIELD15": " Collab.Land API for token Gating",
      "FIELD16": " Livepeer for video streaming",
      "FIELD17": " and Nextjs for front-end.Lens protocol collects have opened the doors for many features creators and artists can benefit from. For hacking quickly",
      "FIELD18": " I have made custom gating for Livepeer instead of using Livepeer webhooks.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 34,
    hackathon: "ETHGlobal Tokyo",
    title: "CreatorCollect",
    more: "https://ethglobal.com/showcase/creatorcollect-cyf9a",
    demo: "https://www.loom.com/share/f4909571e8c94f78a5ab888cde940465",
    repo: "https://github.com/uniyalabhishek/lens-collect-livepeer",
    video: "",
    winner: "",
    short: "Tool for creators to bring utility to their Lens post collects - to token gate their events and special work or anything based on if someone has their particular post collect. Also allowing gated Livepeer video.",
    description: "CreatorCollect is a tool for creators to bring utility to their Lens post collects - they can token gate their events and special work or anything based on if someone has their particular post collect. The member who collects the creator's eligible Lens posts can get the exclusive benefit of this. This tool also has a feature to view gated live-stream or VOD(video on demand) later using Livepeer.In this MVP",
      "FIELD11": " I have gated 2 tickets based on 2 lens post collects and also added a token-gated Livepeer video which you only get access to if you have one of the posts collects.The flow is",
      "FIELD12": " you connect your wallet - there are predefined rules based on lens post collects collections",
      "FIELD13": " if you have anyone the post collects you are able to unlock gated content",
      "FIELD14": " which in this case is an event ticket by the creator. You can also watch the gated stream later. This project uses Lens posts collection contracts",
      "FIELD15": " Collab.Land API for token Gating",
      "FIELD16": " Livepeer for video streaming",
      "FIELD17": " and Nextjs for front-end.Lens protocol collects have opened the doors for many features creators and artists can benefit from. For hacking quickly",
      "FIELD18": " I have made custom gating for Livepeer instead of using Livepeer webhooks.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 35,
    hackathon: "ETHGlobal Tokyo",
    title: "Arb-L2-deposits",
    more: "https://ethglobal.com/showcase/arb-l2-deposits-3aurf",
    demo: "",
    repo: "https://github.com/yashnaman/Vault-Arb-L2",
    video: "",
    winner: "",
    short: "Arbitrage Opportunity: Bridging ETH on Optimistic Bridges for Higher APY",
    description: "It is basically implementation of this idea suggested by 0xngmi: https://github.com/0xngmi/ideas#vault-for-arbing-withdrawals-on-l2-bridgesOptimistic bridges have long withdrawal times so people that want their money instantly have to use bridges like synapse or hop to cross the gap instantly",
      "FIELD11": " and because of the way they work this creates some positive slippage if you bridge in.This leads to an arbitrage opportunity",
      "FIELD12": " where you can bridge 1 ETH and get >1 ETH (eg: 1.01 ETH) on a L2. Afterwards you can withdraw that through the standard bridge",
      "FIELD13": " getting you >1 ETH back on ethereum.Right now if you did this you could be getting 10-20% APY on ETH",
      "FIELD14": " which is much higher than on other yield aggregators and the risk profile is much lower (you only need to trust the bridge protocol the moment you are bridging",
      "FIELD15": " and apart from that only trust point is that L2 will work correctly",
      "FIELD16": " which is a very safe assumption).The opportunity here is to build a protocol that automates this type of arbitrage",
      "FIELD17": " so people just deposit money on ethereum and the vault does everything for them. This opportunity is not open to traditional yield aggregators because they all work under the assumption that positions must be liquid.Probably the hardest thing to build here is some algorithm that maximizes APY by leaving some money resting on L1 (you want to bridge when most people are exiting in order to maximize arbs). The project uses foundry and has two contracts. One for the mainnet and one for the L2. The one on mainnet will use third party bridges to bridge from mainnet to L2. The one one L2 will use the official L2 bridge with a waiting period to bridge assets back. The interfaces for Arbitrum and Optimism are different in the case of the official bridge.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 36,
    hackathon: "ETHGlobal Tokyo",
    title: "GhoPal",
    more: "https://ethglobal.com/showcase/ghopal-h5bhr",
    demo: "",
    repo: "https://github.com/rysk-finance/tokyo-hack",
    video: "",
    winner: "",
    short: "GhoPal is the fast and safe way to send money to anyone",
    description: " anywhere. Harnessing the power of Safe auth kit",
      "FIELD11": " relay kit",
      "FIELD12": " GHO and Lens. GhoPal creates a frictionless way to create an account abstracted vault that allows anyone to send GHO to any address via their lens domain.",
      "FIELD13": "Letsa GhoPal!GhoPal aims to solve the widespread frictions of carrying out on chain payments when it comes to gas",
      "FIELD14": " recipient identification and multiple wallets by using a familiar web2-style sign-up format and gasless transactions enabled by Safe! It makes identifying and paying anyone much easier by allowing a recipient to be discovered by their lens domain",
      "FIELD15": " making everyone identifiable by their web3 social profile",
      "FIELD16": " harnessing both Lens Protocol and GHO by Aave!The product allows a user to spin up a gasless vault by harnessing Safe's Auth and Protocol kits",
      "FIELD17": " the user can then use this vault to send anyone some GHO by using their lens domain as an identifier and the transaction is gasless by harnessing Safe's Relay kit!For a user the flow is as follows:User comes to the website and signs in by Web3 auth",
      "FIELD18": " they can use any social profile such as email",
      "FIELD19": " instagram",
      "FIELD20": " twitter",
      "FIELD21": " github and many more ",
      "FIELD22": " they can also create their own lens domain directly in the website.User creates a safe (unless they already have one",
      "FIELD23": " in which case its automagically picked up) which will be used for gasless transactions on the GhoPal platform.User sends some GHO to their safe which they can use as their account to pay others. (unless they have done so already)User then enters a Lens domain",
      "FIELD24": " this is used to seamlessly retrieve the recipient of a certain amount of GHO specified by the user.Using Safe and Gelato Relays the GHO is sent to the recipient's wallet and the user doesn't need to pay any gas to send these tokens!You can see your past transactions and all the GHO you have distributed for friends",
      "FIELD25": " goods and services!We are super excited to demo this project as we believe it will create a real impact to widespread payments throughout crypto. The project uses multiple integrations to achieve its goals the app is entirely based in react and is handled client side",
      "FIELD26": " creating ultimate privacy and transparency.Josh handled the auth kit and frontendDan handled the frontend and designJib handled the safe relay and paymentsAshlyn handled the lens domain integrationsIts easiest to go step by step through each part of the user flow and how each integration has been used to unlock fast",
      "FIELD27": " safe and frictionless payments.The account creation system using the Safe auth kit basically uses the web3auth flow to generate an account for the user by taking advantage and using their current social profiles. Josh built this into the frontend and is fully usable. The lens integration for creating a lens account was done by Ashlyn and was done on eth-goerli and interacted directly with the smart contracts.Josh built the safe creation flow and used the protocol kit to do so taking advantage of the safe docs.The Lens domain is used in the recipient field and is used to get the address that is used for payments",
      "FIELD28": " this was done by Ashlyn and used the ownedBy field of the lens protocol .lens domain.A transaction is constructed using GHO as the token to send. Then the relay kit is used where the user is sponsored to have their funds sent to their desired recipient (syncWithFee could also be used here) but GHO is not currently enabled on the gelato relay fee oracle so cant be used for eth-less transactions which would be the ultimate choice for this product",
      "FIELD29": " however sponsoring the user is also great UX and makes the process much more seamless and accessible!The transactions are accessed via the gelato api to collect the tx hash and its details/status.",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 37,
    hackathon: "ETHGlobal Tokyo",
    title: "ChadGPT",
    more: "https://ethglobal.com/showcase/chadgpt-kikng",
    demo: "",
    repo: "https://github.com/kevin-fruitful/chadgpt-backend",
    video: "",
    winner: "🧰 FVM — Primitives",
    short: " Infra & Tooling ",
    description: "ChadGPT is Grammarly for Smart Contracts using the power of ChatGPT trained with a repository of 189 smart contract vulnerabilities and fixes. ",
      "FIELD11": "ChadGPT aims to solve the problem of time spent and bounties paid out for low to medium-tier vulnerabilities.ChadGPT catches many of these bugs",
      "FIELD12": " by allowing you to and will save you money on bounties and give you more resources to focus on higher-level vulnerabilities.By creating a Chad front-end for ChatGPT that accepts GitHub repo links and allows the user to ask questions of the code",
      "FIELD13": " anyone can find vulnerabilities in smart contracts.We used Filecoin Virtual Machine",
      "FIELD14": " LangChain.js",
      "FIELD15": " DeFi Hack Labs repo",
      "FIELD16": " and the ChatGPT API. The core focus of the project involved integrating the DeFi Hack Labs repository into a database formatted for optimal training of the ChatGPT model. We employed the embedded training approach",
      "FIELD17": " which simulates an open-book examination",
      "FIELD18": " allowing ChatGPT to function as a student and enhance its ability to search and retrieve answers from the provided database. This method leads to improved predictive capabilities due to the pre-memorized information stored within the model.In an upcoming upgrade",
      "FIELD19": " we plan to utilize the fine-tuning training technique to further augment the model's performance",
      "FIELD20": " transforming it into the more advanced GigaChadGPT.To accomplish our objectives",
      "FIELD21": " we leveraged the Filecoin Virtual Machine for storing the custom vulnerability database and Langchain for training the model. We also implemented next.js to develop a sophisticated front-end interface for Chad.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 38,
    hackathon: "ETHGlobal Tokyo",
    title: "Shingo",
    more: "https://ethglobal.com/showcase/shingo-7mzh0",
    demo: "https://www.loom.com/share/6d1f5be9c59b41939baa41db39fd3d1f",
    repo: "https://github.com/debuggingfuture/shingo",
    video: "",
    winner: "🫂 NETH — Best Social Contribution 🔟 Lens — Top 10 ",
    short: "Shingō app is a social impact network that let's you signal the solutions you want to see in the world",
    description: " and rewards the makers of public goods.",
      "FIELD11": "Shingō app capitalizes on the human tendency to use social media to show the problems in our world.  The flow of the Shingō user then becomes one that turns gamified social interactions into real",
      "FIELD12": " tangible change in the world.To begin: a user posts a picture and explains what they see and want to change in the world.  Then",
      "FIELD13": " an impact-maker responds showing the change they have created",
      "FIELD14": " and listing all the volunteers who helped make it happen.At the time that a project is posted",
      "FIELD15": " NFT sales can happen.  We can imagine a big NGO funder or interested party hosting a month-long program",
      "FIELD16": " for example: \"Clean-up our public spaces!\"  Let's say that Carlos' team cleans up their local beaches",
      "FIELD17": " and removes 400kg from the waters around their town.  Wow!  Everyone who has been to this beautiful beach is excited to see their work",
      "FIELD18": " and more and more people buy the NFT to show the amazing impact that was had.Behind the scenes",
      "FIELD19": " the volunteers who cleaned up the beach are awarded based on the NFT holdings.  They also are issued hypercerts at the same time.  We'll go back to this piece later!  For the first program",
      "FIELD20": " they receive a pay-out based on community excitement for their project",
      "FIELD21": " and showing the appreciation for the solution.  The person who posted the call-to-action gets to see change being made in the real world!The foundational innovation of Shingō is that this is only the beginning of the funding process.  Let's say it's a year later",
      "FIELD22": " and an ecological climate NGO wants to review projects who have had the most impact on Central America.  Looking at the metrics of trash which has been pulled out of the ocean by Carlos' team",
      "FIELD23": " experts from the NGO are able to attest to the lasting impact this has had in protecting an endangered species of sea turtle.  Now the experts attest to the impact - and the community votes using quadratic voting to indicate their excitement.  Amazing!  With all this new attestation showing the true impact of Carlos' project - his team gets paid out by the hypercert automatically to reward them for their work.This solves many problems in the funding space",
      "FIELD24": " namely: how can the impact makers be distinguished for their true effects over time?  How can we encourage the highest impact projects and celebrate their progress in a renewable and sustainable way? Shingō also includes gamified features and social network functionality that keeps community members coming back",
      "FIELD25": " and shows badges when they are deemed \"experts\" fit to help judge the true impact of a public goods project.  These in-app systems mean that the most addictive parts of social networks are now used for good to fund public goods in a sustainable way over time.We hope you'll try out Shingō for yourself soon!  We know users will love seeing change in the world and we expect the network to grow exponentially - just like the impact of public goods <3 Shingō is built on top of Lens Protocol for social networks and Superfluid asset streaming protocol. For hosting",
      "FIELD26": " IPFS has been employed.The core functionality of the social network allows someone to post a problem using Lens protocol for the post",
      "FIELD27": " and then a project to reply showing that they impacted change.  Behind the scenes",
      "FIELD28": " an NFT is minted which is sold to the community who is excited about the solution created.  These NFT sales ensure that the volunteers and makers of the public good get paid according to a fixed % over time.The rewards don't just stop at the first NFT sale",
      "FIELD29": " though. Hypercerts are used to set-up sustainable",
      "FIELD30": " ongoing rewards for the volunteers and makers of public goods. Right now",
      "FIELD31": " these reward rates can be set by the team who launches the public goods funding",
      "FIELD32": " and then these kick-backs execute on Polygon chain as experts and community members signal which projects make the most impact over time. Any project or volunteer who claims money when an NFT is bought also receives their rewards on Polygon network.The importance of Shingō's innovation is that rewards can continuously be redistributed as the true impact increases and experts and the community attest to the impact that has shown up in the world as a consequence of the project.  These \"rounds\" of impact assessment can be opened periodically to add value to the project and signal high impact.  We plan to use Gitcoin's Allo Protocol to allocate funds during these rounds",
      "FIELD33": " as a mixture of expert attestation and democratic quadratic voting.We deployed on goerli & mumbai testnet to demonstrate the functionality.  Since Hypercerts exist on Optimism and Lens network on Polygon chain",
      "FIELD34": " we seamlessly created a switch between the two networks to improve the UX without sacrificing functionality.We are excited to have the technology available to fund public goods in a gamified",
      "FIELD35": " and optimal way that rewards the biggest impact makers over time.",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 39,
    hackathon: "ETHGlobal Tokyo",
    title: "RediFlow",
    more: "https://ethglobal.com/showcase/rediflow-7kqqj",
    demo: "https://rediflow.co/",
    repo: "https://github.com/labsterx/rediflow-frontend",
    video: "",
    winner: "⚒️ Livepeer — Best Consumer Application 🏊 The Graph — Pool Prize ",
    short: "A pay-as-you-watch video platform powered by Web3 technology.",
    description: "RediFlow is a groundbreaking video platform powered by Web3 technology",
      "FIELD11": " providing a unique pay-as-you-watch model that revolutionizes the way users consume and pay for videos. With RediFlow",
      "FIELD12": " users can securely log in using their crypto wallets",
      "FIELD13": " creating a seamless and private account setup process. Our platform enables users to pay only for the videos they actively watch",
      "FIELD14": " ensuring cost-effective and efficient viewing. Content creators receive real-time payments",
      "FIELD15": " providing them with fair compensation for their work. RediFlow aims to disrupt the traditional video streaming landscape by offering a user-centric",
      "FIELD16": " privacy-focused",
      "FIELD17": " and empowering experience for both viewers and content creators.Pay-as-you-Watch:Seamlessly pay with cryptocurrencies for private and convenient video streaming. Use your crypto wallet",
      "FIELD18": " pay only when you are watching!Seamless Streaming:Enjoy high-quality streaming with Livepeer's robust video infrastructure",
      "FIELD19": " ensuring smooth playback and an exceptional viewing experience.Fair Compensation:Content creators receive real-time payments with Superfluid's streaming payment technology",
      "FIELD20": " providing greater control and monetization opportunities. This project utilizes Livepeer's infrastructure for hosting videos and live streams",
      "FIELD21": " and leverages Superfluid's money streaming features for pay-as-you-watch functionality. The frontend code is written in JavaScript",
      "FIELD22": " utilizing the VueJS framework",
      "FIELD23": " while the backend is developed in Node.js. The data is hosted using MongoDB.Please note: there are two Github repos for this project:https://github.com/labsterx/rediflow-frontend",
      "FIELD24": " https://github.com/labsterx/rediflow-backend",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 40,
    hackathon: "ETHGlobal Tokyo",
    title: "Vitae",
    more: "https://ethglobal.com/showcase/vitae-vxtw1",
    demo: "",
    repo: "https://github.com/MelanieRmz/ETHTokyo-Vitae",
    video: "",
    winner: "🔟 Lens — Top 10 ",
    short: "Consist in creating a new Lens module",
    description: " and integrate Soul Bound Tokens",
      "FIELD11": " to verify people's working background.",
      "FIELD12": "Nowadays it's has been an issue when hiring people",
      "FIELD13": " you cant verify their profile based inSBTs solve this problem by providing a secure",
      "FIELD14": " non-transferable NFT that represents a person's unique professional trajectory. Companies can issue SBTs to their employees",
      "FIELD15": " which include details of their work experience",
      "FIELD16": " projects",
      "FIELD17": " achievements",
      "FIELD18": " and other relevant information. When an employee applies for a new job",
      "FIELD19": " they can provide their SBTs as proof of their skills and experience. This provides a verified and immutable record of an individual's work history",
      "FIELD20": " making the hiring process more efficient and effective for companies.SoulBound Tokens are solving the problem of verifying work experience by providing a secure and immutable way for companies to confirm an applicant's claims about their past work history. With SBTs",
      "FIELD21": " individuals and companies alike can benefit from a more efficient and effective hiring process.Technical Details.We created a new module on Lens",
      "FIELD22": " to connect it to SBT. Consist on Follow the Module of the candidate’s profile",
      "FIELD23": " and other protocol members can interact with this user profile. The candidate must create this new module",
      "FIELD24": " specify the protocol that wants to join and only members of that protocol can follow him.The interface Contract:It has to make the mapping of the address of current members for the protocol",
      "FIELD25": " then connect it to the protocol mapping",
      "FIELD26": " after that there has to vote for a candidate to be accepted. There must specify the number of votes needed to mint the SBT.How does it connect to the protocol profile?There must be a special/Specific publication for the new members to collect the SBT",
      "FIELD27": " and they must have a minimum number of followers/Vote from the protocol members. We use the ERC-721 standard in OpenZeppelin to create a new contract.contract SoulBoundToken is ERC721 (constructor () ERC721 (\"SoulBoundToken\"",
      "FIELD28": " \"SBT\") {}and then defined the additional functionalities of the token.The code imports the ERC721 contract from the OpenZepelin library and creates a new contract that inherits from it. With the constructor",
      "FIELD29": " it is going to be linked to a function that sets the name and the symbol of the token.Next it is going to create a mapping of addresses to Token ID's and functions:pragma solidity ^0.8.0;import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";contract SoulBoundToken is ERC721 {uint256 public tokenCounter;mapping(address => uint256) public tokenIds;constructor(ProtocolMembers) ERC721(\"SoulBoundToken\"",
      "FIELD30": " \"SBT\") {    tokenCounter = 0;}function issueToken(address recipient) public {    uint256 newTokenId = tokenCounter;    _safeMint(recipient",
      "FIELD31": " newTokenId);    tokenIds[recipient] = newTokenId;    tokenCounter++;}We need to specify if we need additional functionality with the token",
      "FIELD32": " this will be defined when customizing the specifications from the companies that are going to be creating the SBT.Finally we integrate the smart contract with the Lens protocol.pragma solidity ^0.8.0;import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";contract SoulBoundToken is ERC721 {uint256 public tokenCounter;mapping(address => uint256) public tokenIds;constructor() ERC721(\"SoulBoundToken\"",
      "FIELD33": " \"SBT\") {    tokenCounter = 0;}function issueToken(address recipient) public {    uint256 newTokenId = tokenCounter;    _safeMint(recipient",
      "FIELD34": " newTokenId);    tokenIds[recipient] = newTokenId;    tokenCounter++;}function verifySoulBound(address owner) public view returns (bool) {    uint256 tokenId = tokenIds[owner];    return _exists(tokenId);}}This code adds a verifySoulBound() function that takes an owner address as input and returns a boolean indicating whether that address owns a soul bound token. This function can be integrated with Lens protocol to verify that a user has worked for a specific company.",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 41,
    hackathon: "ETHGlobal Tokyo",
    title: "LoyalFi",
    more: "https://ethglobal.com/showcase/loyalfi-47yks",
    demo: "https://www.loom.com/share/3a1638a6736745a1ac76c0565eee1fcb",
    repo: "https://github.com/ericguillaumet/LoyalFi2",
    video: "",
    winner: "🏊 The Graph — Pool Prize ",
    short: "Loyalfi is a simple and no-code tool that enables web3 protocols to incentivize their users based on loyal behavior. With Loyalfi",
    description: " protocols can easily reward their loyal users for their continued support and engagement.",
      "FIELD11": "Nowadays",
      "FIELD12": " users lack loyalty towards web3 projects because it's so easy to switch from one protocol to another. When we use a dapp",
      "FIELD13": " we do it to get benefit A in exchange for something. However",
      "FIELD14": " when a new project appears and offers us benefit A+1 for the same exchange",
      "FIELD15": " we immediately migrate",
      "FIELD16": " even if that extra benefit is unsustainable. Then",
      "FIELD17": " when this new project becomes unsustainable",
      "FIELD18": " we move on to another",
      "FIELD19": " creating a mercenary ecosystem.This makes it difficult for protocols to have stable users and forces them to focus only on short-term measures to avoid dying. In web3 coordination",
      "FIELD20": " it's all about incentives",
      "FIELD21": " and this behavior occurs because we're not incentivizing users to be loyal to the protocols.LoyalFi is a tool for web3 protocols that provides a simple method for identifying their most loyal users and rewarding them in a straightforward way. It's a tool",
      "FIELD22": " so each project's strategy for using it will depend on its creativity and innovation to differentiate itself from its competitors.So",
      "FIELD23": " how is this tool composed? LoyalFi is based on two easy-to-use features:Creation of a loyalty scoring algorithm based on custom parameters:The protocol inputs the smart contracts of its dapp and selects different parameters to quantify",
      "FIELD24": " such as liquidity provided",
      "FIELD25": " trading volume",
      "FIELD26": " frequency of use",
      "FIELD27": " age",
      "FIELD28": " etc.Each of these parameters will return values with different units of measure",
      "FIELD29": " so we normalize them with the simplest statistical formula:Z = (X - μ) / σWhere:X is the value of the parameter obtained for a particular user's wallet.μ is the mean of the parameter for all users.σ is the standard deviation for all users.After that",
      "FIELD30": " the protocol decides how much weight or importance to assign to each parameter",
      "FIELD31": " according to how much it wants it to affect the loyalty score. For example",
      "FIELD32": " if governance is highly valued",
      "FIELD33": " the protocol should assign a lot of weight to the governance interaction parameter.Once we have the normalized values and their respective weights",
      "FIELD34": " we do a weighted sum to get the ranking.Snapshot and NFT:We can take a snapshot at the chosen date and time and for the number of users to reward (e.g.",
      "FIELD35": " the first 300)",
      "FIELD36": " and automatically create a smart contract that only loyal users can mint.This NFT serves as an on-chain pointer to identify who the loyal users are and facilitate the delivery of rewards. For example",
      "FIELD37": " some rewards could be:Distribution of monthly revenue returnsAccess to beta featuresAccess to events or collaborations with other projectsThese are just some examples; the idea is to create the tool so that each project's creativity can maximize its potential. This project is a Loyalty app built primarily using Python",
      "FIELD38": " Flask",
      "FIELD39": " and JavaScript. The backend is powered by Flask",
      "FIELD40": " a lightweight web framework for Python",
      "FIELD41": " which handles routing and server-side logic. The frontend is built using HTML",
      "FIELD42": " CSS",
      "FIELD43": " and JavaScript (also known as Vanilla JS)",
      "FIELD44": " which is responsible for the UI and interaction with the backend.Here is an overview of the technologies used and how they're pieced together:Flask (Python web framework): Handles routing and server-side logic",
      "FIELD45": " such as checking wallet eligibility for NFT claims and fetching user data from The Graph API.The Graph API: Provides data about liquidity providers and their respective addresses. The data is fetched in the backend using GraphQL queries and Python's requests library. This sponsor technology allowed us to easily access on-chain data and improve the overall performance of the app.Gnosis: gnosis is the blockchain that we use to deploy our smart contractsHTML",
      "FIELD46": " CSS",
      "FIELD47": " and JavaScript: Constructs the user interface and handles user interactions. JavaScript is used to connect to MetaMask and manage user wallet connections.MetaMask: A browser extension used for managing Ethereum wallets. It's integrated into the app through JavaScript to enable users to connect their wallets and check eligibility for NFT claims.As for the project's structure",
      "FIELD48": " the Flask app handles the routes and renders templates for each page. HTML templates are used with Jinja2 templating engine to provide dynamic content based on the user's interactions. CSS is used to style the pages",
      "FIELD49": " ensuring a consistent and visually appealing design.There weren't any particularly hacky elements in this project. The main focus was on providing a clean",
      "FIELD50": " functional",
      "FIELD51": " and straightforward experience for the user. The components were designed to be modular and extensible",
      "FIELD52": " making it easy to add new features or modify existing ones in the future.",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 42,
    hackathon: "ETHGlobal Tokyo",
    title: "Abstracto",
    more: "https://ethglobal.com/showcase/abstracto-5x1xd",
    demo: "https://www.loom.com/share/3104a924acfd4302b0a99ec5146e699f",
    repo: "https://github.com/t-proctor/abstracto-contracts",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Abstracto simplifies the user onboarding process for decentralized applications (dApps) by offering trial versions without the need for signups",
    description: " wallet creation",
      "FIELD11": " or private key management.",
      "FIELD12": "Abstracto is here to make the world of decentralized applications (dApps) accessible for everyone. With thousands of dApps available",
      "FIELD13": " it's crucial to simplify the onboarding process. Our user-friendly solution offers trial versions of dApps and enables developers to easily plug our utility into their existing dApps for a seamless experience. We've achieved this by utilizing Solidity",
      "FIELD14": " existing smart contracts for Gnosis Safe",
      "FIELD15": " and the proposed EIP-4337",
      "FIELD16": " which together enable account abstraction on Ethereum.In our visual examples",
      "FIELD17": " we demonstrated the process using ApeCoin. By leveraging account abstraction",
      "FIELD18": " we ensure smooth interactions with dApps while maintaining security and decentralization. With Abstracto",
      "FIELD19": " explore a diverse range of dApps in a welcoming and inclusive environment",
      "FIELD20": " and together",
      "FIELD21": " let's build a thriving decentralized ecosystem for all. At Abstracto",
      "FIELD22": " we've put our hearts and minds into creating a solution that simplifies the world of decentralized applications (dApps) for everyone. We've used the Solidity programming language",
      "FIELD23": " combined it with the powerful smart contracts of (Gnosis) Safe",
      "FIELD24": " and tapped into the innovative EIP-4337 proposal. With our custom logic",
      "FIELD25": " we've tried to create a new feature with trial wallets",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 43,
    hackathon: "ETHGlobal Tokyo",
    title: "Social Wallet",
    more: "https://ethglobal.com/showcase/social-wallet-w4bit",
    demo: "",
    repo: "https://github.com/tecotec-ethglobal/social-account",
    video: "",
    winner: "",
    short: "This app aims to make creation of personal smart accounts easy and intuitive.",
    description: "Social Account is a web-based smart account application. Its primary function is to provide a simple GUI to deploy smart accounts and to use those accounts to send/receive cryptocurrency. All of this can happen while avoiding wallet apps or managing private keys.The key features we implemented in Social Account are the following:Social onboardingShared ownership of accountSocial recoveryWhen users first login to the app",
      "FIELD11": " they are presented with the option to login using the web2 providers of their choice",
      "FIELD12": " such as Google or Facebook. After successful authentication an EOA is automatically created and associated with the user",
      "FIELD13": " from there which they can proceed to create their smart account.Smart accounts that are created in Social Account may have shared ownership. When smart account is shared among multiple owners",
      "FIELD14": " it gives opportunity for Social Recovery to happen. Even when one account is compromised",
      "FIELD15": " another account owner can come in and revoke the ownership status of the compromised owner. Another Social Recovery use case is when an owner loses access to the primary provider they rely on",
      "FIELD16": " they can still login with another account",
      "FIELD17": " and ask other owners to grant him new ownership. This is an extra secure",
      "FIELD18": " flexible feature that is not available in the traditional EOA.Social Account also supports transactions between accounts. Social Account is a frontend only app primarily using react",
      "FIELD19": " deployed using Vite. For UI elements we have dabbled around with everygreen-UI. For the core smart account manipulation we took advantage of Safe  SDK",
      "FIELD20": " especially its Auth Kit and Protocol Kit packages.Safe SDK is the reason why we got the app up and working in this short window of time. We benefited a lot from its high level interface",
      "FIELD21": " which allowed us to focus more on the app functionalities rather than the low level details of the blockchain.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 44,
    hackathon: "ETHGlobal Tokyo",
    title: "ubf: the universal blockchain frontend",
    more: "https://ethglobal.com/showcase/ubf-the-universal-blockchain-frontend-ufkqc",
    demo: "https://backend-python-production.up.railway.app/",
    repo: "https://github.com/Miyamura80/BlockLangChain",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize 🦄 1inch — 🥇 Best use of Fusion ",
    short: "UBF is a universal blockchain frontend that makes blockchain technology accessible to everyone with payments",
    description: " identity",
      "FIELD11": " GUI",
      "FIELD12": " and natural language. It uses AI  for the best results and is open-source.",
      "FIELD13": "Blockchain technology is inaccessible to a lot of people: protocols and APIs can be hard to understand",
      "FIELD14": " and working between systems is tricky. This limits users",
      "FIELD15": " cuts revenues and slows learning times.Let’s solve this with the Universal Blockchain Frontend. We identified four key ingredients for a universal platform: Payments",
      "FIELD16": " identity",
      "FIELD17": " a GUI",
      "FIELD18": " and most importantly natural language. With these four things. anyone can do just about anything. Using these principles",
      "FIELD19": " we have built an AI-powered frontend fro a range of crypto back-end technologies.Our system beats OpenAI",
      "FIELD20": " Airstack and Langchain out of the box for a wide range of tasks. We’ve been able to do this with three people in thirty hours. Our success over ChatGPT is obvious because we can interact with endpoints. We also can succeed over Airstack because we can perform iterative communication operations to get more data. In another example. Our AI can discover Vitalik’s Address",
      "FIELD21": " which Airstack fails to do.Under the hood",
      "FIELD22": " we’re using the latest in AI advancements. We use retrieval-based toolformers",
      "FIELD23": " which have only come to play in the past few weeks. With careful prompt construction and novel memory stores",
      "FIELD24": " we’re getting the very best results.We think this technology can change everything. It’s open-source - you can find it on our repository. It can be deployed instantly - you can find that in our readme. And it’s universal - it works in any spoken language. Our project is based on a flask backend and a node frontend. We use Langchain as a tool for building tools that interface with large language models. Our current demo uses GPT 3.5.  We interact with the following sponsors:Metamask SDK for wallet connectionWorldcoin SDK for identity verificationIt's particularly worth mentioning our custom AI tools",
      "FIELD25": " which sit over APIs:Airstack API - customised as two AI toolsQuickNode API - customised as multiple AI toolsOneInch Fusion - customised as an AI tool",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 45,
    hackathon: "ETHGlobal Tokyo",
    title: "Worldname",
    more: "https://ethglobal.com/showcase/worldname-xuaoy",
    demo: "https://worldcoin.name",
    repo: "https://github.com/v3xlabs/worldcoin.name",
    video: "",
    winner: "🥇 Worldcoin — Best Overall 🏊‍♂️ Polygon — Pool Prize ",
    short: "A trustless sybil-resistant L2",
    description: " ENS subdomain issuer and resolver built on Polygon.",
      "FIELD11": "Using wallet addresses are hard",
      "FIELD12": " they are long",
      "FIELD13": " friendly and definitely not human readable. ENS charges 5USD in ETH for a name on L1 mainnet as a primitive  sybil-resistance method.With the rise of EIP-3668",
      "FIELD14": " otherwise known as the Cross Chain Interoperability Protocol",
      "FIELD15": " CCIP for short",
      "FIELD16": " we have unlocked the ability to run ENS resolvers on L2's as well as offchain. This project uses custom smart-contracts on Polygon and the Worldcoin Sybil Resistance Protocol to trustlessly issue ````` worldcoin.name`  subdomains with the advantage of lower gas fees of the Polygon Proof of Stake network. The project leverages the Cross Chain Interoperability Protocol (CCIP for short)",
      "FIELD17": " also known as EIP-3668",
      "FIELD18": " to link ETH mainnet and the Polygon network to allow for ENS subdomain resolution controlled by a Polygon smart-contract.This smart-contract uses the onchain Worldcoin Proof of Personhood Protocol to verify users are unique in order to issue them a subdomain.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 46,
    hackathon: "ETHGlobal Tokyo",
    title: "SourceLink",
    more: "https://ethglobal.com/showcase/sourcelink-nevma",
    demo: "",
    repo: "https://github.com/CAPTAIN320/SourceLink",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "A DeFi project funding platform built on the Ethereum blockchain can be a powerful tool for creating a decentralized ecosystem where anyone can create",
    description: " fund",
      "FIELD11": " and support projects without intermediaries. ",
      "FIELD12": "This project is a DeFi with a user interface for creating and publishing fundraising projects on an Ethereum blockchain network. It allows users to input project details",
      "FIELD13": " including a project title",
      "FIELD14": " description",
      "FIELD15": " target amount",
      "FIELD16": " deadline",
      "FIELD17": " and image",
      "FIELD18": " and submit them to the blockchain network to be published as a smart contract. They could also get a notification after donating to a project. The program was built using a variety of technologies",
      "FIELD19": " including React",
      "FIELD20": " Vite",
      "FIELD21": " MetaMask",
      "FIELD22": " Polygon",
      "FIELD23": " Goerli",
      "FIELD24": " ThirdWeb",
      "FIELD25": " Push Protocol and Solidity. React was used as the frontend framework to build the user interface",
      "FIELD26": " while Vite was used as the build tool to compile the code. MetaMask was used as the wallet provider",
      "FIELD27": " enabling users to interact with the Ethereum network. Polygon was chosen as the blockchain network to host the application due to its low transaction fees and high scalability. Goerli was used as the test network for development and testing purposes. ThirdWeb was used as a middleware and dev platform",
      "FIELD28": " Push for notifications while Solidity was used to write the smart contracts that power the application's functionalities. The program also includes error handling for invalid inputs and loading animations to provide a better user experience.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 47,
    hackathon: "ETHGlobal Tokyo",
    title: "Balus",
    more: "https://ethglobal.com/showcase/balus-6pef0",
    demo: "https://balus-monorepo-qmbgops8v-0xrhsmt.vercel.app/",
    repo: "https://github.com/0xrhsmt/balus-monorepo",
    video: "",
    winner: "🔟 Lens — Top 10 🏊‍♂️ Polygon — Pool Prize ",
    short: "Balus is a tool that supports simultaneous posting on multiple protocols using the Lens protocol. In the crypto industry",
    description: " it is common for multiple protocols to send the same tweet at the same time for marketing purposes. Balus enables this functionality on Lens as well.",
      "FIELD11": "The Balus project is a tool to promote the growth of crypto-SNS culture.Crypto SNS culture has a unique feature",
      "FIELD12": " which is cooperative promotion.Many protocols",
      "FIELD13": " such as zkSync and Base",
      "FIELD14": " post tweets with the same content at the same time.Not only does this have a high marketing impact",
      "FIELD15": " but it is also a culture unique to crypto that values cooperation over intense competition.Balus is a tool designed to foster this culture.In other words",
      "FIELD16": " it provides a tool for many protocols to easily collaborate and post simultaneously.Synchronising content and timing on Twitter can be very time consuming. Posting at the same time puts a lot of strain on the team.Balus is there to remove this burden. No more tedious coordination. Simultaneous posting can be fully automated.There is also no limit to the number of participants. Over 100 protocols can post simultaneously",
      "FIELD17": " like a festival.Simultaneous posting must be kept private. The posting has to be a surprise.Of course",
      "FIELD18": " Balus also has the functionality to post privately.Although Balus is still a work in progress",
      "FIELD19": " development will continue to make it a great service that can be used by more and more protocols.Slides:https://docs.google.com/presentation/d/1pYSBBLFERy9lJSHIyjptJKSZRN-GMwqM3Rea4M04aR8/edit?usp=sharing Balus has a simple configuration",
      "FIELD20": " consisting only of the \"Lens protocol\"",
      "FIELD21": " IPFS Pinning Service \"Pinata\"",
      "FIELD22": " and a original smart contract.We uses the \"Pinata\" Submarine API to temporarily manage files privately. Prior to simultaneous posting",
      "FIELD23": " post contents are stored in a private storage to prevent anyone other than the relevant parties from knowing the contents. Just before posting",
      "FIELD24": " the contents are broadcast to the public IPFS network.Our original contract has built-in logic to prevent participants in simultaneous posting from cheating.On \"Lens Protocol\"",
      "FIELD25": " the Dispatcher function is used to grant permissions for posting to the custom contract.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 48,
    hackathon: "ETHGlobal Tokyo",
    title: "OpenGalaxy",
    more: "https://ethglobal.com/showcase/opengalaxy-m1rwt",
    demo: "https://nft.fullyonchain.xyz/",
    repo: "https://github.com/Cryptocoders-wtf/generative",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "ERC721P2P which enables peer-to-peer trust-less transactions",
    description: " and uploading full on-chain SVG mechanism.",
      "FIELD11": "We have developed the OpenGalaxy",
      "FIELD12": " it is a website that is valuable to many creators.https://nft.fullyonchain.xyz/The advantages of this product are twofold.a. Highly compressed image data (SVG) storing on the blockchain.Because storing images on the blockchain is so expensive",
      "FIELD13": " many creators struggle to compress the data.With our product",
      "FIELD14": " creators simply upload the images they have created",
      "FIELD15": " and we automate the process of compressing them and storing them on the blockchain.b. ERC721-based NFT that enables peer-to-peer and trustless transactions.ERC721 has a few fundamental issues.Royalties are not enforceable.Many NFTs are stolen.It is not decentralized.In order to solve this problem",
      "FIELD16": " we need to create \"ERC721P2P\"",
      "FIELD17": " which performs transactions without trusted third parties (P2P transactions)",
      "FIELD18": " and makes it possible to enforce royalties. These two mechanisms (SVG compressing and peer-to-peer",
      "FIELD19": "trustless transactions) are independent of each other and have been developed by us as open source projects.The result of this hackathon was the fusion of these two mechanisms and their release as a website.We have built a web-based UI to make our SVG compression mechanism easily accessible to many creators.To address situations where our SVG compression mechanism may not be able to fully convert an image",
      "FIELD20": " we have enabled a side-by-side comparison of the original image and the compressed image.Set a link URL for each work so that creators can easily spread their work.(*) The registered Github URL is mainstream.The deliverables of the hackathon is in the following branch.https://github.com/Cryptocoders-wtf/generative/tree/feat/ETHGlobal2023",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 49,
    hackathon: "ETHGlobal Tokyo",
    title: "AbswapX",
    more: "https://ethglobal.com/showcase/abswapx-jmefw",
    demo: "https://eth-tokyo.vercel.app/",
    repo: "https://github.com/mbcse/AbSwapX",
    video: "",
    winner: "📜 Scroll — Just Deploy 🛠 Uniswap Foundation — Developer Tooling Track 🏊‍♂️ Polygon — Pool Prize 🏆 ETHGlobal Tokyo Finalist ",
    short: "An automation module to enable limit orders and scheduled strategies for DeFi",
    description: "We have created an automation module for any account abstraction or EOA wallet to be able to create limit orders from any token on any source chain to another token on any destination chain across EVM.Key Features we kept in mind while building the product -Trustless - AbswapX is a smart contract module",
      "FIELD11": " meaning it is completely decentralized",
      "FIELD12": " composable",
      "FIELD13": " and operates on a trustless system.Cross-chain - AbswapX can be deployed on any EVM-compatible chain",
      "FIELD14": " making it possible for users to trade across multiple chains.Automation - AbswapX leverages Gelato Network to automate the execution of limit orders. This means that once a user creates a limit order",
      "FIELD15": " they no longer need to actively monitor the market to execute the trade.Composable - AbswapX can be easily integrated into other DeFi protocols",
      "FIELD16": " enabling composability and allowing developers to create more complex trading strategies.The module is truly composable and trustless any developer can build on top of it to enable cross-chain DeFi automation across any EVM chain of their preference by choosing the protocols they want to interact with. AbswapX is deployed on Gnosis Chain and Polygon Chain. While on the testnet",
      "FIELD17": " we are deployed on Goerli",
      "FIELD18": " Mumbai",
      "FIELD19": " Polygon zkEVM",
      "FIELD20": " Linea",
      "FIELD21": " ScrollzK",
      "FIELD22": " Taiko and Mantle.When a user creates a limit order",
      "FIELD23": " they specify the token pair they want to trade",
      "FIELD24": " the price they want to buy or sell at",
      "FIELD25": " and the amount of tokens they want to trade.The limit order is then added to the AbswapX order book. We leverage Gelato Network to create a proxy task with call data as per the limit order specified by the user's EOA or account abstraction.When the price of the token pair reaches the user's specified price",
      "FIELD26": " the Gelato Network executes the trade automatically. The user's tokens are then swapped for the desired tokens at the specified price.For swaps on the Gnosis chain",
      "FIELD27": " we use Honeyswap V2 RouterFor swaps on the Polygon chain",
      "FIELD28": " we use Uniswap V3 RouterFor swaps across these chains",
      "FIELD29": " we use Connext Protocol to bridge the liquidity and call data from the source chain and execute it on the destination chainAnyone can create limit orders and DCAs across tokens across Gnosis and Polygon by using the product from the frontend as well.",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 50,
    hackathon: "ETHGlobal Tokyo",
    title: "AI Protector 1.5.1",
    more: "https://ethglobal.com/showcase/ai-protector-1-5-1-j4iig",
    demo: "",
    repo: "https://github.com/0xNoSignal/ai-protector-457",
    video: "",
    winner: " 🏆 Worldcoin — Honorable Mentions 🏊‍♂️ Polygon — Pool Prize ",
    short: "SAFE Creator Guard to protect you from getting fooled by ChatGPT utilizing WorldCoin proof of humanity",
    description: "The project created a SAFE smart contract in which you can confirm that your address belongs to a human via worldcoins proof of personhood. You also have to demand that the potential co-owners of the safe are real people and proof it the smart contract. Only after that you are able to create a SAFE with the co-owners.Lore:Who hasn't been in this situation? You made a new friend called Elon Musk (username: cutegirlXoXo) online and he wants to invest 1000ETH with you. But you are not sure",
      "FIELD11": " is he really a human or is cuteGirlXoXo maybe ChatGPT? So here comes the Solution: AI Protector 1.5.1",
      "FIELD12": " proof that you are a real human and then Elon and you can become investment buddies and create a SAFE. There are 3 components to it. I used hardhat to create a smart contract which implements WorldCoins on chain verification process and also is a proxy for deploying a SAFE.The 2nd part is a SDK which acts as a configurator to deploy the SAFE and verify your personhood",
      "FIELD13": " it adapts the safe protocol-kit. The final part is a demo website to use the product",
      "FIELD14": " it is made with nextJS and uses wagmi and wallet connect.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 51,
    hackathon: "ETHGlobal Tokyo",
    title: "novusys paymaster",
    more: "https://ethglobal.com/showcase/novusys-paymaster-w2h9j",
    demo: "",
    repo: "https://github.com/novusys/novusys-paymaster",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "A payment widget that enables users to pay for transactions with Stripe or ERC-20 tokens using the ERC-4337 paymaster to sponsor the entire transaction (value + gas fee) ",
    description: "Long gone are the days of scavenging exchanges to swap enough crypto to afford a transaction on a specific chain.Users will no longer have to purchase the specific token needed to mint",
      "FIELD11": " avoiding the struggles of having to swap/buy the desired token and the associated fees it comes with. Simply checkout with Stripe or held ERC-20 tokens and the paymaster will handle the rest through account abstraction.One focus of this project was to provide a modular widget that developers can integrate into their minting pages to allow their audience to have a frictionless minting experience. In this way both developers and users can benefit from social sign-in account abstraction and additionally the paymaster sponsor. We built the widget component and a sample mint site using NextJS TypeScript alongside a suite of smart contracts to support the ERC-4337 paymaster functionality curated by the Ethereum Foundation. We made custom changes to the paymaster smart contract to support our goal of being able to sponsor both the transaction value and the transaction fee for the user in exchange for a Stripe/ERC-20 token equivalent.We utilize auth0 for seamless social login and transaction signatures. Our smart contracts are deployed on Polygon and Goerli with future plans of supporting ApeCoin and Aave. For functionality we currently have Stripe working with plans on adding ERC-20 token support.Users will be given a list of ERC-20 tokens they own as well as how much of each token is needed to support the transaction. Transparency and clear indicators of transaction costs across the various payment methods is critical in our approach.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 52,
    hackathon: "ETHGlobal Tokyo",
    title: "DeFuture",
    more: "https://ethglobal.com/showcase/defuture-g31hx",
    demo: "https://http://eth-tokyo-defutures.s3-website-ap-northeast-1.amazonaws.com/",
    repo: "https://github.com/ETHGlobal-Tokyo-ValleyDance/defutures",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 4️⃣ Linea — Best Use ",
    short: "Defutures",
    description: " a decentralized futures trading exchange",
      "FIELD11": " meets users expectations to invest in a way it provides back both stability and constant high yield returns. It is designed to be extremely simple and straightforward - any crypto beginners are also able to use easily.",
      "FIELD12": "In the recent years",
      "FIELD13": " the popularity of futures trading exploded as it returned highest yields",
      "FIELD14": " especially in the world of DeFi where high fluctuations exists. Futures trading is proven to provide stability by its hedging mechanism and at the same time maintaining high profit when chosen the right volatility. However",
      "FIELD15": " the appearance of futures trading resulted DeFi users to lean more towards profitability in trading that exposes their positions to the heightened price volatility. High gas costs resulted for syncing off-chain data inevitable as well",
      "FIELD16": " resulting in a less decentralized dapp",
      "FIELD17": " counterfeiting blockchain’s main functions.We have figured this problem by implementing a fully decentralized futures exchange through integration of on-chain AMM formulas. This easily decides the cost of the position from given amount to buy. This is essential as it solves high gas costs when trying to form a cost in other ways",
      "FIELD18": " for instance order book mechanism. Bringing in an existing AMM formula",
      "FIELD19": " also helps in deriving a simpler structural mechanism",
      "FIELD20": " leading into high scalability and compatibility interchain and layers.We introduce you Defutures",
      "FIELD21": " Decentralized Futures.Defutures is a fully decentralized futures trading exchange. It is designed simple",
      "FIELD22": " easy and stable like no others. It does not support open book",
      "FIELD23": " instead integrates with an existing DeFi protocol’s AMM",
      "FIELD24": " using it to provide the strike amount for futures positions. An existing spot pair",
      "FIELD25": " and futures pair will converge to one another under given circumstances",
      "FIELD26": " and when convergence occurs",
      "FIELD27": " logic behind futures exchange is fulfilled. Our main audiences are not traders",
      "FIELD28": " instead crypto / trading beginners. Thus we have implemented a contract call that does both the staking and hedging using futures trading to provide stability in the investment model.Defutures is fully flexible as it welcomes multiple chains and layers",
      "FIELD29": " and to DeFi protocols with an existing AMM. It is structured to focus solely on providing low-risk investment products to the user",
      "FIELD30": " and at the same time guaranteeing constant profits. Therefore being designed in a simple",
      "FIELD31": " straightforward manner",
      "FIELD32": " scalability throughout the entire blockchain system is relatively easily drawn. Overall development directionTo maximize the user's investment experience",
      "FIELD33": " we designed the platform to enable DEX investments and hedging positions with a single ERC20 asset in a single transaction.As the hedging products target users who are new to crypto",
      "FIELD34": " we designed a user-friendly interface that clearly shows how the user's actions affect their investment returns and risks.To calculate values such as strike amount",
      "FIELD35": " margin ratio",
      "FIELD36": " and tolerance in real-time based on the user's input",
      "FIELD37": " we chose to perform complex calculations directly on the front-end instead of fetching pre-computed values from the blockchain.We utilized a Typescript-focused technology stack to enable all builders to share their products and provide constructive feedback to each other.FrontEndWe worked on a project using React and TypeScript for the frontend.To quickly connect to the blockchain and ensure efficiency and security of the work",
      "FIELD38": " We utilized the Metamask SDK for connection.We adopted the immutable function structure of Uniswap and calculated values such as \"Strike\" and \"AmountIn\" on the frontend.In this case",
      "FIELD39": " We utilized Multicall extensively to obtain the balances of various ERC20 assets across multiple chains.To make our service user-friendly for those who are new to crypto",
      "FIELD40": " We designed it with a user-friendly interface.For example",
      "FIELD41": " even if there is only one token",
      "FIELD42": " users can still set a pair and have the opportunity to engage in future trading.We simplified complex functions such as hedging amount and margin ratio for easy understanding.We believe this will greatly contribute to the expansion of Web3 solutions.BackendWe utilized a database to track user position creation",
      "FIELD43": " changes",
      "FIELD44": " and removal. As we aimed to implement a fully decentralized service",
      "FIELD45": " we did not use the backend for core trading functionalities. However",
      "FIELD46": " we used a database for the convenience of users.Smart ContractWe developed a smart contract using Hardhat and Solidity language. As the futures market differs from the spot market and can cause arbitrage when the price rises immediately after buying",
      "FIELD47": " it was challenging to implement an AMM for the futures market. Therefore",
      "FIELD48": " we created our own futures market AMM that is simple yet accurately sets the futures price by modifying Uniswap's CPMM.In addition",
      "FIELD49": " we completed the contract development using UniswapV2Router to create the product",
      "FIELD50": " and SwapRouter and NonfungiblePositionManager in UniswapV3Router. With the use of the Router",
      "FIELD51": " we were able to implement the addLiquidity and Hedge functions for the users.Furthermore",
      "FIELD52": " we created our own UniswapV2DefutureRouter and UniswapV3DefutureRouter by modifying the Router and implemented addPosition",
      "FIELD53": " clearPosition",
      "FIELD54": " and Hedge functions with them.To prove that it can be executed on various networks",
      "FIELD55": " we deployed it on Mumbai",
      "FIELD56": " Scroll",
      "FIELD57": " Linea",
      "FIELD58": " Taiko",
      "FIELD59": " Celo",
      "FIELD60": " and Mantle networks.",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 53,
    hackathon: "ETHGlobal Tokyo",
    title: "Catch",
    more: "https://ethglobal.com/showcase/catch-znfs1",
    demo: "https://github.com/dawsbot/catch",
    repo: "https://github.com/dawsbot/catch",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 🌱 Celo — Climate",
    short: " ReFi 🧱 Taiko — 🥈 Best Infrastructure 4️⃣ Linea — Best Use ",
    description: "An RPC cache for 10x faster requests. Save time",
      "FIELD11": " money",
      "FIELD12": " and the environment!",
      "FIELD13": "We hit Ethereum nodes thousands of times a day. Some functions take seconds to resolve",
      "FIELD14": " yet they are immutable. If the result is immutable",
      "FIELD15": " why do we ever recompute it?Now we don't!Catch is a global RPC cache for the entire world to use EVM Chains faster.This saves time",
      "FIELD16": " cost",
      "FIELD17": " and the environment! Anyone can use this today because it's proxy to your existing RPC node. It saves you time by serving up cached results when a query has already been seen. Not only time",
      "FIELD18": " but you also save money by not using up Alchem/Infura credits. Last but not least",
      "FIELD19": " this is better for the environment because it removes unnecessary computation and hardware usage for Ethereum nodes! This project was done with Next.js API routes which allow global serverless deployments to increase/decrease with demand. This is fast because a centralized server would be slow for users worldwide. The cache is currently in-memory (with plans to move to Redis soon)",
      "FIELD20": " and the codebase was made with TypeScript.I used Ethers.js to decode transactions but otherwise",
      "FIELD21": " the code is custom and homemade for the unique requirements of this project",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 54,
    hackathon: "ETHGlobal Tokyo",
    title: "Mercle",
    more: "https://ethglobal.com/showcase/mercle-bzpsr",
    demo: "https://app.mercle.xyz/mercledao",
    repo: "https://github.com/mercledao/mercledao_designs",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Mercle is the credentialing tool for communities to run KPI driven campaigns to attract new customers",
    description: " increase engagement from existing customers and reward the most valuable customers of the community.  ",
      "FIELD11": "Mercle allows protocols to issue identity credentials as dynamic SBTs to its network participants.It is the combination of SBTs and verifiable credentials.Features:Publicly accessible: The permissionless infrastructure allows everyone to access the identity NFT",
      "FIELD12": " leverage existing user data",
      "FIELD13": " and build more use cases.Self-sovereign: Users have full access to read",
      "FIELD14": " write and update their profile claims.Composable: Mercle’s NFT profiles are standard ERC-721 tokens making it composable with existing infrastructure.Goal:Mercle is to provide a no-code plug-and-play solution to help protocol",
      "FIELD15": " DAO",
      "FIELD16": " and communities to achieve:Community growth and engagement by issuing dynamic NFTs.Increase community engagement and attract new users with gamified modules. (Blur like campaigns).Identify and reward the most valuable contributors.Provide marketing analytics for each campaign.Allow communities to create smarter governance strategies on snapshot using NFTs to allow more voting powers.Problems:Onboarding: protocol lack a simple way to onboard web2 audience without thinking about managing their keys.Engagement: There is no web3 native mechanism with protocols to run marketing campaigns to drive growth.Analytics: Protocol lack valuable information about its users like",
      "FIELD17": " geography",
      "FIELD18": " age group",
      "FIELD19": " what other protocols they use etc. We have divided the User Profiles data into two parts.1.User Actions / IdentityThis is an IPNS profile that is not an NFT (yet). It is meant to be soulbound data (did:walletaddress) containing proofs of the work the user has done. The proofs are not restricted to a token or a community but an aggregate data proof of the user.The user requests a claim saying they have done a task. Mercle (for now",
      "FIELD20": " but later will be decentralized to the community level) will verify and attest the request claim if the claim is valid by signing the request with a Mercle wallet. This claim will be made verifiable onchain in the MembershipNFT contract.The MembershipNFT contract has CLAIM_ISSUER_ROLE role with the Mercle address as whitelisted. The plan is any person with the role should be able to issue claims.2.Rewards ProfileThis is the NFT contract that contains all rewards the user has claimed for the tasks they have performed. The claims and rewards are attested by Mercle wallet (has CLAIM_ISSUER_ROLE on contract).The NFT contract has two important variables isOpenMint and isTradable. isOpenMint allows anybody to mint tokens from the contract which can be toggled on/off. isTradable allows the tokens to be transferred from one address to another to make the token soulbound or tradable. It can be toggled on/off as well.There is another function mintNFTCampaign to allow users to mint from contract based on whitelisting. A minter will have to submit merkle proof and other parameters for minting. This is used when isOpenMint is not enabled and minting is allowed for selected few (eg community members).",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 55,
    hackathon: "ETHGlobal Tokyo",
    title: "Etheremon",
    more: "https://ethglobal.com/showcase/etheremon-60g8y",
    demo: "",
    repo: "https://github.com/richwarner/etheremon",
    video: "",
    winner: "",
    short: "On-chain Pokemon inspired battle game with machine learning monsters.",
    description: "This project is a Pokemon inspired on-chain game where you can walk around the forest and battle monsters that are becoming smarter over time through machine learning with ZKML. During the battle both the player and the monsters can take different actions like attack",
      "FIELD11": " heal and flee. Example future applications of the machine learning model include autonomous agents (monsters) and map generation. This project uses the MUD2 library as it's foundation for synchronized on-chain and off-chain in-game activity such as movement",
      "FIELD12": " player actions during battle etc. Furthermore the monsters in the game are connected to a ZKML machine learning model which makes them take smarter decisions during the battle encounters with the player.",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 56,
    hackathon: "ETHGlobal Tokyo",
    title: "Voincs",
    more: "https://ethglobal.com/showcase/voincs-wpm3n",
    demo: "",
    repo: "https://github.com/Shuta-syd/zk-voting-app-for-eth-global",
    video: "",
    winner: "🏊 Mina — Pool Prize ",
    short: "A voting system using zero-knowledge proofs enables anonymous",
    description: " secure voting without revealing individual choices.",
      "FIELD11": "Introducing Our Revolutionary Voting System: Anonymity Meets TransparencyIn today's digital age",
      "FIELD12": " security and privacy are more important than ever. Our mission is to create a voting system that upholds both anonymity and transparency",
      "FIELD13": " allowing every voice to be heard without fear of retribution or manipulation.Leveraging the power of the Mina protocol and its zero-knowledge proof technology",
      "FIELD14": " our innovative voting system ensures that voters can cast their ballots without revealing their identities",
      "FIELD15": " while maintaining the integrity of the election process. The Mina protocol enables a public",
      "FIELD16": " decentralized ledger where each vote is recorded and verified by multiple nodes",
      "FIELD17": " eliminating the risk of centralized control or manipulation. The system is developed using the snakyjs backend",
      "FIELD18": " a programming language. In this system",
      "FIELD19": " user information is handled with anonymity to ensure privacy. The primary function is to tally the yes/no responses provided by users. After collecting and processing these responses",
      "FIELD20": " the system calculates the total count and adds it to an ongoing chain",
      "FIELD21": " maintaining a record of all the responses over time.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 57,
    hackathon: "ETHGlobal Tokyo",
    title: "ERC721F - refungible NFTs",
    more: "https://ethglobal.com/showcase/erc721f-refungible-nfts-i3sjr",
    demo: "",
    repo: "https://github.com/merklejerk/erc721f",
    video: "",
    winner: "",
    short: "ERC721 NFTs that can be treated as ERC20s or vice versa for instant composability with AMMs and defi primitives.",
    description: "ERC721F tokens are actually composed of two contracts: An ERC721 and an ERC20 contract. State is shared and synced between them so balances can be manipulated using either! Transferring ERC20 tokens will result in ERC721 tokens in being moved around",
      "FIELD11": " and vice versa!To hold a non-zero balance of the ERC721 token",
      "FIELD12": " you must have some (fixed) multiple of the ERC20 token. If your ERC20 balance dips below a multiple",
      "FIELD13": " one of your NFTs will be set aside to be awarded to the next user that reaches a new ERC20 balance multiple. On the flip side",
      "FIELD14": " transferring individual ERC721 tokens results in a multiple of ERC20 tokens being transferred as well.The system is designed to be compatible with AMM architectures at all stages of the collection lifecycle. During setup",
      "FIELD15": " ERC20 tokens can be minted to a pool without backing ERC721 tokens",
      "FIELD16": " so they can be lazy-minted when ERC20 tokens are transferred out of the AMM pool to buyers. This mechanism allows NFT collections to use the \"Initial Dex Offering\" strategy of distributing their mints. There are many benefits to this approach:Instant liquidity",
      "FIELD17": " even before the first mint.Automatic price scaling with demand.Everyone",
      "FIELD18": " whale or minnow",
      "FIELD19": " can get in on the action!Collection owner receives perpetual royalties in the form of AMM fees while they maintain their position. The core project is all solidity",
      "FIELD20": " using foundry as the dev",
      "FIELD21": " testing",
      "FIELD22": " and deployment framework. It frankensteins the ERC721 and ERC20 standards together. Along with the token contracts",
      "FIELD23": " a demo token and a canonical helper contract for deploying new collections to uniswap v3 pools are provided. It's been deployed to polygon and tested against Uniswap",
      "FIELD24": " Opensea",
      "FIELD25": " and Metamask interaces and it all seems to work 🤞.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 58,
    hackathon: "ETHGlobal Tokyo",
    title: "Minacle",
    more: "https://ethglobal.com/showcase/minacle-m6vcx",
    demo: "",
    repo: "https://github.com/lucadonnoh/mina-state-proof",
    video: "",
    winner: "🏊 Mina — Pool Prize ",
    short: "Using Mina as an oracle while leveraging Hyperlane to transport the data to your chain of choice!",
    description: "With the increasing number of rollups and rollup SDKs",
      "FIELD11": " it will become easier to deploy your own custom rollup. However",
      "FIELD12": " one of the problems with launching your own rollup is that you loose the support for Oracles that you would have enjoyed if you stayed in an established rollup or chain.In order to solve this problem",
      "FIELD13": " we use Mina's zkOracles to fetch data from any http endpoint",
      "FIELD14": " for example",
      "FIELD15": " an ETH/USD price feed",
      "FIELD16": " a credit score api",
      "FIELD17": " etc. Now",
      "FIELD18": " because Mina's entire ledger history fits in a 22kb proof",
      "FIELD19": " we are able to verify the state of our zkOracle on an EVM chain of our choice! This approach is great for devs that want a the most trust-minimized option",
      "FIELD20": " but its quite expensive and inefficient to prove the same statement across many rollups multiple times.That's why we decided to use Hyperlane in order to bridge data from a source chain to any chain that supports their permissionless deployment. We first deploy a zkOracle app in Mina",
      "FIELD21": " which takes care of verifying data from our oracle. The retrieved state from the oracle",
      "FIELD22": " as well as the state of the Mina ledger are retrieved",
      "FIELD23": " we then compute an auxiliary proof for Mina's ledger proof and pass that and the account state to a verifier on [INSERT EVM CHAIN OF CHOICE].Once we have the Mina verification setup deployed",
      "FIELD24": " we deploy the Hyperlane contracts",
      "FIELD25": " our contracts that connect the verifier to the Hyperlane mailbox",
      "FIELD26": " as well as the rest of the setup required for Hyperlane.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 59,
    hackathon: "ETHGlobal Tokyo",
    title: "Nice Vote",
    more: "https://ethglobal.com/showcase/nice-vote-0oxa4",
    demo: "https://nice-qv-frontend.vercel.app/",
    repo: "https://github.com/student-cryptown/nice-vote",
    video: "",
    winner: "📜 Scroll — Just Deploy 🥇 Intmax — Best Use 🏊‍♂️ Polygon — Pool Prize ",
    short: "This privacy voting tool combines Intmax",
    description: " Scroll",
      "FIELD11": " and PolygonZkEVM. Privacy tokens issued by Intmax can be used to vote for voting contracts in Scroll and ZkEVM. Voting can proceed without knowing who has voted",
      "FIELD12": " and future updates can hide the current vote status",
      "FIELD13": " etc.",
      "FIELD14": "Intmax's intmax-interoperability-plugin allows voting with tokens minted on Intmax in voting contracts deployed on Scroll or PolygonZkEVM.Intmax is well suited for token distribution because of its complete privacy and very inexpensive and fast BulkMint functionality.Within the Intmax chain",
      "FIELD15": " the movement of tokens is completely unknown to the outside world",
      "FIELD16": " ensuring complete privacy.A certain degree of privacy is also ensured for Scroll and ZkEVM since a direct connection between IntmaxAccount and EOA can be avoided.Furthermore",
      "FIELD17": " a two-stage voting system will be implemented in the future to conceal the voting status during the voting process!This project aims to ensure the privacy of voting on the Internet while scaling appropriately. Technology used:chain: Intmax",
      "FIELD18": "Scroll",
      "FIELD19": "PolygonZkEVMlanguage: Rust",
      "FIELD20": "Solidity",
      "FIELD21": "TypescriptWeb3ToolChain: Hardhat",
      "FIELD22": "WagmiInterface: NextJS",
      "FIELD23": "TailwindcssTechnical Mechanisms:Utilizing Intmax's intmax-interoperability-plugin",
      "FIELD24": " you can vote on contracts on Scroll",
      "FIELD25": " PolygonZkEVM with tokens issued on Intmax.In addition",
      "FIELD26": " all voting and vote status can be checked from the Web Interface",
      "FIELD27": " which is very fast.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 60,
    hackathon: "ETHGlobal Tokyo",
    title: "EthMonsters",
    more: "https://ethglobal.com/showcase/ethmonsters-hze33",
    demo: "https://ethmonsters.io/",
    repo: "https://github.com/Atlas-labs-inc/ethermon",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Pokemon-style battler game with dynamically generated characters. Each EthMonster has original artwork and a unique moveset",
    description: " stored fully on chain.",
      "FIELD11": "We're in Japan",
      "FIELD12": " the home of the most successful franchise of all time",
      "FIELD13": " Pokemon. We felt inspired to create our own original creature battling game",
      "FIELD14": " called EthMonsters. On our app you can collect dynamically generated creatures",
      "FIELD15": " and battle them against others to prove you're the best trainer of them all.Every EthMonster has a unique moveset",
      "FIELD16": " giving it unique strengths",
      "FIELD17": " weaknesses",
      "FIELD18": " and play style. There are 150 different monsters",
      "FIELD19": " each with original artwork that was created during this hackathon. All of this is stored fully on chain",
      "FIELD20": " allowing anyone to create their own game modes or media that use these characters.The goal of our project was to be an inspiration for what the next generation Pokemon is going to look like. It's going to be built by a distributed community",
      "FIELD21": " building together on the world computer. There were 3 main components of the project:Art - all the art for the EthMonsters was made during the course of the hackathon. We used Midjourney to generate stunning images",
      "FIELD22": " and converted them into compressed SVGs so they could be stored on chain as the NFTs tokenURI. We deployed the creatures to multiple chains",
      "FIELD23": " so multiple communities would be able to play (Polygon mumbai",
      "FIELD24": " Polygon zkevm",
      "FIELD25": " Scroll",
      "FIELD26": " Taiko",
      "FIELD27": " Gnosis",
      "FIELD28": " Mantle)Gameplay - the gameplay was inspired by the original pokemon games",
      "FIELD29": " but we added  a mana system to prevent users from spamming moves and to add more strategy. The game runs on our fastapi server and we serve game state to the client using websockets. Our web app is designed from scratch with next.js. Users can connect their Metamask and sign a to create a \"sign in with ethereum\" functionality so users can make authenticated requests to the game server. We also display a users collection of NFTs by using ethers to fetch the data from the deployed contract. We used QuickNode for as our rpc provider service to make contract calls.Contracts - We used mostly the Atlas IDE to develop the smart contracts",
      "FIELD30": " with the addition of Foundry for gas estimation functionality and writing an advanced deploy script. We wrote 2 main contracts: a URI encoder contract",
      "FIELD31": " and the main NFT. The encoder stored all encoded SVGs and move list for each EthMonster. We had a 721 contract that used this contract to get tokenURIs. Since each SVG was so large",
      "FIELD32": " we had to write a custom deploy script that would preprocess the images",
      "FIELD33": " convert them to minified SVGs",
      "FIELD34": " and send 1 transaction at a time.",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 61,
    hackathon: "ETHGlobal Tokyo",
    title: "BlitzSquad",
    more: "https://ethglobal.com/showcase/blitzsquad-2jt43",
    demo: "https://eth-tok.vercel.app/",
    repo: "https://github.com/sushmitsarmah/eth-tok",
    video: "",
    winner: "🥈 Huddle01 — Best Use 🏊‍♂️ Polygon — Pool Prize 🥉 UMA & Across — Best Use ",
    short: "Play",
    description: " your favorite games ",
      "FIELD11": " stream the action live",
      "FIELD12": " and place bets with confidence with BlitzSquad.",
      "FIELD13": "BlitzSquad is an web3 gaming",
      "FIELD14": " streaming",
      "FIELD15": " and betting decentralized application (DApp) that aims to create a fun experience for Everyone. We tried to built a comprehensive solution for Everyone to Play ",
      "FIELD16": " stream ",
      "FIELD17": " Bet on Predictions on the games that they love. We Made it because we also identified several issues in existing tournament hosting platforms",
      "FIELD18": " such as lack of trust",
      "FIELD19": " centralization",
      "FIELD20": " and the absence of a comprehensive solution that caters to all gaming enthusiasts. BlitzSquad addresses these problems by offering a unique combination of gaming",
      "FIELD21": " streaming",
      "FIELD22": " and betting features",
      "FIELD23": " while also leveraging the power of blockchain technology for cross-chain interoperability.Why BlitzSquad ",
      "FIELD24": " when their is lot of such things already available in this world?Because ",
      "FIELD25": "Our end goal is to make a fun experience for all the users ..Major Problems in the Gaming and Esports Industry:1.Trust: Traditional tournament hosting platforms often suffer from trust issues due to their centralized nature",
      "FIELD26": " which makes them prone to manipulation and lack of transparency.2.Fragmentation: Gamers",
      "FIELD27": " streamers",
      "FIELD28": " and bettors have to use different platforms for their respective activities",
      "FIELD29": " leading to a fragmented user experience.3.Monetization: Players and streamers struggle to monetize their skills and content effectively",
      "FIELD30": " as current platforms offer limited earning opportunities.4.Interoperability: The lack of cross-chain functionality hinders the seamless flow of assets and data between different blockchain networks.How BlitzSquad Solves These Problems:1.Decentralization: BlitzSquad leverages blockchain technology to build a decentralized platform",
      "FIELD31": " ensuring a transparent and trustless environment for all users. This eliminates the risk of manipulation and promotes fairness in gaming and betting.2.Unified Platform: By integrating gaming",
      "FIELD32": " streaming",
      "FIELD33": " and betting services in a single DApp",
      "FIELD34": " BlitzSquad offers a seamless and enjoyable experience for gamers",
      "FIELD35": " streamers",
      "FIELD36": " bettors",
      "FIELD37": " and esports enthusiasts.3.Incentivized Ecosystem: BlitzSquad rewards players for their in-game performance",
      "FIELD38": " allows streamers to monetize their content",
      "FIELD39": " and incentivizes users for placing accurate bets on events and tournaments. This creates a win-win situation for all users and fosters a thriving community.4.Cross-Chain Interoperability: BlitzSquad implements cutting-edge technologies to facilitate seamless interaction between various blockchain networks. This enables users to easily move assets and data across different platforms",
      "FIELD40": " thereby enhancing the overall user experience.Why predicition betting ? Because Prediction betting is an exciting and engaging way to capitalize on people's passion for sharing their opinions and insights. Current platforms like Polymarket",
      "FIELD41": " Augur",
      "FIELD42": " PredictIt",
      "FIELD43": " and PlotX fall short in providing a seamless experience for users who want to place bets or questions. By combining gaming",
      "FIELD44": " streaming",
      "FIELD45": " and betting in BlitzSquad",
      "FIELD46": " we bridge this gap and create an all-in-one platform where users can participate in eSports and casual events alike. BlitzSquad offers a unique and inclusive experience that caters to gamers",
      "FIELD47": " streamers",
      "FIELD48": " and bettors",
      "FIELD49": " setting a new standard for the industry. And this platform also allows new game developers ",
      "FIELD50": " to showcase their games ",
      "FIELD51": " by letting players play",
      "FIELD52": " stream and bet on their games .. and earn rewards to new game creators and developers ..The blockchain gaming market is predicted to experience exponential growth",
      "FIELD53": " reaching $65.7 billion in revenue by 2027",
      "FIELD54": " marking a 1",
      "FIELD55": "328% increase and a CAGR of 70%. Additionally",
      "FIELD56": " the Esport Management software market is projected to hit $3.8 billion in revenue by 2027",
      "FIELD57": " a 336% increase compared to 2019",
      "FIELD58": " with a CAGR of 20%. Given these impressive growth prospects",
      "FIELD59": " we are extremely optimistic about the potential and success of the BlitzSquad DApp.https://docs.google.com/presentation/d/1m8kvp6Is-Lnmo2I2JnpGm8Wgr6x-FvSaQ8kkzHMbhHo/edit#slide=id.g1f4784372ae_0_1 1.Gaming:BlitzSquad incorporates a diverse selection of games",
      "FIELD60": " enabling users to play and compete on a decentralized platform. Our DApp utilizes smart contracts to manage game mechanics",
      "FIELD61": "Brackets",
      "FIELD62": " reward distributions",
      "FIELD63": " and user interactions securely and transparently.2. Streaming:Our DApp integrates with Livepeer",
      "FIELD64": " a decentralized video streaming protocol",
      "FIELD65": " to provide high-quality",
      "FIELD66": " live streaming capabilities for gamers and content creators. With this integration",
      "FIELD67": " users can broadcast their gameplay",
      "FIELD68": " watch others",
      "FIELD69": " and interact with the community in real-time.3.Monetization:BlitzSquad utilizes Superfluid to enable seamless and continuous monetization of content. As users stream",
      "FIELD70": " they can receive real-time micropayments",
      "FIELD71": " subscriptions",
      "FIELD72": " and donations in the form of Superfluid tokens. This empowers creators to earn a steady stream of income and incentivizes the growth of the platform.4.Cross-Chain Functionality:Hyperlane is integrated into BlitzSquad to provide cross-chain interoperability",
      "FIELD73": " allowing users to interact with various blockchains and assets. This enables a more inclusive and expansive ecosystem",
      "FIELD74": " granting users the flexibility to participate in BlitzSquad using their preferred blockchain networks.5.Betting and Predictions:BlitzSquad incorporates a decentralized betting system that incentivizes users to place bets on ongoing events and tournaments. Users can earn rewards based on their predictions",
      "FIELD75": " verified using the UMA protocol. This adds an exciting layer of engagement and competition to the platform.Community and Chat:To foster a strong sense of community",
      "FIELD76": " BlitzSquad integrates Push Chat",
      "FIELD77": " a decentralized messaging service. Users can chat with others",
      "FIELD78": " form teams",
      "FIELD79": " discuss strategies",
      "FIELD80": " and stay connected with friends and fellow gamers.",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 62,
    hackathon: "ETHGlobal Tokyo",
    title: "Invisible Empires",
    more: "https://ethglobal.com/showcase/invisible-empires-wkg3b",
    demo: "https://invisible-empire.vercel.app/",
    repo: "https://github.com/invisibleempire/contracts",
    video: "",
    winner: "🥉 Mina — Best Use ",
    short: "Invisible Empires is a fully on-chain implementation of the Risk board game. Built with Mina protocol",
    description: " we prove that all game execution factors (such as allocating territory and rolling dice) is fair and trustless.",
      "FIELD11": "The project aims to create a decentralized implementation of the popular board game \"Risk\" using the Mina protocol. The game will allow players to compete against each other in a virtual world and conquer territories using armies",
      "FIELD12": " just like the traditional game.The game will be implemented as a smart contract on the Mina blockchain",
      "FIELD13": " which will handle all the game logic",
      "FIELD14": " player actions",
      "FIELD15": " and state transitions. The smart contract will be written in Typescript and all the logic that runs will be generated into a proof that is verified on the Mina blockchain.The game has a user-friendly front-end interface that allows players to interact with the smart contract and participate in the game. We allow a maximum of four players. Territories are currently laid out as a grid of buttons",
      "FIELD16": " but will soon look like a map as in the Risk game. The front-end interface is built with Next-js.Players will be able to join the game by signing in with their Mina wallet. They will be assigned random territories across the map with each territory having 7 troops. They will then be able to deploy their troops to different territories on the game board and attack other players' armies. The game will be simultaneous",
      "FIELD17": " meaning players can attack as they choose as long as they have the troops to do so.The game will incorporate the Poseidon hash function to determine the outcomes of battles",
      "FIELD18": " making it more unpredictable and exciting. We determine if the hash of the two player id's & the attacking player's nonce is even or odd",
      "FIELD19": " then use that to determine which side wins the battle and defeats the opposite troops. We wanted to use a recursive proof to verify the Poseidon hash in batches",
      "FIELD20": " but had a time constraint and had to move onto other things.Overall",
      "FIELD21": " the project aims to provide a fun",
      "FIELD22": " engaging",
      "FIELD23": " and decentralized gaming experience to players around the world",
      "FIELD24": " while leveraging the unique features of the Mina protocol to ensure fairness",
      "FIELD25": " transparency",
      "FIELD26": " and security. This project is fully built on Mina protocol. We implemented the entire project in Typescript. Our smart contract implements functions for starting a game",
      "FIELD27": " playing a move",
      "FIELD28": " and verifying a player. Our helper class defines a struct for a Territory and implements functions for attacking",
      "FIELD29": " serializing our state Field element (will discuss later)",
      "FIELD30": " claiming & transferring territory ownership",
      "FIELD31": " checking for winners",
      "FIELD32": " and rolling the hash dice.We used the Poseidon hash function to add some randomness to the dice roll. As described earlier",
      "FIELD33": " we used the attacking and defending user's id's + the attacking user's account nonce to generate a unique hash. If that hash was even",
      "FIELD34": " we'd give the attacker the win. If odd",
      "FIELD35": " the defender won.One hacky thing in particular that we did was represent the entire game state with one 256 bit Field element. The first 80 bits were used to represent the 16 territories using 5 bits each. The first 2 bits defined the player that owned it",
      "FIELD36": " the last 3 bits defined the amount of troops that were left. We then used 16 more bits to count the number of territories each player owned. they all started with 4",
      "FIELD37": " but if someone reached 1111",
      "FIELD38": " they won the game.",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 63,
    hackathon: "ETHGlobal Tokyo",
    title: "Non disclose nft",
    more: "https://ethglobal.com/showcase/non-disclose-nft-dop1b",
    demo: "",
    repo: "https://github.com/jrobbl/non-disclose-nft",
    video: "",
    winner: "",
    short: "Nft and documents content is not disclosed until you buy them from vendor/marketplace",
    description: "Some project need for certain information to be private until the sale.Imagine a marketplace that sells recipes or a vendor who wants to keep a part of an nft as a secret (a like a secret box). This requires for the smart contract to be private until the buyers gets the tokens.For this I came to the idea of keeping sensitive information private from the smart contract and adding allowed addresses that is updates when bought. For this competition the solidity smart contracts were deployed due issues with time.For this",
      "FIELD11": " the tokenURI is hidden and an array of holders is created",
      "FIELD12": " everytime the owner (ideally the creator or the marketplace) adds a new holder then the URI is disclosed and the content can now me seen when connecting wallet.",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 64,
    hackathon: "ETHGlobal Tokyo",
    title: "Let's ENScrypt",
    more: "https://ethglobal.com/showcase/lets-enscrypt-3h88x",
    demo: "",
    repo: "https://github.com/yujisuga/LetsENScrypt/",
    video: "",
    winner: "",
    short: "We considered a service that issues X.509 certificates for ENS-based domains",
    description: " and have considered a world where Web servers can be accessed via the ENS domain in the future.",
      "FIELD11": "ObjectivesWe considered a service that issues X.509 certificates for ENS-based domains.When deploying a key to a Web server",
      "FIELD12": " it is assumed that ETH signing keys will be used",
      "FIELD13": " and we have considered a world where Web servers can be accessed via the ENS domain in the future.Base caseLet's Encrypt is already used for implementation as a free DV (Domain Validation) certificate issuance service.We investigated a mechanism that can issue this to ENS-based domain names.In the near futureA world where Web services are provided using ENS domains just like .onion domains will work on the closed networks using Tor.We imagined a future where E2EE communication is realized by implementing HTTP/HTTPS serversby extending the function of the Wallet.DeploymentIn that case",
      "FIELD14": " it is assumed that the TLS secure protocol with encryption and authentication functions like HTTPS will be used",
      "FIELD15": " so it is necessary to consider how the certificate issuance service for ENS domain names",
      "FIELD16": " as well as the DV certificate issuance service.A challengeThe signing keys corresponding to the ETH addressed need to be deployed on the internet (just like a hot wallet)Since this is very dangerous",
      "FIELD17": " we thought that it was necessary to set up a separate ENS subdomain FQDN.SolutionSpecifically",
      "FIELD18": " assuming that www.ee-global.eth can be a reverse lookup for ee-global.eth.We concluded that it would be appropriate to issue an intermediate certificate and an EE certificate separately like a PKI certificate chain.Temporarily DNS (not ENS) service with ENS domain as a subdomain",
      "FIELD19": " such as www.ee-global.eth by enabling reverse lookups from the Internet for sub-subdomains of deploy-ens-to-dns.com.www.ee-global.deploy-ens-to-dns.com can provide web services like the hosting service in this case)BenefitsTransfer of ETH",
      "FIELD20": " that is",
      "FIELD21": " by attaching a request (a normal DER format Certificate Signing Request can be used) along with the issuance fee payment",
      "FIELD22": " it can be completed with a simple 1-way protocol.Since CSR is public information (for example",
      "FIELD23": " the same idea as Certificate Transparency)",
      "FIELD24": " there are few security issues (however",
      "FIELD25": " discussion from the viewpoint of privacy protection is necessary) Based on the followings:OpenSSL commandshttps://www.openssl.org/docs/manmaster/man1/ERC-137: Ethereum Domain Name Service - Specificationhttps://eips.ethereum.org/EIPS/eip-137ERC-5298: ENS Trust to hold NFTs under ENS namehttps://eips.ethereum.org/EIPS/eip-5298Let's Encrypt documentshttps://letsencrypt.org/docs/IETF RFC5280: Internet X.509 Public Key Infrastructure Certificate and CRL Profilehttps://www.rfc-editor.org/rfc/rfc5280",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 65,
    hackathon: "ETHGlobal Tokyo",
    title: "Celo Proof of Participation",
    more: "https://ethglobal.com/showcase/celo-proof-of-participation-hd7df",
    demo: "https://eth-tokyo-dusky.vercel.app/",
    repo: "https://github.com/0xgeeb/eth_tokyo",
    video: "",
    winner: "👾 Celo — DAOs",
    short: " NFTs",
    description: " Gaming ",
      "FIELD11": "Dynamic NFT that showcases how much a user has participated on Celo",
      "FIELD12": "This project consists of a NFT contract and a front-end to mint the NFT. The contract searches the Celo blockchain to find which protocols or apps the user has interacted with to gauge their participation level in Celo. Depending on that participation level",
      "FIELD13": " the user will receive a Bronze",
      "FIELD14": " Silver",
      "FIELD15": " or Gold tier NFT. This project uses NFT URIs to display a different image for the amount of participation the user has on Celo. The contract calls out to prominent smart contracts on the Celo blockchain to find the msg.sender's balances of prominent protocol's tokens on Celo. Foundry was the framework used to write",
      "FIELD16": " test",
      "FIELD17": " and deploy the contract. The front-end for this project was built using Nextjs",
      "FIELD18": " Vercel",
      "FIELD19": " Wagmi",
      "FIELD20": " and RainbowKit.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 66,
    hackathon: "ETHGlobal Tokyo",
    title: "gass less token",
    more: "https://ethglobal.com/showcase/gass-less-token-dn070",
    demo: "https://gas-less-token.vercel.app/",
    repo: "https://github.com/ETH-Tokyo/gas-less-token",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Utilizes Account Abstraction (AA) protocol letting community tokens cover gas fees in DAOs. Aiming at non-marketable tokens",
    description: " it lets members use tokens for dApp gas fees",
      "FIELD11": " with treasury covering real costs. Boosts dApp dev",
      "FIELD12": " incentivizes token use & supports community growth.",
      "FIELD13": "At the hackathon",
      "FIELD14": " We are excited to develop a protocol that utilizes Account Abstraction (AA) to enable community tokens to cover gas fees. This protocol is designed with Decentralized Autonomous Organizations (DAOs) in mind",
      "FIELD15": " particularly those that use non-marketable tokens to form their communities",
      "FIELD16": " as market fluctuations can sometimes negatively impact community engagement.Within these communities",
      "FIELD17": " there is a demand for ways to provide utility to tokens without tying them to a market. To address this need",
      "FIELD18": " We plan to develop a tool that allows community members to pay gas fees using their community tokens when interacting with decentralized applications (dApps) developed within the community. The community's treasury would cover the actual gas fees on behalf of the members. By doing so",
      "FIELD19": " We believe we can encourage the development of dApps within the community",
      "FIELD20": " create incentives for obtaining community tokens",
      "FIELD21": " and ultimately contribute to the expansion and success of the community. We developed our product using the following technology stacks.what we used: ERC4337ERC4337 made it possible to pay for gas by community token.tech stacks: smart contractpolygon chainsolidity / hardhat / openzeppelintech stacks: front-endnext.js / react / typescriptethers.js / wagmi / rainbowkit",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 67,
    hackathon: "ETHGlobal Tokyo",
    title: "gass less token",
    more: "https://ethglobal.com/showcase/gass-less-token-dn070",
    demo: "https://gas-less-token.vercel.app/",
    repo: "https://github.com/ETH-Tokyo/gas-less-token",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Utilizes Account Abstraction (AA) protocol letting community tokens cover gas fees in DAOs. Aiming at non-marketable tokens",
    description: " it lets members use tokens for dApp gas fees",
      "FIELD11": " with treasury covering real costs. Boosts dApp dev",
      "FIELD12": " incentivizes token use & supports community growth.",
      "FIELD13": "At the hackathon",
      "FIELD14": " We are excited to develop a protocol that utilizes Account Abstraction (AA) to enable community tokens to cover gas fees. This protocol is designed with Decentralized Autonomous Organizations (DAOs) in mind",
      "FIELD15": " particularly those that use non-marketable tokens to form their communities",
      "FIELD16": " as market fluctuations can sometimes negatively impact community engagement.Within these communities",
      "FIELD17": " there is a demand for ways to provide utility to tokens without tying them to a market. To address this need",
      "FIELD18": " We plan to develop a tool that allows community members to pay gas fees using their community tokens when interacting with decentralized applications (dApps) developed within the community. The community's treasury would cover the actual gas fees on behalf of the members. By doing so",
      "FIELD19": " We believe we can encourage the development of dApps within the community",
      "FIELD20": " create incentives for obtaining community tokens",
      "FIELD21": " and ultimately contribute to the expansion and success of the community. We developed our product using the following technology stacks.what we used: ERC4337ERC4337 made it possible to pay for gas by community token.tech stacks: smart contractpolygon chainsolidity / hardhat / openzeppelintech stacks: front-endnext.js / react / typescriptethers.js / wagmi / rainbowkit",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 68,
    hackathon: "ETHGlobal Tokyo",
    title: "dApp/Contract Verifier",
    more: "https://ethglobal.com/showcase/dapp-contract-verifier-jxa0h",
    demo: "https://eth-tokyo-fullstack.vercel.app/",
    repo: "https://github.com/joswha/ETHTokyo",
    video: "",
    winner: "📜 Scroll — Just Deploy 4️⃣ Linea — Best Use ",
    short: "Decentralized entity registry with Metamask snap that verifies dApp & smart contract address",
    description: "This project implements a missing link of trust in the web3 ecosystem: a decentralized mechanism for users to verify that they are interacting with the correct smart contracts and dApp for the protocol they intend. It is implemented in two components: a dApp/contract registry for protocols",
      "FIELD11": " and a MetaMask snap that checks potential transactions against the registry.The registry is a smart contract that allows protocols to announce their web2 dApp domains and confirm ownership while also indicating which smart contract addresses belong to the dApp. This public indication on the blockchain where users can interact with their protocol is intended to be part of a larger entity verification mechanism",
      "FIELD12": " where protocols can announce their legitimate points of contact for both web2 and web3 (dApp domains",
      "FIELD13": " smart contract addresses for each chain",
      "FIELD14": " Twitter",
      "FIELD15": " discord",
      "FIELD16": " etc) and confirm ownership of each",
      "FIELD17": " like a decentralized keybase.io for web3 entities.The other main component of this project is a Metamask snap that allows users to query the registry for each transaction",
      "FIELD18": " verifying that the dApp domain is registered and that the smart contract addresses match the domain. A fully-realized implementation of this scheme would prevent users from interacting with lookalike scam websites (because the registry would confirm ownership of multiple identity references) and could even stop front-end hacks (because the attacker would need to co-opt the domain",
      "FIELD19": " demonstrate ownership",
      "FIELD20": " and publicly update the trusted contract addresses in the registry). In the future",
      "FIELD21": " this mechanism could be implemented as part of every wallet to provide an indication of trust similar to the familiar green checkbox in the URL bar for browsers.The ultimate vision of this project is a verification mechanism that can work on any blockchain and gives users the confidence that they're interacting with the actual protocol",
      "FIELD22": " much the same way that the certificate authorities provide users confidence for web2",
      "FIELD23": " but in a decentralized manner. To get setup",
      "FIELD24": " a protocol hosts a signature accessible at https://theirdomain.com/proof.txt and uses our Dapp written in Next.js—which first checks if the proof is present from off-chain—to obtain a management role (which is transferred to the recovered address). This role is then used to submit which contracts are \"trusted\" by the protocol.When MetaMask opens to confirm a transaction",
      "FIELD25": " our MetaMask cross-references the contract the transaction interacts with the set of trusted contract addresses (which are keyed by the domain name).Under the hood",
      "FIELD26": " the smart contract includes a number of safety features and ensures there is no centralization risk.The worst case scenario",
      "FIELD27": " if our proof-checking bot (which allows protocols to get setup with us) were to go offline",
      "FIELD28": " is that no more protocols can get setup. In the future",
      "FIELD29": " we intend to use oracles to eliminate this possibility",
      "FIELD30": " but it poses no security or centralization risk.We (the owner) cannot revoke or control trusted contract lists after a timelock period.However",
      "FIELD31": " upon registration of a protocol",
      "FIELD32": " we are given a 72-hour “dispute” period to unregister a protocol. This stops a potential attack where an unregistered protocol’s website is compromised to host an attacker’s proof.This MetaMask snap applies to all transactions and sources; however",
      "FIELD33": " if a protocol is not registered with us",
      "FIELD34": " we show no warning (i.e.",
      "FIELD35": " it can only add safety/benefit).Our project allows any project to have a form of pausing (at least",
      "FIELD36": " warning users) without having to implement a pausing backdoor in the contract. For example",
      "FIELD37": " if a protocol were hacked",
      "FIELD38": " the owners could empty the trusted contracts list so that all MetaMask users are prompted with a warning before interacting with the contract.The contracts are deployed on multiple blockchains",
      "FIELD39": " including Polygon's Mumbai testnet",
      "FIELD40": " allowing protocols to register their valid dApp/smart contract address mappings for each chain.The MetaMask snap is pure JavaScript that checks the registry for each transaction and presents information or warnings to the user.",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 69,
    hackathon: "ETHGlobal Tokyo",
    title: "Brownie Points",
    more: "https://ethglobal.com/showcase/brownie-points-7yq3s",
    demo: "",
    repo: "https://github.com/Brownie-Points-EthTokyo/contracts",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🥇 UMA & Across — Best Use ",
    short: "Building Zero Knowledge based Metamask for personal browsing history",
    description: "We have built a chrome extension to democratise data sharing and wrench power back from big tech. In today’s digital economy",
      "FIELD11": " protecting the rights and privacy of the people should not come at the cost of the internet as we know it today. Kleo allows people to choose what they share and with whom. When a user lands on one of our partner sites",
      "FIELD12": " we pre-fill relevant data from the user’s browsing history on the Kleo pop-up. Users are given single-click toggles to share these attributes if they want to in the same way they would manage cookie preferences today. ****The simplicity of Kleo is that we don’t look to change user behaviour while continuing to provide rich and contextual user data.The main incentive here is to offer an extremely personalised experience to each visitor based on the information they’ve consented to share with platforms",
      "FIELD13": " and also to receive Kleo tokens in exchange for all this. The idea is that to allow users to connect with their personal data on different websites while preserving their privacy. The ideal customer profile is loaded up by the websites where they decide how they should bucket their customers based on who they are. Users collect brownie points in form of APE tokens. The questions are nothing but circuits",
      "FIELD14": " the proof is generated and shared with organisation which then can be verified on chain thus user privacy is maintained.Now there could be two things here - users start going to different websites to farm the tokens which means we need a way to stop that. That's where RLNs come in.Also in order to make sure intent is not violated we are using UMA optimistic oracle.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 70,
    hackathon: "ETHGlobal Tokyo",
    title: "litu safu ",
    more: "https://ethglobal.com/showcase/litu-safu-m9tja",
    demo: "https://eth-tokyo-0414.vercel.app/",
    repo: "https://github.com/taetaehoho/tokyo-frontend",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🥇 Lit — Best Use 🏦 Safe — Best Tech Implementation ",
    short: "Use LitPKP to create and sign safes - currently supports oauth (but can later also support ",
    description: "A marriage between the Litpkp and the Safe Auth Kitwe have created compatibility between the auth kit and the litpkp so that you can create wallets that create and sign safes with oauth (google",
      "FIELD11": " discord). We provide some skeleton code for supporting webauthn (faceId",
      "FIELD12": " touchId...etc)The ability for a Litpkp wallet to sign and create Safes!We have ported over functionality from safe-core/protocol-kit to be able to sign safe transactions",
      "FIELD13": " create safes from your Lit pkp social login walletthis provides the infrastructure for being able to sign safes with your faceId",
      "FIELD14": " touchId",
      "FIELD15": " google account",
      "FIELD16": " Discord account ...etc!Account abstracted! SafeAuthKit x LitWalletwe instantiated a litwallet with arbitrary auth methods (supporting both oauth and webauth) as the core provider/signer",
      "FIELD17": " replacing the existing provider/signer in the safeauthkitto do so required a ton of changes to the original safe auth kit classes",
      "FIELD18": " interfaces",
      "FIELD19": " types...etc.!The ability for the pkp to mint a safe!once we were finished with safe-auth x litpkp",
      "FIELD20": " we could now use the PKP address to create a safe!this was a difficult process as the pkp wallet wasn't out of the box compatible with the safe-core-protocol SDKthe PKP wallet then creates a safe via the safe factorythe ability for the pkp to sign transactionswe built a transaction through inputs of domainData",
      "FIELD21": " safeTypedata and the Eip712 tx type then signed this using a Lit actionWith this signature",
      "FIELD22": " we passed in other safe execution parameters which we require the user to input along with the signature to sign and execute existing transactions on safe!Some of the things worth mentioningCompatibility between the litwallet and the safe auth via writing our own adapter instancewe were able to use safe PKPs to sign a Safe transaction without using the SDK via lower level calls / functions",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 71,
    hackathon: "ETHGlobal Tokyo",
    title: "Habit Hacker",
    more: "https://ethglobal.com/showcase/habit-hacker-46chx",
    demo: "https://habit-hacker-fe-g695.vercel.app",
    repo: "https://github.com/HabitHacker/contract",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏆 NETH — Most Innovative 🏊‍♂️ Polygon — Pool Prize ",
    short: "Our service promotes consistent habits like exercise",
    description: " healthy eating",
      "FIELD11": " and learning. Users can bet on their success with real money",
      "FIELD12": " increasing motivation",
      "FIELD13": " and compete with others who have similar goals",
      "FIELD14": " fostering a competitive mindset.",
      "FIELD15": "We're developing a self-improvement service to help users establish consistent habits such as healthy eating",
      "FIELD16": " exercise",
      "FIELD17": " and learning. Our service includes two features: users can bet on their success with real money",
      "FIELD18": " increasing their motivation and providing a sense of accomplishment",
      "FIELD19": " and compete with others who have similar goals",
      "FIELD20": " fostering a competitive mindset. In order to process unstructured data such as exercise and learning with blockchain",
      "FIELD21": " we introduced a modulator concept similar to the node in the blockchain. Moderator verify user actions",
      "FIELD22": " and if they receive enough verifications",
      "FIELD23": " the actions are recognized. A manager role was created to monitor moderator and prevent authentication errors. These roles work together to create an ecosystem that benefits all involved. The contract was built on EVM using Hardhat and deployed with the transparent proxy pattern for upgradability. The Habit Hacker contract",
      "FIELD24": " which inherits roles for controlling contracts and NFT collections",
      "FIELD25": " contains most of the important logic and is the only contract we interact with. The backend was built using Express with Ether.js",
      "FIELD26": " and a relayer wallet was created to handle most transactions",
      "FIELD27": " with only msg.value transactions processed on the frontend. Information prior to verification is temporarily stored and then recorded on the blockchain in specific batch units when verified by moderators. The frontend was built using Next.js and Prisma.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 72,
    hackathon: "ETHGlobal Tokyo",
    title: "TornadoMina",
    more: "https://ethglobal.com/showcase/tornadomina-ee3wr",
    demo: "https://github.com/mwtndmik/TornadoMina#readme",
    repo: "https://github.com/mwtndmik/TornadoMina",
    video: "",
    winner: "🥉 Mina — Best Use ",
    short: "TornadoMina: Tornado Cash on Mina protocol.   We implemented TornadoCash protocol on Mina protocol. TornadoCash realize the mixing of the tokens or native currency.",
    description: "TornadoMina: Tornado Cash on Mina protocolConceptWe implemented TornadoCash protocol on Mina protocol. TornadoCash realize the mixing of the tokens or native currency.WhyMina protocol strong points are belowconstant size state proof",
      "FIELD11": " it realize constant size client node that have same power to the fullnodeuser privacy through zero knowledgeBut the Mina protocol itself is so early stage on the roadmap. So a lot of informations like MINA balance",
      "FIELD12": " token balance are public.Then we decided develop TornadoCash protocol on Mina in order to provide the basic user privacy.What this PoC can doThis product offers constant MINA native currency mixing and cli based demo using local network.ArchitectureDeposithttps://github.com/mwtndmik/TornadoMina/blob/main/img/deposit.jpgWithdrawhttps://github.com/mwtndmik/TornadoMina/blob/main/img/withdraw.jpgProblemsData availabilityThis PoC product assume that below 2 data is available and update offchainCommitmentHash MerkleMapNullifierHashesRoot MerkleMapBut the assumption is so strong known as data availability problem. Let's discuss with it.DevelopmentHow to buildnpm run buildHow to run testsnpm run testnpm run testw # watch modeHow to run coveragenpm run coverageCurrent Coverage| File           | % Stmts | % Branch | % Funcs | % Lines ||:---------------|--------:|---------:|--------:|--------:|| All files      |     100 |      100 |     100 |     100 || TornadoMina.ts |     100 |      100 |     100 |     100 |LicenseApache-2.0 This project is built on Mina protocol",
      "FIELD13": " so used all Mina protocol technologies",
      "FIELD14": " tools such as SnarkyJS. Our product TornadoMina is ZK app product so it suits Mina and the Mina development tools made us to implement easier. Our project starts from debugging tutorials🤣 Document was good",
      "FIELD15": " but Mina itself is still early stage on the roadmap",
      "FIELD16": " so the implementation example spread and it made us a little harder.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 73,
    hackathon: "ETHGlobal Tokyo",
    title: "Smart SAFT",
    more: "https://ethglobal.com/showcase/smart-saft-fehev",
    demo: "https://www.loom.com/share/c143a478811b4dc4a3eb61308cf8892a",
    repo: "https://github.com/petersim1/ETHGlobal_Tokyo_2023",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "On-chain process for legal documents and verifiable money movement.",
    description: "Our project explores the possibilities of moving certain legal documentation on-chain. We looked into SAFT",
      "FIELD11": " NDA",
      "FIELD12": " and SAFE agreements. Currently",
      "FIELD13": " these off-chain forms of documentation are used to dictate on-chain activity",
      "FIELD14": " which is obviously not enforceable on-chain. We believe that bridging this gap between web2 and web3",
      "FIELD15": " specifically in the scope of SAFT agreements",
      "FIELD16": " where we have personally seen multi-million dollar checks pulled illegally by VC's",
      "FIELD17": " serves a valuable purpose. Enabling a seamless UX",
      "FIELD18": " from on-ramping of crypto directly on our site",
      "FIELD19": " to gasless meta transactions and an easy to use UX",
      "FIELD20": " is something we hoped to achieve. We develop a dynamic ERC-1155 NFT token standard for representing \"signed\" states of users for a common legal document. For SAFT agreements in particular",
      "FIELD21": " there is an important money movement piece involved",
      "FIELD22": " so we integrate with SuperFluid to enable streaming of assets after a certain period. Coupled with our thorough smart contract development",
      "FIELD23": " we put together a slick full stack NextJS application",
      "FIELD24": " building off the metamask SDK",
      "FIELD25": " SAFE's on-ramping",
      "FIELD26": " and deployed to several L2's and test networks. For the UI",
      "FIELD27": " we used NextJS to take advantage of both client and server side rendering",
      "FIELD28": " and dynamic file system routing. We built our web3 authentication using metamask's SDK",
      "FIELD29": " and incorporated SAFE's on-ramp kit for allowing users to on-ramp USDC",
      "FIELD30": " if they don't already have. Even further",
      "FIELD31": " we incorporate Uniswap v3 protocols to allow users to natively supply a token other than USDC",
      "FIELD32": " and we'll execute a swap transaction to USDC (a more easily understood asset",
      "FIELD33": " generally should not be volatile compared to other assets). Our smart contracts are built off ERC 1155 standards",
      "FIELD34": " where we develop dynamic NFT's referencing the multi-owner contracts and their corresponding signing statuses for a given SAFT/NDA contract. This allows us to pair with the frontend to display to users which states their SAFT/NDA contracts are in",
      "FIELD35": " and which actions they are able to take. We built on SuperFluid's vesting scheduler to enable the money-movement component of our contract",
      "FIELD36": " where we essentially hold USDC in escrow until an agreed upon date (token unlock)",
      "FIELD37": " then stream the tokenized equity directly to a user at a given flow rate. We built in Biconomy's meta transactions to sponsor gas for users",
      "FIELD38": " which can sometimes be a large deterrent for users. The tokenID is enforceable on-chain",
      "FIELD39": " by using a hashed version of important metadata surrounding a contract (such as user's name",
      "FIELD40": " company name",
      "FIELD41": " document title",
      "FIELD42": " etc...)",
      "FIELD43": " which is stored off-chain for safety.",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 74,
    hackathon: "ETHGlobal Tokyo",
    title: "Github verified Lens",
    more: "https://ethglobal.com/showcase/github-verified-lens-fytrg",
    demo: "",
    repo: "https://github.com/sriharshakaramchati/github-lens",
    video: "",
    winner: "🔟 Lens — Top 10 🏊‍♂️ Polygon — Pool Prize 1️⃣ Metamask — Best SDK Usage ",
    short: "Verifying github contribution for pseudonymous Lens profiles",
    description: "You enter your email ID",
      "FIELD11": " and the GitHub repo link which you claim to have access. It asks you to sign from your Metamask",
      "FIELD12": " and autofills the lens id field without an option to edit. Once you add your claim",
      "FIELD13": " it shares a QR code",
      "FIELD14": " scanning which",
      "FIELD15": " it will direct you to the reclaim wallet app",
      "FIELD16": " where the ZK based verification is run on your local without revealing the user credentials. Once the verification is completed and you submit the claim. The GitHub lens verifier approves the claim and gives you the tick mark. If you don’t have access to a GitHub profile",
      "FIELD17": " and yet you submit your claim it generates a failed response which can't be submitted. We have primarily used the Metamask SDK",
      "FIELD18": " the Lens protocol and the Reclaim SDK.The metamask SDK makes it easier for us to connect to the blockchain through the browser extension. There is no need to share the private key. The SDK exposes a provider that can request transactions to be signed on the wallet.Reclaim SDK is based on the Reclaim protocol that allows a person to export any data from any website on the internet and generate a zk-proof out of it. It is completely trustless and privacy preserving. Such a protocol puts the user in complete control of their data. They are reclaiming their data from websites' databases. This data is rightfully theirs and should have sovereignty over how and where this data is used.This effectively means",
      "FIELD19": " every single website is now converted into an API. Being dependent on TLS 1.3",
      "FIELD20": " Reclaim protocol would always work",
      "FIELD21": " unless the website decides to change their underlying network structure model.Lastly",
      "FIELD22": " once Metamask is connected",
      "FIELD23": " the Lens Client SDK is used to fetch the Lens ID owned by the address. Once we have that",
      "FIELD24": " we allow the user to uniquely generate a claim that they have contributed to a particular github repository. The Reclaim Wallet opens up where the user can claim and submit the proof on-chain.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 75,
    hackathon: "ETHGlobal Tokyo",
    title: "Chatshire",
    more: "https://ethglobal.com/showcase/chatshire-4iama",
    demo: "https://chatshire.click",
    repo: "https://github.com/chatshire-project/chatshire",
    video: "",
    winner: "",
    short: "Introducing Blockchain Data Search Wizard: Cast Your Spell and Unveil The Magic 🧙",
    description: "Chatshire is a user-friendly",
      "FIELD11": " intuitive platform designed to simplify blockchain data exploration using your natural language without needing to learn SQL grammar. By leveraging the power of LLM like OpenAI’s GPT",
      "FIELD12": " we generate tailored SQL queries for on-chain data providers effortlessly. With multi-source API integration (currently supports Flipside Crypto) and post-processing techniques",
      "FIELD13": " Chatshire provides a comprehensive and diverse presentation of search results",
      "FIELD14": " making it easy for users to compare and analyze data. OpenAI's GPT API: Our large language model (LLM) used for generating SQL queries and post-processing search results.Push Protocol: A protocol for automating batch on-chain data queries",
      "FIELD15": " scheduling",
      "FIELD16": " and execution.Data-source API Integration: Integration with various API services like Dune and Flipside",
      "FIELD17": " The Graph (but not limited to) for seamless data retrieval and comparison. Now currently support Flipside Crypto as the first basis.Web Technologies: The modern web frontend/backend technologies like React",
      "FIELD18": " Redux",
      "FIELD19": " Next.js.",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 76,
    hackathon: "ETHGlobal Tokyo",
    title: "Salt Wallet",
    more: "https://ethglobal.com/showcase/salt-wallet-415ar",
    demo: "https://docs.google.com/presentation/d/1GQAyTgvMPlW2HZn_sCSTdt8VMLjjU-fAa-81RhzWZXQ/edit?usp=sharing",
    repo: "https://github.com/wasabinori/re-ethTokyo",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Pair Contract wallet",
    description: " public one and private one. Only public one can send NFTs to private one.",
      "FIELD11": "We avoid scam NFTs. Evil people can send it to someone permissionless.We think it is a problem.We make pair contract wallet using erc4337.There is public and private one.Everyone can send spam NFT to public one.But Nobody can send it to private one. (It haven't developed)You can arrange NFTs between them.So you can flex and show your favorite NFTs clearly. ERC4337StackUphardhatopenzepelineth infinitism account abstractionWe used them.Especially we used eth infinitism account abstraction and read stackup docs.And alchemy's article is also good.First we learn about 4337. And we use eth inifinitism's repository.We also use stackup bundler.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 77,
    hackathon: "ETHGlobal Tokyo",
    title: "Clamp",
    more: "https://ethglobal.com/showcase/clamp-s04dr",
    demo: "",
    repo: "https://github.com/0xabh/clamp-ethtokyo2023",
    video: "",
    winner: "📜 Scroll — Just Deploy 💡 Bunzz — Best Innovation 🏊‍♂️ Polygon — Pool Prize ",
    short: "Digital asset index for crypto newbies in less than thirty seconds",
    description: "The project enables users with low crypto literacy to invest in digital asset indexes and build a diversified portfolio. More than 90 percent of those interested in crypto never start investing in crypto because they find it time consuming",
      "FIELD11": " difficult to understand and end up adopting a trial and error approach to crypto investing.There’s a clear preference for passive investment in equities. For some context",
      "FIELD12": " the passive investment market in equities is 3x the active investment market. Crypto exchanges solve for active investment use cases but the passive investment market is unserved. We believe digital asset indexes can be a simple and easy entry point to bring the next wave of crypto investors.It extends the concept of smart contracts as a wallet to create dedicated contract accounts linked to the user’s public key/external owned accounts for buying and selling these indexes. These digital asset indexes enable users to own actual ownership of the underlying erc20 tokens in the index versus issuing an index token or a derivative/synthetic token.Users can pick",
      "FIELD13": " edit",
      "FIELD14": " customize allocations of any digital asset index. We believe this is the biggest differentiating factor as it truly fulfills the core crypto principles of open finance",
      "FIELD15": " decentralization and censorship resistance.It uses Uniswap v3 to route the swap transactions through multicall. We use batch transactions to save gas for our users. Users can swap these indexes back for erc20 or withdraw these underlying tokens back to their external owned accounts with the withdraw function. This project uses Uniswap v2/v3 as required depending on the underlying network for completing the swaps between erc20 and indexes. Our main contract swaptoken.sol uses Uniswap v2/v3 and extends the functionality of clone factory pattern to create contract accounts for users which helps manage their digital asset indexes.We explored the use of 1inch",
      "FIELD16": " KyberSwap and other DEX aggregators but the best price for our users was available at Uniswap v3. Hence",
      "FIELD17": " we decided to write the smart contracts for integrating v3 directly into our platform.We are deployed on Taiko",
      "FIELD18": " Scroll and Polygon POS. We believe that users on Taiko and Scroll will benefit largely from our deployment as it will give users the ability to build a diversified crypto portfolio in minutes.As the user base on Taiko grows",
      "FIELD19": " we will be able to serve a large count directly with a mode wide variety of tokens.We uploaded our contracts to the Bunzz smart contract hub and also used modules which were open source and previously available on the hub. This made it easy for us to deploy on multiple evm compatible networks.",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 78,
    hackathon: "ETHGlobal Tokyo",
    title: "Asset proof experiment",
    more: "https://ethglobal.com/showcase/asset-proof-experiment-b021o",
    demo: "",
    repo: "https://github.com/eldenpark/asset-proof",
    video: "",
    winner: "",
    short: "Trusted-setup-free",
    description: " serializable",
      "FIELD11": " poseidon hash",
      "FIELD12": " foreign field zkp arithmetization experiment",
      "FIELD13": "A simple experiment of asset ownership proof. Uses two different fields in the same circuit. Uses Plonk-ish arithmetization to make universal parameters used for different circuits. Requires no trusted setup.Asset proof is to declare you have e.g. \"X\" amount of asset in your wallet without revealing which address that is. This experiment seeks to combine recent works from a few different projects to see if a proof could be created in zero-knowledge. Referenced projects include Halo2",
      "FIELD14": " Halo2wrong",
      "FIELD15": " zkevm-circuits.There currently are two different versions of Halo2 in the scene: the one that is originally written by Zcash foundation and the other which was forked by Ethereum foundation. One of the significant differences between the two is the curves and commitment schemes they support.EF's project promotes BN254 curve and KZG commitment scheme to be used as well as the Pasta curves and Inner Product Argument supported by the original version. KZG commitment scheme involves toxic waste and BN254 curve is said to have a rather questionable security guarantee. However",
      "FIELD16": " we found that an earlier work by EF in dealing with a foreign (wrong) field arithmetic interesting and wanted to test how fast and realistic this can be applied to real-world settings.We learned that wrong field arithmetization",
      "FIELD17": " Pasta curves",
      "FIELD18": " Poseidon hash function and IOP can all come together to create an asset proof of a tree depth 32. Creating a proof takes over 60 seconds in the consumer-grade machine (outside of web browser) and a size of the proving key exceeds 6GB.Although it is remarkable that the proof could be made in such a condition where the number of constraints was over 600",
      "FIELD19": "000",
      "FIELD20": " we found that it is still a few steps away from being used as in a consumer's device. The major culprit seems to be the use of foreign fields. It seems that we either have to use only a single field in a circuit or come up with a more performant way of dealing with multiple fields.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 79,
    hackathon: "ETHGlobal Tokyo",
    title: "Private Guardian",
    more: "https://ethglobal.com/showcase/private-guardian-536ma",
    demo: "https://fun-eth-global-tokyo2023.vercel.app/",
    repo: "https://github.com/accountjs/eth-global-tokyo2023",
    video: "",
    winner: "",
    short: "A account abstraction wallet with privacy-preserving social recovery",
    description: "Account Abstraction Wallet that utilizes the combination of zero-knowledge proof and account abstraction to enhance user privacy while offering social recovery functionality. This innovative project offers a secure and decentralized solution for users to recover their lost account or so call private keys",
      "FIELD11": " or access to their accounts. The use of zero-knowledge proofs ensures that user data and transaction details remain confidential",
      "FIELD12": " while account abstraction allows users to interact with the network without ever worry about losing their account. This project utilized the accountjs.xyz open-source library to implement the wallet interaction and recovery functionality. This library offers a set of APIs and tools for developers to integrate with different blockchain networks",
      "FIELD13": " making it easy to create and manage blockchain-based applications.To design the frontend of the application",
      "FIELD14": " the project utilized two popular frontend design frameworks: Material-UI (also known as MUI) and Tailwind CSS. Material-UI provides a comprehensive set of React components that follow Google's Material Design guidelines",
      "FIELD15": " while Tailwind CSS offers a utility-first CSS framework that allows for fast and flexible styling.For the recovery relayer",
      "FIELD16": " the project made use of Next.js",
      "FIELD17": " a popular React-based framework for building server-side rendered (SSR) web applications. Next.js provides a range of features and benefits",
      "FIELD18": " including automatic code splitting",
      "FIELD19": " optimized performance",
      "FIELD20": " and server-side rendering",
      "FIELD21": " making it an ideal choice for building the recovery relayer.For the bundler and account abstraction",
      "FIELD22": " we get extensively huge helps from eth-infinitism project",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 80,
    hackathon: "ETHGlobal Tokyo",
    title: "Prompt NFT Tree",
    more: "https://ethglobal.com/showcase/prompt-nft-tree-9fbj5",
    demo: "https://eth-global-tokyo-2023-git-main-teritamas.vercel.app",
    repo: "https://github.com/teritamas/eth-global-tokyo-2023",
    video: "",
    winner: "👷 Taiko — 🥇 Best Dapp ",
    short: "Prompt NFT Tree is a service that makes the prompt to be grown with everyone. Making NFT from AI prompts. Rewards are paid to developers each time the prompt is reused. Tracing the prompt's purchase history with blockchain technology makes us to watch the prompt's growth.",
    description: "This application was created with the goal of motivating prompt engineers.Recently",
      "FIELD11": " generative AI has been making headlines",
      "FIELD12": " and at the same time",
      "FIELD13": " the number of \"prompt engineers\" who are able to generate good images with that generative AI has increased.While prompts are hard to create",
      "FIELD14": " they are easy to imitate. And while it is certain that better imitations can be created",
      "FIELD15": " it is intolerable to have a prompt that one has spent a long time creating be copied for free.We have created this \"Prompt NFT Tree\" in the hope that by using blockchain technology",
      "FIELD16": " we can solve the above problems and develop prompt engineering.The prompt NFT tree is a service that grows prompts together",
      "FIELD17": " and NFTs are created from AI prompts. Each time a prompt is reused",
      "FIELD18": " the developer is rewarded. The prompt's purchase history can be traced through blockchain technology to watch the prompt grow.In addition",
      "FIELD19": " the NFT is created with LIT encryption technology",
      "FIELD20": " which allows the prompt to be held more securely",
      "FIELD21": " so the prompt is not stored on-chain. This project uses Metamask. The network uses TAIKO",
      "FIELD22": " which is fast and inexpensive to create contracts. The front end uses svelte and the back end uses firebase. When storing the prompts in NFT",
      "FIELD23": " we encrypt them using the LIT protocol. This has allowed us to keep the prompts more securely. In addition",
      "FIELD24": " we use generativeAI to generate the images.The use of TAIKO lowers the cost of gas for the NFT and lowers the barrier to participation for the general public. We were also able to easily port the Solidity code during development.With LitProtocol",
      "FIELD25": " we can easily implement encryption with access control.Prompts encrypted with LIT Protocol are written to TAIKO's NFT.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 81,
    hackathon: "ETHGlobal Tokyo",
    title: "ENS Expiry Notice from MetaMask",
    more: "https://ethglobal.com/showcase/ens-expiry-notice-from-metamask-40mej",
    demo: "",
    repo: "https://github.com/gskril/ens-expiry-notice",
    video: "",
    winner: "🏊 The Graph — Pool Prize 2️⃣ Metamask — Best Snap ",
    short: "MetaMask Snap that reminds users of soon-to-expire ENS names in their wallet.",
    description: "This project will notify users when ENS names they own are about to expire",
      "FIELD11": " directly in MetaMask (and even natively with Chrome notifications when MetaMask is locked). These notifications are sent every week",
      "FIELD12": " at the start of the week",
      "FIELD13": " starting 45 days prior to the ENS name expiring. The ENS data is fetched from The Graph. This project was kickstarted from the MetaMask Snap template repo (https://github.com/MetaMask/template-snap-monorepo). That includes Flask",
      "FIELD14": " the Snaps CLI",
      "FIELD15": " and a Gatsby frontend. I heavily modified the frontend using ENS' Thorin component library (https://thorin.ens.domains/) and used all new permissions in the Snap.Initially",
      "FIELD16": " I was retrieving ENS expiration data from a standard API one by one",
      "FIELD17": " then realized I could use The Graph to make batch requests which allowed me to keep the code nice and clean (for a hackathon at least 😅). ENS has a subgraph deployed to Goerli which I'm using in the repo",
      "FIELD18": " but it's mapped perfectly with mainnet so switching it out once Snaps are in production will be trivial.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 82,
    hackathon: "ETHGlobal Tokyo",
    title: "DocHuds",
    more: "https://ethglobal.com/showcase/dochuds-8hj1i",
    demo: "",
    repo: "https://github.com/adiig7/ETHTokyo-Hack",
    video: "",
    winner: "",
    short: "Marketplace for all your goods",
    description: " sell anything you want at any cost you like",
      "FIELD11": "BloXchange is a P2P marketplace that lets users buy and sell their used products on top of the blockchain.Users can pay in MATIC for the products they buy and uses the Escrow Contract for the payment.Which features does bloXchange offer?Buy any old product from the marketplaceSell your used productsFile a dispute if there is something wrong with the product .We Aditya",
      "FIELD12": " and Dhrumi met online on Twitter and thought of participating in a hackathon together and found this Hackathon could be the best to team up and work.We brainstormed on what we could build and came up with the idea of making a P2P marketplace to buy and sell goods. We thought about the project's name and came up with the name bloXchange.We made a GitHub repository",
      "FIELD13": " a notion doc for building the flow of our Dapp and a WhatsApp group for communications.Dhrumi",
      "FIELD14": " after doing a course in ReactJS directly participated in this hack and it has been a great learning curve for her to create medium level projects. Pawan got more efficient in writing the subgraphs and Aditya learned how to integrate subgraphs and became more confident in integrating the smart contract with the frontend.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 83,
    hackathon: "ETHGlobal Tokyo",
    title: "DogAdminO(link)",
    more: "https://ethglobal.com/showcase/dogadmino-link-casj5",
    demo: "",
    repo: "https://github.com/takagi-sh/tokyo_eth",
    video: "",
    winner: "",
    short: "Dog Sharing is a solution for individuals who desire to have a pet but cannot commit to the responsibilities of ownership. Through sharing pets",
    description: " people can easily try having a pet",
      "FIELD11": " and those who already own pets can act as contributors. ",
      "FIELD12": "Dog SharingProblem to be solved: I would like to have a dog",
      "FIELD13": " but having a dog is a burden and I have to think a lot when I go on trips and so on.-> By sharing pets",
      "FIELD14": " people can easily try having a pet.(By keeping a pet",
      "FIELD15": " you are treated as a \"contributor\")There are individuals who desire to own a pet",
      "FIELD16": " but they are uncertain about how to handle their pet while they are away on vacation.Try taking care of a pet for a week to understand what it's like to have a pet. If they enjoy the experience",
      "FIELD17": " then they can consider getting their own pet.User Time LineIndividuals owning pets and their neighbors can get together and form a DAO block.From people who have a little desire to have a pet in the future to people who have originally (or currently) had a petPurchase of NFTPurchase from the organization group. Subscription type",
      "FIELD18": " up to one per household. Secondary distribution is possible (you don't have to have a dog)",
      "FIELD19": "Granting of privileges to specific NFTs with high contribution levels.DAO participation (NFT /governor token required)Co-BreedingWhat NFT holders can do with their dogsTemporarily keep",
      "FIELD20": " return",
      "FIELD21": " and care for the dog. (Borrow",
      "FIELD22": " return",
      "FIELD23": " and inspect correspondence)The owner of the dog can negotiate with other users on Discord to let them keep the dog.The person who borrows the dog then controls it.When the dog is handed over to the borrower and returned to the owner",
      "FIELD24": " a photo of the dog is taken.The person who takes care of the dog walks with the dog at that time.The person who takes care of the dog is responsible for the dog's health.By taking care of the dog",
      "FIELD25": " the person receives FT. This can be used to let other DAO members take care of their own dog and is evaluated as a contribution in the DAO.Voting SystemVoting SituationsFor example",
      "FIELD26": "Whether or not to take in a dog to be euthanized to the DAO.About the funeral of a dog that has passed away",
      "FIELD27": " e.g.",
      "FIELD28": " who to invite as participantsTaking in a dog whose owner can no longer keep it due to moving",
      "FIELD29": " etc.Deciding who is the member of management teamVoting system:Implemented in the way that the same person cannot vote twice.Voting period can be set and changed by the management teamsCan be changed freely as to how many people need to approve a proposal in order for it to pass.Minimum amount of tokens required to have the right to vote is also configurableWhat was not possibleInteraction on the dog side (changing the dog owner",
      "FIELD30": " possible with Admin control)Rival product: pet hotelsPet hotels are not that caring to handle large numbers of pets efficientlyTheir services strengthen local community ties.Probably much lower price and easier. Safe enough management system.ReferenceHow to build a sharing service:NEAR BikeShare - UNCHAINCreating a DAO (UNCHAIN)https://app.unchain.tech/learn/ETH-DAO/ To build the project",
      "FIELD31": " we used Typescript and Threeweb to effectively write the Solidity code. We also used Rust",
      "FIELD32": "WASM",
      "FIELD33": "NEAR for deployment.  We also looked up for the example codes on UNCHAIN",
      "FIELD34": " mainly NEAR-BikeShare and DAO. (Reference: https://app.unchain.tech/learn/NEAR-BikeShare/",
      "FIELD35": " https://app.unchain.tech/learn/ETH-DAO/.)",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 84,
    hackathon: "ETHGlobal Tokyo",
    title: "GaaS",
    more: "https://ethglobal.com/showcase/gaas-exadm",
    demo: "https://gaas-pink.vercel.app/",
    repo: "https://github.com/tracychen/GaaS",
    video: "",
    winner: "📜 Scroll — Just Deploy 🥇 ApeCoin — Best Contribution 🔟 Push — Top 10 🏊‍♂️ Polygon — Pool Prize ",
    short: "Gate any app with arbitrary on-chain activity! Coming soon: JavaScript SDK and Rest API.",
    description: "Token-gating is sooo 2022.Token-gating only captures holders and alienates the rest of the market. Stakers",
      "FIELD11": " sellers",
      "FIELD12": " buyers",
      "FIELD13": " swappers",
      "FIELD14": " flippers",
      "FIELD15": " and more -- sometimes you want to query for users who are the most ACTIVE on-chain",
      "FIELD16": " rather than the biggest WHALES.The pain points:\"We want to send digital rewards our top community members",
      "FIELD17": " as defined as people who trade",
      "FIELD18": " claim",
      "FIELD19": " and sell every 28 days. Right now this is all done through a giant spreadsheet with manual calculation",
      "FIELD20": " lots of spam and bad data.”DAO governance lead",
      "FIELD21": " Major exchange“We want to validate certain on-chain actions performed by community members for our marketing campaigns (e.g. made a deposit",
      "FIELD22": " made a withdrawal",
      "FIELD23": " etc.). This is done by hand right now and it takes up a lot of time and human error.”Head of Community",
      "FIELD24": " Trading Platform\"We don’t just care about our holders. Half of our community includes stakers and we don’t want to exclude them from participating in our community activities.\"Head of Developer Relations",
      "FIELD25": " Payments network platform💀 STOP SLAVING OVER SPREADSHEETS",
      "FIELD26": " QUERIES",
      "FIELD27": " AND ENDLESS MANUAL VERIFICATIONS OF ON-CHAIN TRANSACTIONSIntroducing GaaS (Gating-as-a-service). With GaaS",
      "FIELD28": " you can gate any app with arbitrary on-chain activity.Create a gate that makes your application or content exclusive to power users. For example",
      "FIELD29": " traders on Aave who frequently trade on the DeFi platform.Create a gate that makes your application or content exclusive to stakers. For example",
      "FIELD30": " users who have staked their ApeCoin ($APE) for a minimum duration of 1 month.Users are then required to meet these on-chain requirements before they can access your website. Our hackathon demo project showcases how GaaS can be used to gate some sample content using arbitrary on-chain events and transactions.Polygon",
      "FIELD31": " Scroll:We used Polygon and Scroll to store gating configuration data on-chain in a trustless and low-gas manner so that anyone can audit the access gating requirements and build on top of them.Polygon Mumbai contract deployment: https://mumbai.polygonscan.com/address/0xCd4F914Ef4FF4DFb445BA046ecEC00FA266E5F51Scroll Alpha contract deployment:https://blockscout.scroll.io/address/0xCd4F914Ef4FF4DFb445BA046ecEC00FA266E5F51ApeCoin:We showcase examples of unique and useful access gating based on Staking activity on ApeCoin as well as other arbitrary contract events such as Deposits",
      "FIELD32": " Transfers",
      "FIELD33": " and more.",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 85,
    hackathon: "ETHGlobal Tokyo",
    title: "MENTAL POKER",
    more: "https://ethglobal.com/showcase/mental-poker-p6n6e",
    demo: "https://docs.google.com/presentation/d/1T322pC_sr5VcAUyc2EWab30N1wkFb3G5MLglbfXL0pI/edit#slide=id.g22c6236c310_0_0",
    repo: "https://github.com/SYORA17/MENTALPOKER-Proto",
    video: "",
    winner: "📜 Scroll — Just Deploy 🔟 Push — Top 10 ",
    short: "An On-chain poker game that you can connect your wallet",
    description: " bet any tokens you like(So ApeCoin is available!)",
      "FIELD11": " set NFT as an profile and send chat messages straightly to the wallet.",
      "FIELD12": "You can connect your wallet on Taiko",
      "FIELD13": " Gnosis Chain",
      "FIELD14": " Scroll",
      "FIELD15": " Polygon and Eth Mainnet. And you can buy-in/cash-out any ERC-20 tokens you like. We're using the Airstack API  to get users' NFT images and token balances",
      "FIELD16": " and Push protocol to send the in-game messages by wallet-to-wallet. To build the project",
      "FIELD17": " you need to separately build the client side and the server side. Additionally",
      "FIELD18": " a database needs to be constructed",
      "FIELD19": " with SQL located in the database directory. The use of redis-server is also necessary. Furthermore",
      "FIELD20": " you need to appropriately set up API keys and passwords.The technologies used are written in TypeScript and Vue.js",
      "FIELD21": " with a basic poker game as the foundation and incorporating many Web3 elements. It starts with a basic wallet connection using MetaMask",
      "FIELD22": " game start notifications through the push protocol",
      "FIELD23": " and setting profile images by obtaining NFTs using Airstack.Poker should definitely move away from centralization",
      "FIELD24": " making it well-suited for construction on Web3. Moreover",
      "FIELD25": " it was easy to support multi-chain",
      "FIELD26": " and there was synergy with various projects",
      "FIELD27": " including PU protocol and Airstack.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 86,
    hackathon: "ETHGlobal Tokyo",
    title: "Ethers Studio",
    more: "https://ethglobal.com/showcase/ethers-studio-s38qo",
    demo: "",
    repo: "https://github.com/ricmoo/ethers-studio",
    video: "",
    winner: "",
    short: "Compile your Solidity into TypeScript and your TypeScript into JavaScript in tandem",
    description: " in a single watch-mode console output.",
      "FIELD11": "A simple CLI tool for managing TypeScript and Solidity in tandem",
      "FIELD12": " in watch-mode.As the Solidity contract code is updated and saved to disk it is automatically re-compiled and new Contract type definitions are saved",
      "FIELD13": " which then trigger the TypeScript compiler.Any Solidity errors or warnings are also included in the TypeScript compiler console",
      "FIELD14": " making it easy to make sure the entire project is in shape. The project is quite simple",
      "FIELD15": " and includes a few low-level APIs with a high-level watch-mode CLI on top of it.The low-level API for Solidity compilation simplifies interacting with contract source (there is still plenty of work to do here though) and another API provides TypeScript interface generation for the derived ABI and bytecode",
      "FIELD16": " using the ethers v6 Typed Contract API.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 87,
    hackathon: "ETHGlobal Tokyo",
    title: "Swape",
    more: "https://ethglobal.com/showcase/swape-zyfoh",
    demo: "",
    repo: "https://github.com/poocart/swape-interface",
    video: "",
    winner: "",
    short: "Uniswap fork that connects Smart Wallet to allow swaps using ApeCoin as gas token",
    description: "Uniswap fork that connects Smart Wallet to allow swaps using ApeCoin as gas token. Wanna ape into new token",
      "FIELD11": " but no ETH? You're covered as long as your wallet has enough ApeCoin to cover transaction fees.Keep your ETH staked",
      "FIELD12": " use ApeCoin for ape finances.Apes together strong. Reused Uniswap front-end interface to have quick interface for MVP and used Etherspot SDK Smart Wallet relayers to have payments done in ApeCoin instead of ETH.Since Etherspot relayers can have payments in ERC20 this unlocks huge possibilities such as having tokens used for paying for transactions.",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 88,
    hackathon: "ETHGlobal Tokyo",
    title: "edzy",
    more: "https://ethglobal.com/showcase/edzy-cv0pg",
    demo: "https://www.youtube.com/channel/UCHL7Iz9Sb4hNGwdBXJDDrpA",
    repo: "https://github.com/hamzah2304/edzy",
    video: "",
    winner: "🥇 Huddle01 — Best Use 🏊‍♂️ Polygon — Pool Prize ",
    short: "edzy: on-chain ZK powered tutoring platform eliminating the need for third-party services. Ensures personalisation. transparency and holistic academic identity ",
    description: "edzy is an on-chain tutoring platform that leverages the power of zk proofs to provide enhanced privacy and security for both tutors and students. With zk proofs",
      "FIELD11": " tutors can validate their credentials and ensure they're matched with students who have the right level of knowledge",
      "FIELD12": " eliminating the need for trust or middlemen.Tutors will benefit from fast",
      "FIELD13": " direct payments and the freedom to set their own pricing and scheduling. With worldwide access",
      "FIELD14": " they'll have the opportunity to work with students from all over the globe",
      "FIELD15": " expanding their reach and making the most of their skills.Students",
      "FIELD16": " in turn",
      "FIELD17": " can personalize their learning experience based on their zk badge",
      "FIELD18": " which will allow them to see courses that are tailored specifically to their interests and abilities. By completing external courses on platforms like 'Zkhan Academy'",
      "FIELD19": " they can include them in their on-chain identity",
      "FIELD20": " creating a complete profile of their academic achievements. They'll also have the chance to earn NFTs as proof of their competency",
      "FIELD21": " showcasing their skills and knowledge to potential employers or collaborators. To facilitate on-chain video calls and streaming",
      "FIELD22": " we are relying on the Huddle01 and Livepeer protocol APIs",
      "FIELD23": " which allow for real-time communication and high-quality streaming capabilities.One of the key features of our platform is token gating",
      "FIELD24": " which is based on NFT minting and ZK Badge identities provided by Sismo. This approach ensures that only authorized users have access to certain features and functions within the platform",
      "FIELD25": " providing an additional layer of security",
      "FIELD26": " privacy and personalisation.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 89,
    hackathon: "ETHGlobal Tokyo",
    title: "Karma Perks",
    more: "https://ethglobal.com/showcase/karma-perks-rm7xq",
    demo: "https://karmaperks.xyz",
    repo: "https://github.com/mansijoshi17/karmaperks",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "At Karma Perks",
    description: " we help community members gain on-chain recognition and rewards for their every contribution by providing a platform to crowdsource help and distribute rewards in the form of NFTs and crypto tokens.",
      "FIELD11": "Problem:Should community rewards reach genuine contributors and not bots (Eg. Arbitrum airdrop)? Do you agree?Are open source code contributors",
      "FIELD12": " product testers",
      "FIELD13": " community ambassadors",
      "FIELD14": " event volunteers",
      "FIELD15": " or product reviewers getting rewarded for their time and effort?No? Is it because they've only made genuine \"off-chain contributions",
      "FIELD16": "\" such as contributing to open source code or volunteering at an event",
      "FIELD17": " and haven't engaged in multiple dummy/valid transactions just to receive an airdrop?Most of them only receive a \"thank you\" and occasionally a shoutout on social media.The current method of rewarding the community through airdrops",
      "FIELD18": " based on random on-chain transactions",
      "FIELD19": " is exploited by bots and bad actors with multiple wallets",
      "FIELD20": " which goes against the intention of rewarding genuine contributors to the network.At KarmaPerks",
      "FIELD21": " we're committed to ensuring that off-chain contributions receive on-chain visibility",
      "FIELD22": " so that contributors can be rewarded for their Karma/Contributions and increase their on-chain reputation.How?By providing a platform for anyone to crowdsource the help they need for tech or non-tech tasks",
      "FIELD23": " and enabling contributors to gain real rewards in the form of KarmaPerk NFTs",
      "FIELD24": " Crypto token-based rewards",
      "FIELD25": " or task-based payment as a vote of thanks by the campaign creator who got their help. We have built Trustified by using 1) Celo 2) Genosis Chain 3) Polygon ZKevm  4) Chain all these->World Coin  is used to ensure proof of personhood.Push Protocol: To enable subscribers get notifications about campaigns created under a specific list of categories.Gasless transactions using Biconomy",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 90,
    hackathon: "ETHGlobal Tokyo",
    title: "EtherEye",
    more: "https://ethglobal.com/showcase/ethereye-9s1jg",
    demo: "",
    repo: "https://github.com/ShuntaroOkuma/ethereye",
    video: "",
    winner: "",
    short: "EtherEye is API designed to enrich the user experience of Etherscan by providing a more feature-rich. With EtherEye",
    description: " users can easily track their transactions",
      "FIELD11": " optimize gas fees",
      "FIELD12": " and manage their asset portfolios.",
      "FIELD13": "FeaturesTransaction Tracker (Implemented)View recent transactions related to your wallet address (1-1): Keep track of recent transactions involving your wallet address.View detailed information about a specific transaction (1-2): Input a transaction ID to view detailed information such as sender",
      "FIELD14": " recipient",
      "FIELD15": " amount",
      "FIELD16": " gas fee",
      "FIELD17": " etc.View real-time transaction status (1-3): Monitor the real-time status of transactions (unconfirmed",
      "FIELD18": " confirmed",
      "FIELD19": " failed).Favorite specific wallet or token contract addresses for easy access (1-4): Easily access your favorite wallet addresses or token contract addresses.Filter transaction history based on specific timeframes or token types (1-5): Customize your transaction history view by filtering transactions based on timeframes or token types.Gas Fee Optimization Tool (To be implemented)View current gas fees in real-time (2-1): Stay updated on average",
      "FIELD20": " low",
      "FIELD21": " and high gas fees.Receive optimal gas price suggestions (2-2): Get gas price recommendations based on the urgency of your transaction.Know approximate transaction processing time (2-3): Estimate the processing time for your transaction based on the chosen gas price.View past gas fee fluctuations in a graph (2-4): Understand gas fee trends by analyzing historical data.See future gas fee predictions (2-5): Make informed transaction timing decisions based on future gas fee predictions.Asset Portfolio Manager (To be implemented)View current price and total value of tokens in a wallet (3-1): Input a wallet address with multiple tokens and view their current price and total value.View portfolio performance in a time-series graph (3-2): Monitor changes in the value of your portfolio over time.View trade history of a specific token (3-3): Compare the acquisition price and the current price of a specific token.View asset allocation in a pie chart (3-4): See the proportion of each token in your portfolio.Manage assets across multiple wallets (3-5): Add different wallet addresses and manage the asset situation in a unified manner. I developed an API service in Go that wraps around the Etherscan API. Since it relies on the Etherscan API",
      "FIELD22": " it will be dependent on the usage limits and fees of the Etherscan API.I have prepared test files for each function",
      "FIELD23": " so you can check its behavior without launching the API by using the features of VSCode.In addition",
      "FIELD24": " I have also prepared API documentation using Swagger UI",
      "FIELD25": " so you can confirm the specifications and behavior on a GUI.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 91,
    hackathon: "ETHGlobal Tokyo",
    title: "SocialSecuritySnap",
    more: "https://ethglobal.com/showcase/socialsecuritysnap-b5vyt",
    demo: "https://eth-tokyo-social-security-snap-site.vercel.app/",
    repo: "https://github.com/yusakapon/ETHTokyo-SocialSecuritySnap",
    video: "",
    winner: "📜 Scroll — Just Deploy 🔑 Worldcoin — Best Sign in with Worldcoin App  🔟 Lens — Top 10 🏊‍♂️ Polygon — Pool Prize ",
    short: "MetaMask Snap enhances security through: 1) Lens Protocol integration",
    description: " displaying contract interactions by followed users to flag potential spam 2) GPT-4 reviewing transaction methods",
      "FIELD11": " highlighting risks 3) Worldcoin KYC authentication. Prevent accidental spam contract approvals!",
      "FIELD12": "This project aims to enhance the Ethereum blockchain wallet",
      "FIELD13": " called MetaMask Snap",
      "FIELD14": " by developing extensions to improve security",
      "FIELD15": " user experience",
      "FIELD16": " and provide additional services. MetaMask is a browser extension that allows users to easily manage cryptocurrencies and digital assets",
      "FIELD17": " as well as perform transactions. The project's primary goals are as follows:Lens Protocol Integration for Security Enhancement:By integrating Lens Protocol",
      "FIELD18": " the system will display on MetaMask whether people you follow using the protocol have previously interacted with the smart contract.If no one you follow has ever executed the contract",
      "FIELD19": " this could indicate potential spam",
      "FIELD20": " helping users make informed decisions.GPT-4 Integration for Security Enhancement:Before executing a transaction",
      "FIELD21": " the method's purpose and risks will be reviewed using GPT-4",
      "FIELD22": " with explanations displayed within MetaMask.This feature aims to reduce the likelihood of users inadvertently approving malicious contracts or transactions.Worldcoin Authentication for KYC (Know Your Customer) information:Users will be unable to access services without proper identification and verification.This ensures that only verified individuals can participate",
      "FIELD23": " enhancing overall security.Superfluid Subscription Services:Superfluid enables subscription services with payments at a per-second granularity.This feature allows users to pay for subscription services in real-time",
      "FIELD24": " enhancing the overall experience.The main issue the project addresses is the lack of transparency and understanding of the transactions being executed on smart contracts. Users may not know or check the details of the transaction",
      "FIELD25": " leading to an increased risk of inadvertently approving spam contracts. The integration of Lens Protocol and GPT-4 aims to resolve this issue by improving security measures and providing essential information to users before executing a transaction. To build this project",
      "FIELD26": " we utilized a combination of technologies and frameworks",
      "FIELD27": " piecing them together to achieve the desired functionality and user experience. The primary components include MetaMask Snaps",
      "FIELD28": " Lens Protocol",
      "FIELD29": " GPT-4",
      "FIELD30": " Worldcoin",
      "FIELD31": " and Superfluid. Here's an overview of how each technology was integrated and their respective roles in the project:MetaMask Snaps:We used MetaMask Snaps to extend the functionality of MetaMask",
      "FIELD32": " allowing us to show additional information and security features before a transaction is executed. MetaMask SDK facilitated the creation of custom MetaMask plugins to achieve this.Lens Protocol:Lens Protocol is integrated into the project to provide an added layer of security. We used Lens Protocol API to fetch the profile and contract execution history of users being followed. This information is displayed in MetaMask",
      "FIELD33": " helping users identify potentially spammy or untrustworthy contracts.GPT-4:We used GPT-4 API to analyze and review the methods being executed in the transaction. GPT-4 provided a summary of the contract information",
      "FIELD34": " as well as a description of potential risks",
      "FIELD35": " which are displayed in MetaMask for user consideration.Worldcoin:Worldcoin's KYC (Know Your Customer) feature was integrated into the project to ensure that only verified users can access the service. Users who have not completed the KYC process are prompted to authenticate their identity during transaction confirmation.Superfluid:We integrated Superfluid to enable subscription services with per-second billing. This innovative feature allows for more flexible and precise subscription plans for users.To tie all these technologies together",
      "FIELD36": " we employed several tools and frameworks",
      "FIELD37": " including Truffle",
      "FIELD38": " Infura",
      "FIELD39": " and Linea:Truffle: Truffle framework was used for smart contract development",
      "FIELD40": " testing",
      "FIELD41": " and deployment.Infura: Infura was used as an Ethereum node provider",
      "FIELD42": " allowing us to connect our application to the Ethereum network.Linea: Linea",
      "FIELD43": " a sponsor technology",
      "FIELD44": " was employed for secure",
      "FIELD45": " performant",
      "FIELD46": " and seamless management of the project's smart contracts.Although we did not employ any particularly hacky solutions",
      "FIELD47": " our project demonstrates an innovative use of these technologies and frameworks to provide an enhanced user experience and improve security during transactions. By combining the capabilities of MetaMask Snaps",
      "FIELD48": " Lens Protocol",
      "FIELD49": " GPT-4",
      "FIELD50": " Worldcoin",
      "FIELD51": " and Superfluid",
      "FIELD52": " we aimed to tackle the issues of spam contracts and unintentional transaction approvals.",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 92,
    hackathon: "ETHGlobal Tokyo",
    title: "Documenteasy",
    more: "https://ethglobal.com/showcase/documenteasy-3bkbj",
    demo: "",
    repo: "https://github.com/vintageplayer/documenteasy",
    video: "",
    winner: "",
    short: "Incentivizing documentation creators by storing encrypted files on IPFS using FVM and rewarding them based on usage",
    description: "Incentivizing documentation creators by storing encrypted files on IPFS using FVM's lighthouse",
      "FIELD11": " restricting access to each page by those holding specific NFTs. Each NFT mint is free (using AA). The NFTs minted is used to count the number of new users using the project in a month.Each project can incentivize creation of docs by putting a pool of money distributed to creators based on the usage statistics.The payment can be streamed using Superfluid. The whole experience can be web2 like using the concept of paymasters and Account Abstraction.The docs can be deployed to a modified version of docusaurus. Lighthouse on top of FVM to manage file upload and access.Superfluid to stream payments.Zerodev's Polygon bundler/paymasters to stream payments and for NFT contracts.Ethers for front end code with react components.Ethereum Foundation's Bundler and Paymaster concepts are used to provide a better experience to the end user.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 93,
    hackathon: "ETHGlobal Tokyo",
    title: "WorldRadio",
    more: "https://ethglobal.com/showcase/worldradio-1i4ok",
    demo: "",
    repo: "https://github.com/Polonity/ethglobaltokyo2023",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "WorldRadio is an FM radio station where people from all over the world can equally broadcast their own voice.",
    description: "WorldRadio manages broadcasting rights through smart contracts. Therefore",
      "FIELD11": " anyone who meets the rules specified in the smart contract can acquire broadcasting rights. Additionally",
      "FIELD12": " users who acquire broadcasting rights can send encrypted audio data to their devices using end-to-end encryption (E2EE). WorldRadio manages broadcasting rights through smart contracts. Therefore",
      "FIELD13": " anyone who meets the rules specified in the smart contract can acquire broadcasting rights. Additionally",
      "FIELD14": " users who acquire broadcasting rights can send encrypted audio data to their devices using end-to-end encryption (E2EE).",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 94,
    hackathon: "ETHGlobal Tokyo",
    title: "Chain Review",
    more: "https://ethglobal.com/showcase/chain-review-f2800",
    demo: "https://www.youtube.com/watch?v=AGslW9r1KDk",
    repo: "https://github.com/timatoptifi/arxix-reviewer",
    video: "",
    winner: "",
    short: "Blockchain browser extension",
    description: " incentivizing",
      "FIELD11": " rating and tracking peer reviews on arXiv",
      "FIELD12": "This project is going to combine on chain data and browser-based frontend to allow users to deal with the pain points!With chrome extension",
      "FIELD13": " Web3 concept and the classic site that researchers upload their papers (Arxiv)",
      "FIELD14": " we can do things like comment",
      "FIELD15": " vote",
      "FIELD16": " raise incentive\treward",
      "FIELD17": " create on chain identity",
      "FIELD18": " build reputation among the Arxiv data! This project is a browser-based extension",
      "FIELD19": " we can generate some components and insert to the page so that users can connect to wallet",
      "FIELD20": " send transaction",
      "FIELD21": " leave a on chain comment or vote for good reviews in the community we built",
      "FIELD22": " all within the page they familiar with!For now we used vanilla Javascript to design the extension with Web3.js",
      "FIELD23": " Metamask",
      "FIELD24": " and due to the time and low network issue",
      "FIELD25": " we aren’t able to integrate the protocols we want like Lens protocol",
      "FIELD26": " Filecoin in time",
      "FIELD27": " so we did a workaround and tried to bring up the whole concept and roadmaps.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 95,
    hackathon: "ETHGlobal Tokyo",
    title: "RestRivals",
    more: "https://ethglobal.com/showcase/restrivals-w3fo6",
    demo: "https://rest-rivals.vercel.app/",
    repo: "https://github.com/adrianmcli/rest-rivals",
    video: "",
    winner: "",
    short: "Improve your sleep in our sleeping pods! Stake your tokens",
    description: " make sure to get good sleep",
      "FIELD11": " and earn. Powered by the wonderful Oura ring.",
      "FIELD12": "Introducing RestRivals: Gamify Your Sleep for Better Rest and RewardsRestRivals is an innovative project that combines the power of blockchain technology with sleep tracking to promote healthier sleep habits while offering users the chance to earn rewards. With RestRivals",
      "FIELD13": " users can enter SleepingPods where they stake tokens and compete to improve their sleep quality. The better you sleep",
      "FIELD14": " the more you can earn!To participate in RestRivals",
      "FIELD15": " users must own an Oura ring",
      "FIELD16": " a smart wearable device that tracks sleep patterns and generates daily sleep scores. The project comprises multiple SleepingPods",
      "FIELD17": " each with a predetermined start date",
      "FIELD18": " end date",
      "FIELD19": " and stake amount (a fixed number of tokens required to join). The duration between the start and end dates of each SleepingPod forms a round.At the end of each round",
      "FIELD20": " RestRivals calculates the average sleep score of all participants in the SleepingPod. The participant with the lowest sleep score loses their stake",
      "FIELD21": " which is then distributed among the remaining participants as a reward for their improved sleep quality.By gamifying the sleep experience",
      "FIELD22": " RestRivals encourages users to focus on their sleep hygiene and develop better habits",
      "FIELD23": " ultimately leading to a healthier lifestyle. Join RestRivals today and turn your quest for better sleep into a rewarding and competitive adventure! Contracts are made with Foundry. Basically from scratch and test driven development.Frontend is made with nextjs",
      "FIELD24": " next-auth (so users can login with their Oura account)",
      "FIELD25": " typescript and tailwindcss. Wallet connection is done by wagmi and rainbow. Rainbow provides the easiest and fastest ready-to-use connect button and switch network button with functionality.Deployment is done in Vercel.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 96,
    hackathon: "ETHGlobal Tokyo",
    title: "SunEthTokyoProject",
    more: "https://ethglobal.com/showcase/sunethtokyoproject-xz5sh",
    demo: "https://ethtokyoproject-client.vercel.app/",
    repo: "https://github.com/dssd1001/ethtokyoproject_client",
    video: "",
    winner: "",
    short: "Robo-advisor for Bitcoin. Invest in advanced Bitcoin portfolio management strategies. ",
    description: "Web2 retail investors want to diversify into DeFi-based Bitcoin investing",
      "FIELD11": " but DeFi's learning curve is too high and there are no appealing or easy products for them to use. Solution: DeFi robo-advisor product with simple onboarding process. Think Acorns/Betterment for DeFi Bitcoin investing.Product features complete self-custody",
      "FIELD12": " multi-sig",
      "FIELD13": " and scheduled investments. Infrastructure is powered by Polygon Network (layer 2) and Safe (web3 login & fiat on-ramps & multisig safes). It's time to build a beautiful retail product and onboard the rest of the world to DeFi with a robo-advisor.For this hackathon",
      "FIELD14": " I focus on UX and onboarding with the theme of account abstraction.So",
      "FIELD15": " frontend utilizes web2-friendly UI (a nice Tailwind template) with minimal web3 interactions throughout the onboarding process (Safe's AA powers web3 login & fiat on-ramps & multisig safes).User's onramped USDC is stored in a completely self-custodial wallet. User then deposits their USDC into a multisig safe",
      "FIELD16": " which is algorithmically rebalanced based on robo-advisor signals to generate consistent returns.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 97,
    hackathon: "ETHGlobal Tokyo",
    title: "O-Hashi x Censorship Oracle",
    more: "https://ethglobal.com/showcase/o-hashi-x-censorship-oracle-j1jqa",
    demo: "https://censorship-oracle-frontend.vercel.app/",
    repo: "https://github.com/shotaronowhere/CensorshipOracle",
    video: "",
    winner: "🏊 The Graph — Pool Prize 🫶 Gnosis Chain — Best project on Hashi ",
    short: "An optimistic hash bridge for Ethereum and Gnosis which fallsback on the security of the Gnosis Hashi bridge aggregator. Optimistic hash claims are accepted as long as the on-chain censorship oracle test passes!",
    description: "This project is two-in-one:an on-chain censorship oracle& an optimistic hash bridging protocol we call O-Hashi build ontop of Gnosis' Hashi using our censorship oracleThe censorship oracle is based on an eth research forum post made last month by Ed Felten",
      "FIELD11": " the chief scientist at Arbitrum. In the post (https://ethresear.ch/t/reducing-challenge-times-in-rollups/14997)",
      "FIELD12": " Ed proposes a statistical test to determine censorship using on-chain information in block headers alone. The test is based on ethereum consensus mechanisms",
      "FIELD13": " and as Ed suggests",
      "FIELD14": " can speed up optimistic systems.We implement Ed's spec and create an optimistic hash bridge called O-Hashi integrating our censorship oracle and Gnosis' Hashi bridge to resolve disputes. Here's how O-Hashi works",
      "FIELD15": "Anyone can make a claim about a hash by leaving a deposit",
      "FIELD16": " and automatically starting a censorship test in the censorship oracle.a) Anyone can challenge the claim by leaving a deposit. We call the Gnosis Hashi bridge to resolve the challenge bridging the true hash securely. If Hashi never responds",
      "FIELD17": " we refund both the claimant and the challenger",
      "FIELD18": " and no hash is validated.ORb) After the challenge period elapses",
      "FIELD19": " the claim can be optimistically accepted if the censorship test passes. If the censorship test fails",
      "FIELD20": " Hashi is called to validate the hash. This project is built on:PythonJupyter NotebooksThe GraphReactHardhat",
      "FIELD21": " SolidityUniquely",
      "FIELD22": " for a web3 project atleast",
      "FIELD23": " this project involves high precision off-chain calculations requiring hundreds of digits of numerical precision implemented in python to calculate the censorship oracle test parameters. You will need Jupyter notebooks to open the .ipynb files.The censorship oracle solidity contracts are deployed with test parameters pre-calculated as constants.The graph is used to implement block handlers to calculate statistics about missing blocks over slot ranges.React is used for a clean dashboard front-end which display missing block information for both Gnosis and Ethereum.The O-Hashi Bridge is implemented as contracts alone",
      "FIELD24": " while the front-end only displays information about the censorship oracle.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 98,
    hackathon: "ETHGlobal Tokyo",
    title: "Zen Garden",
    more: "https://ethglobal.com/showcase/zen-garden-bc71z",
    demo: "https://zen-garden-hazel.vercel.app/",
    repo: "https://github.com/MalaiMama/Zen-Garden",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "A game that lets you virtually own and care for a forest",
    description: " with our actions performed in the real world.",
      "FIELD11": "Zen Garden is a revolutionary gaming DApp designed to promote environmental protection and encourage individuals to take action in preserving our planet. By leveraging the power of blockchain technology and NFTs",
      "FIELD12": " Zen Garden gamifies the process of tree planting to create a rewarding and engaging experience for its users.Upon joining Zen Garden",
      "FIELD13": " users are given their own virtual land where they can plant trees using tree NFTs. For each virtual tree planted",
      "FIELD14": " a real tree is planted in the physical world",
      "FIELD15": " creating a tangible impact on the environment. Users can also water their virtual plants by paying a fee",
      "FIELD16": " which is then used to maintain and care for the real trees that have been planted.In addition to its gamified approach to environmental conservation",
      "FIELD17": " Zen Garden also provides users with the ability to view the exact location of their planted trees on a map. This feature not only increases transparency but also fosters a sense of pride and accomplishment in users who are actively contributing to the preservation of the environment.By offering an engaging platform that encourages users to protect the environment through tree planting. Zen Garden is a unique and innovative DApp that combines entertainment with environmental responsibility. As more users participate and interact with the platform",
      "FIELD18": " the collective impact on the environment will continue to grow",
      "FIELD19": " ultimately helping to create a greener and more sustainable future for all.The impact of Zen Garden on society will be multifaceted",
      "FIELD20": " as it addresses both environmental and social aspects. Here are some of the key effects that the platform can create:Environmental Awareness: By gamifying the process of tree planting",
      "FIELD21": " Zen Garden educates users about the importance of environmental conservation and encourages them to become more conscious of their ecological footprint. This increased awareness can lead to more responsible behavior in other aspects of users' lives",
      "FIELD22": " such as reducing waste and conserving energy.Positive Behavioral Change: As users engage with Zen Garden and contribute to real-life tree planting",
      "FIELD23": " they may develop a sense of responsibility and pride that motivates them to participate in other environmental initiatives",
      "FIELD24": " both on and off the platform. This can lead to long-lasting positive changes in behavior and a greater commitment to environmental stewardship.Community Building: The Zen Garden platform can foster a sense of community among its users",
      "FIELD25": " who share a common goal of protecting the environment. This collective identity can help strengthen social bonds and create a supportive network of environmentally conscious individuals.Carbon Sequestration: As more trees are planted through the platform",
      "FIELD26": " the amount of carbon dioxide being absorbed from the atmosphere will increase. This will help mitigate the effects of climate change",
      "FIELD27": " reducing global warming and preserving ecosystems for future generations.Biodiversity Protection: Tree planting initiatives supported by Zen Garden can help restore ecosystems",
      "FIELD28": " providing habitats for various species and promoting biodiversity. This is essential for maintaining the delicate balance of our planet's ecosystems and ensuring the survival of countless species.Economic Opportunities: The funds generated by the platform can support local communities involved in tree planting and maintenance efforts. This can create jobs",
      "FIELD29": " stimulate local economies",
      "FIELD30": " and promote sustainable development.Education: The platform can serve as an educational tool for users to learn about the importance of trees and their role in the environment. This can inspire a new generation of environmental activists who will continue to advocate for and participate in conservation efforts.In summary",
      "FIELD31": " the impact of Zen Garden on society has the potential to be significant and far-reaching. By raising environmental awareness",
      "FIELD32": " fostering positive behavioral changes",
      "FIELD33": " and promoting community building",
      "FIELD34": " Zen Garden can contribute to the creation of a more sustainable and eco-friendly world. The project incorporates React-Pixijs for facilitating the drag-and-drop functionality of NFT Trees owned by users in their Zen Garden.It also integrates QuickNode NFT API for the Tree NFT marketplace",
      "FIELD35": " allowing users to purchase NFT Trees.The smart contracts of the project have been deployed on various platforms such as Polygon zkEVM",
      "FIELD36": " Celo",
      "FIELD37": " Scroll",
      "FIELD38": " Linea",
      "FIELD39": " and Mantle.The authenticity of users' identities is verified through Worldcoin to prevent fraudulent activities and maintain the credibility of the Dapp.Additionally",
      "FIELD40": " push chat notifications are employed to remind users to plant",
      "FIELD41": " water",
      "FIELD42": " and monitor the growth status of their trees.Furthermore",
      "FIELD43": " Huddle01 SDK facilitates communication between funders and planters to ensure smooth interaction and avoid any confusion or miscommunication.Users can easily log in to Zen Garden using their Lens handle",
      "FIELD44": " thanks to the integration of Lens protocol for creating profiles of planters and funders.",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 99,
    hackathon: "ETHGlobal Tokyo",
    title: "BAILOUT",
    more: "https://ethglobal.com/showcase/bailout-ia6s1",
    demo: "",
    repo: "https://github.com/enu-kuro/bailout",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🥈 Lit — Best Use 🏆 ETHGlobal Tokyo Finalist ",
    short: "A security pipeline that securely moves assets between EOA",
    description: " Contract Wallet",
      "FIELD11": " and Cold Wallet.",
      "FIELD12": "Bailout is a security pipeline that securely moves assets between EOA",
      "FIELD13": " Contract Wallet",
      "FIELD14": " and Cold Wallet. In order for individual investors to securely handle EOAs such as MetaMask",
      "FIELD15": " Bailout provides Contract Wallet where main assets can be stored and the function to eject assets to Cold Wallet with a single click even in case of loss of the private key.Many smart contract wallets have appeared",
      "FIELD16": " including Argent and Safe",
      "FIELD17": " but the dApp side",
      "FIELD18": " such as Uniswap",
      "FIELD19": " does not support these wallet connections",
      "FIELD20": " so many individual investors end up using Conventional EOA",
      "FIELD21": " such as MetaMask",
      "FIELD22": " as their main account and place many assets in Cold Wallet or Safe.Bailout is a pipeline function thateasily transfers a certain amount of assets from EOA to a secure Smart Contract Wallet that can be signed with EOA and Google Signinand in the event of an emergency",
      "FIELD23": " such as losing the EOA private key or losing the device",
      "FIELD24": " you can escape all your assets to Cold Wallet at the touch of a button without gas fee with any walletThis makes everyday asset management smoother and more secure",
      "FIELD25": " and minimizes the damage caused by the loss of the private key. Bailout was built using a variety of technologies",
      "FIELD26": " including ERC-4337",
      "FIELD27": " Lit Protocol",
      "FIELD28": " Lens API and MetaMask Snaps.2 Factor Authentication(Multisig)Lit PKPs are used to create private key-less MPC wallets that utilize Google authentication for 2FA. The MPC wallet's ETH address is then set as the 2FA address.Gasless Social RecoveryThe social recovery function utilizes Lit Actions and PKPs to allow a PKP to sign a transaction only if specific guardians react to a specific publication. The transaction then calls a function on the AA contract that moves all funds to the escaped address. If you fund the PKP in advance",
      "FIELD29": " you can execute the social recovery function gaslessly.We use Lens publication and users as social recovery guardians. On the Lit Action",
      "FIELD30": " the program gets the list of users who have reacted to the publication of Lens Protocol.We attempted to utilize MetaMask Snaps to improve UX in Bailout. However",
      "FIELD31": " we had a trouble with connecting to Snap",
      "FIELD32": " so we implemented all logics outside of Snap environment.The application is deployed on Polygon Mumbai.",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 100,
    hackathon: "ETHGlobal Tokyo",
    title: "BAILOUT",
    more: "https://ethglobal.com/showcase/bailout-ia6s1",
    demo: "",
    repo: "https://github.com/enu-kuro/bailout",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🥈 Lit — Best Use 🏆 ETHGlobal Tokyo Finalist ",
    short: "A security pipeline that securely moves assets between EOA",
    description: " Contract Wallet",
      "FIELD11": " and Cold Wallet.",
      "FIELD12": "Bailout is a security pipeline that securely moves assets between EOA",
      "FIELD13": " Contract Wallet",
      "FIELD14": " and Cold Wallet. In order for individual investors to securely handle EOAs such as MetaMask",
      "FIELD15": " Bailout provides Contract Wallet where main assets can be stored and the function to eject assets to Cold Wallet with a single click even in case of loss of the private key.Many smart contract wallets have appeared",
      "FIELD16": " including Argent and Safe",
      "FIELD17": " but the dApp side",
      "FIELD18": " such as Uniswap",
      "FIELD19": " does not support these wallet connections",
      "FIELD20": " so many individual investors end up using Conventional EOA",
      "FIELD21": " such as MetaMask",
      "FIELD22": " as their main account and place many assets in Cold Wallet or Safe.Bailout is a pipeline function thateasily transfers a certain amount of assets from EOA to a secure Smart Contract Wallet that can be signed with EOA and Google Signinand in the event of an emergency",
      "FIELD23": " such as losing the EOA private key or losing the device",
      "FIELD24": " you can escape all your assets to Cold Wallet at the touch of a button without gas fee with any walletThis makes everyday asset management smoother and more secure",
      "FIELD25": " and minimizes the damage caused by the loss of the private key. Bailout was built using a variety of technologies",
      "FIELD26": " including ERC-4337",
      "FIELD27": " Lit Protocol",
      "FIELD28": " Lens API and MetaMask Snaps.2 Factor Authentication(Multisig)Lit PKPs are used to create private key-less MPC wallets that utilize Google authentication for 2FA. The MPC wallet's ETH address is then set as the 2FA address.Gasless Social RecoveryThe social recovery function utilizes Lit Actions and PKPs to allow a PKP to sign a transaction only if specific guardians react to a specific publication. The transaction then calls a function on the AA contract that moves all funds to the escaped address. If you fund the PKP in advance",
      "FIELD29": " you can execute the social recovery function gaslessly.We use Lens publication and users as social recovery guardians. On the Lit Action",
      "FIELD30": " the program gets the list of users who have reacted to the publication of Lens Protocol.We attempted to utilize MetaMask Snaps to improve UX in Bailout. However",
      "FIELD31": " we had a trouble with connecting to Snap",
      "FIELD32": " so we implemented all logics outside of Snap environment.The application is deployed on Polygon Mumbai.",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 101,
    hackathon: "ETHGlobal Tokyo",
    title: "BillBoard",
    more: "https://ethglobal.com/showcase/billboard-8s872",
    demo: "",
    repo: "https://github.com/jeedani/scaffold-eth_ETHTokyo/",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "BillBoard is your keyword ad space stored in the blockchain. You can replace the display if you pay the price",
    description: " which increases 5% every time the keyword is updated",
      "FIELD11": "The display keyword can be replaced if anyone pays the price. The prices increases by 5% everytime the ad space is renewed.Since the keyword is stored in the blockchain",
      "FIELD12": " it has the potential to be used in banner spaces around the internet. In the future",
      "FIELD13": " new features will be added such as banner profit share with displayers. In this hackathon project",
      "FIELD14": " we used scaffold-eth as a boilerplate and modified the smart contract and frontend. The smart contract was written in Solidity. The frontend was built with React and Eth Hooks",
      "FIELD15": " which made it easy to communicate with the smart contract and interact with the blockchain. These technologies allowed us to build a functional DApp quickly and efficiently.",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 102,
    hackathon: "ETHGlobal Tokyo",
    title: "Save the tree children",
    more: "https://ethglobal.com/showcase/save-the-tree-children-96480",
    demo: "",
    repo: "https://github.com/TomKimKR/scaffold-eth_ETHTokyo",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "We are a team trying to make our planet a greener place by utilizing blockchain. We want to be a trusted source of opportunities for holders in the Ethereum ecosystem to use some of their capital to green the planet.",
    description: "Our project is an Ethereum-based decentralized app that shows the height of a community-grown tree as a real-time number on a webpage",
      "FIELD11": " and when donors send Ethereum tokens to a smart contract",
      "FIELD12": " the tree grows by one meter accordingly. The project leverages a decentralized donation model and blockchain technology to increase the transparency and reliability of donations and increase social value. The project is also easy to participate in and highly scalable.Decentralized donation modelThe project operates on an entirely decentralized model",
      "FIELD13": " as it uses Ethereum smart contracts to process donations. This means that donations are not paid directly to anyone",
      "FIELD14": " but are processed automatically according to programmed rules. This increases the transparency and reliability of the donation model",
      "FIELD15": " and reduces the risk of fraud or unfair processing.Utilizing blockchain technologyThe project utilizes blockchain technology to ensure the reliability and integrity of the data. All donations and tree growth are recorded on the blockchain",
      "FIELD16": " making it impossible to falsify or manipulate the data. This provides a high level of trust for donors and allows for a more transparent and fair donation process.Increasing social valueThe project raises social value",
      "FIELD17": " which is primarily related to environmental protection. Linking tree growth to environmental protection helps to foster a higher sense of social consciousness and responsibility. The project also combines technological innovation and social value creation in the blockchain ecosystem",
      "FIELD18": " resulting in a more positive social impact.Easy participation and scalabilityThe project is easy to join on the webpage",
      "FIELD19": " and all donors can see the growth of the trees corresponding to their donations in real time. The project is also scalable as donations accumulate. As new donors join",
      "FIELD20": " they can be reflected and the tree's growth can be continuously shown. We just utilized scaffolds to create a very basic working scene. Our project will be built on the Ethereum blockchain. To do this",
      "FIELD21": " we will write a smart contract to implement logic that will update the height of the tree to match the amount of Ethereum tokens a donor sends. We will also develop a webpage that shows the height of the tree in real time using a frontend framework like React or Vue.js. The blockchain and the frontend will be connected via an API so that every time the height of the tree is updated",
      "FIELD22": " it will be automatically reflected on the webpage. We will utilize a node service like Infura or Alchemy for this purpose. Finally",
      "FIELD23": " we will utilize chat platforms like Discord and Telegram for community management.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 103,
    hackathon: "ETHGlobal Tokyo",
    title: "Subs",
    more: "https://ethglobal.com/showcase/subs-ru9k7",
    demo: "",
    repo: "https://github.com/metehancaliskan/Subscription-System-Superfluid",
    video: "",
    winner: "",
    short: "A subscription system which is developed with tradeable cashflow contract powered by Superfluid",
    description: "There are 3 mains goal of this project. The first goal is to avoid giving our personal information to a centralized organization to use a subscription service. The second goal is to cancel subscription at any time without losing money by canceling our subscription instead of waiting for the subscription to expire for subscription cancellation. The last goal is to create a marketplace that will allow investment in the cash flow between subscription providers and subscribers. This project uses \"Tradable CashFlow Contract\" powered by Superfluid. There was a mistake in Superfluid docs. It is not the security problem but so annoying.This contract is so powerful because actually",
      "FIELD11": " it is a basic ERC721 contract but inside the contract there is a money streaming so whoever own the contract",
      "FIELD12": " he/she cash flow.",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 104,
    hackathon: "ETHGlobal Tokyo",
    title: "ScandalPrediction",
    more: "https://ethglobal.com/showcase/scandalprediction-za1ca",
    demo: "",
    repo: "https://github.com/YusukeMigitera/scandal-prediction",
    video: "",
    winner: "",
    short: "A prediction market platform focused on stock price fluctuations caused by scandals. The platform would allow users to bet on the percentage drop in stock prices and earn rewards for accurate predictions. It's a specialized version of an existing platform for this purpose.",
    description: "The app allows users to create new predictions or bet ETH on existing predictions.The betting procedure is as follows.Select the prediction you are interested in on the list page.Place your bet by selecting yes/no and the amount.The bet is closed when it is the betting deadline or the stock price drops to the predicted price.The prediction is closed when it is the prediction deadline or the stock price drops to the predicted price.When the prediction closes",
      "FIELD11": " the bet is split among those who correctly guessed the price.Information about when and how much it will decrease is valuable. If the company is stable",
      "FIELD12": " even if the stock price decreases due to a scandal",
      "FIELD13": " it will return to normal after a while. There is an opportunity to make money from the difference. For the smart contract",
      "FIELD14": " I used hardhat and solidity",
      "FIELD15": " deploying only on the test net with Alchemy. They are both reliable and widely used within the blockchain community. To complement your smart contract",
      "FIELD16": " I created a web client app in Next.js",
      "FIELD17": " using create next-app",
      "FIELD18": " which required very little initial setup.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 105,
    hackathon: "ETHGlobal Tokyo",
    title: "MAID - Multi Access Incentive Distribution",
    more: "https://ethglobal.com/showcase/maid-multi-access-incentive-distribution-9fh5s",
    demo: "https://643b0387a7ab7800083bb427--cosmic-unicorn-126e1a.netlify.app/",
    repo: "https://github.com/ETH-TOKYO-2023/.github",
    video: "",
    winner: "🌱 Sismo — Best Off-Chain App 🥉 Sismo — Best ZK Badge or Data Hack 🥈 AAVE Grants DAO — Best Use ",
    short: "A coupon factory that allows protocols to rewards users with custom ERC3525 coupons based on custom requiremetns and conditions",
    description: "MAID - Multi Access Incentive DistributionOnce upon a time in the bustling world of cafes and restaurants",
      "FIELD11": " there existed a humble paper card. It was a loyal companion to customers",
      "FIELD12": " tucked away in wallets and purses",
      "FIELD13": " eagerly awaiting its moment to shine. This was the era of stamp cards",
      "FIELD14": " where each visit to your favorite eatery brought you one step closer to a delectable reward.Fast forward to today",
      "FIELD15": " a new age of technology and innovation has dawned. MAID brings the nostalgic charm of loyalty stamp cards into the realm of Web3. We've transformed the trusty paper card into a digital wonder",
      "FIELD16": " offering a seamless and friendly solution for protocol users and developers.Protocols have the ability to define their own requirements for obtaining a stamp. We provide an interface that protocol developers are expected to implement",
      "FIELD17": " where the verification logic takes place. Once all the requirements are met (the user collects all the stamps on the card)",
      "FIELD18": " the user is rewarded.The rewards come in the form of ERC3525 tokens (Semi-Fungible Tokens). Protocol developers are also expected to implement the logic determining how these rewards can be used. Some examples include token allocation or airdrops",
      "FIELD19": " in-protocol discounts",
      "FIELD20": " and exclusive member benefits. MAID - Multi Access Incentive DistributionWe provide an interface that protocol developers are expected to implement",
      "FIELD21": " where the verification logic takes place.A Factory contract is responsible for managing all the coupons. After developers implement their requirements logic",
      "FIELD22": " they should add it to the Factory. Users interact with the Factory when they want to claim their rewards. The Factory forwards the verification logic to the appropriate coupon logic",
      "FIELD23": " and if successful",
      "FIELD24": " rewards users with the ERC3525 token.We provide examples for this interface implementation for \"Proof of OG\" (demonstrating that the user was among the first users or token holders of a specific protocol)",
      "FIELD25": " \"Proof of Badge\" (showing that the user holds at least a certain number of Sismo badges) and \"Proof of Safe\" (proving that the user owns a certain number of Safes).For the verification of the rewards we use Herodotus",
      "FIELD26": " that allows to prove information cross-chain (for example purposes we check the eligibility on goerli and verify it on starknet)",
      "FIELD27": " as well as proving historical data.Proof of OG of APE Coin and claim coupon on StarknetProof of OG of GHO Coin and claim coupon on StarknetProof of OG of BOB Coin and claim coupon on StarknetProof of Badge of SISMO Badges and claim coupon on Starknet (TBD)Proof of Safe for owning a certain number of Safes and claim coupon on StarkNet[ TECH STACK ]QuickNode for JSON-RPC callsAave GHO",
      "FIELD28": " ZkBOB",
      "FIELD29": " ApeCoin",
      "FIELD30": " Safe and Sismo for demonstrating potential use cases.NextJS",
      "FIELD31": " ArgentX",
      "FIELD32": " Stark-React",
      "FIELD33": " Stark.js",
      "FIELD34": " Wagmi for frontendERC3525 for user rewardHerodotus for multi-chain and historical validation of eligibilityCairo for validation contractsUI designs and architecture in Figma",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 106,
    hackathon: "ETHGlobal Tokyo",
    title: "AdTokenVerse​",
    more: "https://ethglobal.com/showcase/adtokenverse-6dj2f",
    demo: "https://adtokenverse.netlify.app/",
    repo: "https://github.com/Tokenized-Digital-Signage/ads-spots-contract/",
    video: "",
    winner: " 🧞 Worldcoin — Most Creative Use Case ",
    short: "Tokenized digital signage: 100% transparent",
    description: " zero intermediate fees. On-chain content moderation is ready for real-world use.",
      "FIELD11": "📢Introduction📢Tokyo is a city full of advertisements",
      "FIELD12": " with people encountering between 5",
      "FIELD13": "000 to 10",
      "FIELD14": "000 ads daily. However",
      "FIELD15": " the advertising industry is often closed off and lacks transparency",
      "FIELD16": " with large ad agencies controlling the majority of billboards. Our goal is to revolutionize the city's advertising landscape",
      "FIELD17": " beginning with digital signages in Tokyo.💡Our Solution 💡We have created a tokenized",
      "FIELD18": " fully on-chain digital signage solution. Each digital signage device in the city is assigned a unique token. To advertise on a digital signage",
      "FIELD19": " simply follow these steps: 1. Purchase the associated token",
      "FIELD20": " 2. Upload an advertisement NFT",
      "FIELD21": " and you're all set! Advertisement Control:Ensuring that only those who have purchased the signage token can control the advertisement content on the signages is crucial. To achieve this",
      "FIELD22": " we have developed a web3 application that works on digital signage IoT devices. The signages then retrieve advertisement content from the blockchain.Content Moderation:Advertisements serve as public goods",
      "FIELD23": " making content moderation essential. We have addressed this issue by implementing a fully on-chain identity and social credibility verification system",
      "FIELD24": " powered by Worldcoin and Lens Protocol. This ensures that only appropriate content is displayed on the digital signages.Deployment simplification:To make our digital signage application work efficiently",
      "FIELD25": " we required two sets of smart contracts: one for the signages and another for the advertisements. In order to manage these contracts without cluttering the codebase",
      "FIELD26": " we utilized Bunzz. Thanks to Bunzz",
      "FIELD27": " our dApps can be deployed in a one-stop manner",
      "FIELD28": " streamlining the entire process.🙏Special thanks🙏Worldcoin: Identity verificationLens Protocol: Social credibility qualificationBunzz: One-stop dApps deployment",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 107,
    hackathon: "ETHGlobal Tokyo",
    title: "EthTokyoZKProject",
    more: "https://ethglobal.com/showcase/ethtokyozkproject-ghmin",
    demo: "https://ethtokyozkprotocoldev.netlify.app/",
    repo: "https://github.com/ETH-TOKYO-WITH-KUHELL/zk-protocol-hunsman",
    video: "",
    winner: "",
    short: "our project belongs to zero knowledge by using semaphore zk-protocol",
    description: "First of all ",
      "FIELD11": " the main idea of this project is that paper was used when internal votes at the Blockchain Valley (korea univ blockchain society) at this moment ",
      "FIELD12": "  I thought like it would be good to write a feedback or vote through dApp instead of paper. Because we were blockchain society! After this",
      "FIELD13": " I attended a conference in a zk session at BoomLabs and got to know a zk protocol called semaphore. I was convinced that I could create the dApp I imagined through Semephore and decided to use the boilerplate and make additional developments in Hackathon that needed to be supplemented and continue to upgrade after event. There are three things that I tried to supplement. The first is to add permission for only people with NFTs issued by the group to join the group to generate feedback and view the contents. The second is a login feature that saves the value generated when the authorized address joins the group and allows users to view the contents generated in the group as soon as the values match from the contract mapping storage. The third is to modify the transaction occurrence so that the user could occur every transactions by themselves. The last is that we wanted to running on real world for increasing scalability so that others can use our dApp. As I mentioned on the description",
      "FIELD14": " we used Semaphore zk-procotol. This is Ethereum foundation's technology. Thanks to using this protocol",
      "FIELD15": " we could make a dApp project what we imagine at the first place. It has really good documentations and good demo. so we used a demo before start. After that we realized that we have to deploy not only Feedback contract but also Semephore contract. Because there were many groups by using Semephore contract that already existed on Polygon Mumbai Test Network. So if we want to handling a group",
      "FIELD16": " we have to get our own Semephore contract. And we deployed Semephore contract first",
      "FIELD17": " after that ",
      "FIELD18": " custormize a Feedback contract what we want to change and make a NFT contract that will be using on Feedback contract. We used Ether.js library when modify the transaction occurrence so that the user could occur every transactions by themselves.and used hardhat when we deploy Semaphore",
      "FIELD19": " Feedback",
      "FIELD20": " NFT contracts.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 108,
    hackathon: "ETHGlobal Tokyo",
    title: "Defendooooor",
    more: "https://ethglobal.com/showcase/defendooooor-mgsnx",
    demo: "",
    repo: "https://github.com/kopy-kat/ethtokyo",
    video: "",
    winner: "",
    short: "Hack prevention through automated protocol pausing powered by ZK proofs",
    description: "Defendoooor is a proof of concept at the idea stage that has the potential to make blockchains safer by incentivizing the identification of whitehat hacks to allow protocol pausing when a threat is identified.Protocol can specify invariants that are not allowed to be violated - through this projects can make sure they always work as intended. If a valid transaction is found by a whitehat or in the mem pool",
      "FIELD11": " a zk proof can be created that allows the verifier contract to pause functions in the exploited smart contract - keeping funds safe.Defendoor is fully decentralized",
      "FIELD12": " autonomous",
      "FIELD13": " and DoS resistant. We use the zk-evm-circuits library [https://github.com/privacy-scaling-explorations/zkevm-circuits] in Rust for off-chain proof generation.Two smart contracts were written in Solidity; an exploitable demo contract and a verfier contract which verifies the proof of chain and subsequently pauses protocols by invoking the pause() function from the OpenZeppelin Pausable Module.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 109,
    hackathon: "ETHGlobal Tokyo",
    title: "ZKVoiceKey",
    more: "https://ethglobal.com/showcase/zkvoicekey-zeufj",
    demo: "",
    repo: "https://github.com/SoraSuegami/voice_recovery_circuit",
    video: "",
    winner: "🥈 Reazon — Best Mass Adoption 🥷 EF — ZK",
    short: " Semaphore",
    description: " RLN",
      "FIELD11": " & Unirep 🏆 ETHGlobal Tokyo Finalist ",
      "FIELD12": "ZKVoiceKey is a protocol that allows users to recover their private keys using only their voice; by using Fuzzy Commit and ZKP",
      "FIELD13": " authentication is possible through a fuzzy match of voice without storing voice information directly on the blockchain.",
      "FIELD14": "This project combines technologies such as zero-knowledge proof",
      "FIELD15": " machine learning",
      "FIELD16": " and smart contracts to enable users to recover their private keys. Traditionally",
      "FIELD17": " private key recovery methods have been limited by social recovery and device dependence. However",
      "FIELD18": " ZKVoiceKey allows users to register their own voice (biometric information) on the blockchain in advance",
      "FIELD19": " making it possible to recover the private key with just their voice in case it is lost.Among the many types of biometric information",
      "FIELD20": " voice was selected for this project because it can be used to link a person's voice to a message (in this case",
      "FIELD21": " the transfer of an address).At the time of registrationThe user registers his/her voice (biometric information) in advance via a browser. Fuzzy Commitment is not biometric information itself",
      "FIELD22": " but rather a commitment",
      "FIELD23": " which increases security. Fuzzy Commitment is a secure way to manage biometric information as a commitment",
      "FIELD24": " not as a biometric itself.Restoration.The user extracts features through a machine-learning model of speaker authentication as at the time of enrollment. Next",
      "FIELD25": " the user compares his/her biometric information with that stored on the blockchain. Fuzzy Commitment is able to recover the biometric bit sequence at the time of enrollment using error correction codes. This allows only the individual to authenticate",
      "FIELD26": " and creates a halo2-based zero-knowledge proof at the time of authentication. The created proof is sent to the on-chain contract for verification.This allows the wallet to be tied from the old address to the new address. [Front-End].Built using React. The screen accepts voice input for voice registration and authentication",
      "FIELD27": " and the data is sent to the backend",
      "FIELD28": " where it can be checked for the sign obtained during authentication.[Back-End]The backend is built mainly in Python",
      "FIELD29": " using a web framework called Flask.We also used a machine learning model for speaker authentication called RawNet. This model takes raw speech data as input and outputs a feature vector of speech. This model is suitable for this biometric authentication scheme using Fuzzy Commitment. In addition",
      "FIELD30": " the ability to use raw voice data as input makes the model more suitable (compared to models that require preprocessing) for creating zero-knowledge proofs of inputs and outputs",
      "FIELD31": " which was not accomplished during the hackathon",
      "FIELD32": " but is the future work that we are considering.Fuzzy Commitment is a technique that stores biometric information as a commitment and restores it when another biometric information sent during authentication is below a certain threshold using error correcting codes. This provides an increased level of security.The part of the system that creates the zero-knowledge proof and sends it to the smart contract is built by Rust. halo2",
      "FIELD33": " a zero-knowledge proof protocol",
      "FIELD34": " is used.[Smart-Contract]SolidityThere are two types of smart contracts deployed on Arbitrum: Voice Recoder Contract and Wallet Contract. The Voice Recoder Contract enrolls and stores the user's submitted biometric information.One Wallet Contract is assigned to each user who has registered his/her voice.",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 110,
    hackathon: "ETHGlobal Tokyo",
    title: " AirdropDAO",
    more: "https://ethglobal.com/showcase/airdropdao-rt5u2",
    demo: "https://www.loom.com/share/a97bf1139a2942a7965a9acdc448a35b",
    repo: "https://github.com/AAAirdropper/AirdropDAO",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🏊 UMA & Across — Pool Prize ",
    short: "Airdrop DAO is designed to allow anyone to hold a crypto wallet through AccountAbstraction and social authentication.",
    description: "We can act as a link between companies who want to promote NFT and FT for free and users who are not familiar with crypto",
      "FIELD11": " such as web2 users.Companies that want to promote NFTs and FTs can make suggestions on how they would like to sponsor an Airdrop to our DAO snapshot. They can then vote on it through the AirdropDAO's Optimistic Community Poll.Through this vote",
      "FIELD12": " services that are detrimental to users",
      "FIELD13": " such as scam projects",
      "FIELD14": " will be eliminated.If the vote passes",
      "FIELD15": " the user is then allowed to Airdrop.Users can log in with their social credentials and simply press the mint button to earn tokens and NFTs",
      "FIELD16": " making it easy and secure for even those unfamiliar with crypto to participate in the Airdrop campaign. AccountAbstraction:Implemented AccountAbstraction's web wallet in conjunction with social authentication.UMA * SnapShot:Implemented consensus on whether to promote NFT or FT through an optimistic poll. Also",
      "FIELD17": " after a consensus is reached",
      "FIELD18": " gas bills can be transferred to be used as gas bills to be used in AccountAbstraction.Airstack:We are able to display the most recently minted users to ensure that users who have minted in the past are not suspicious users.OpenAI: allows displaying the most recently minted users to make sure that they are not suspicious users.As an example of NFT promotion",
      "FIELD19": " we have implemented GenerativeAI",
      "FIELD20": " which utilizes OpenAI to create a more exciting experience through Crypto and AI.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 111,
    hackathon: "ETHGlobal Tokyo",
    title: "burnerwallet3",
    more: "https://ethglobal.com/showcase/burnerwallet3-jo7q6",
    demo: "",
    repo: "https://github.com/PlanckerLabs/wallet.sasi.codes",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Based on the asset level of players in blockchain games",
    description: " provide wallet solutions with varying degrees of security.",
      "FIELD11": "We aim to offer a variety of wallet services for fully on-chain games:Automatically create a burner wallet when users first enter the game.Prompt users to create a wallet EOA (Externally Owned Account) and an account abstraction wallet when they acquire important assets in the game. At the same time",
      "FIELD12": " transfer the assets from the burner wallet to the account abstraction wallet.All subsequent asset transfers require signed multi-transactions.Ensure a relatively smooth experience when assets in the abstract account interact with the game.Process multiple transactions with a one-time signature.\" We initially utilized the burner wallet code to generate an EOA wallet and monitored the asset status of the EOA. If the assets reach a certain size",
      "FIELD13": " users will receive a prompt. The Polygon testnet API was employed for monitoring. If the user selects 'yes",
      "FIELD14": "' an account abstraction wallet will be created using the soul-wallet-lib. A transaction is initiated on the wallet",
      "FIELD15": " with two transactions being bundled into a single UserOp",
      "FIELD16": " which is ultimately sent to the blockchain by the bundler.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 112,
    hackathon: "ETHGlobal Tokyo",
    title: "Play Protect",
    more: "https://ethglobal.com/showcase/play-protect-74wvv",
    demo: "",
    repo: "https://github.com/luksgrin/ETHTokyo_Project",
    video: "",
    winner: "",
    short: "Play Protect allows artists and musicians to enforce digital rights management for their music using threshold encryption.",
    description: "Despite certain cultural trends and negative sentiments towards digital rights management",
      "FIELD11": " an artist's best ally for protecting the value of their work is encryption. Play Protect allows artists to truly own their intellectual property and grant streaming or download licenses  to users that meet certain arbitrary",
      "FIELD12": " artist-defined conditions. Those conditions may be either on-chain or off-chain. Some examples include granting streaming licenses to fans who are followers of the artists on Lens protocol",
      "FIELD13": " or granting download licenses to fans who own a particular NFT issued by an artist.Play Protect empowers artists to share and distribute their music in a decentralized and sovereign way. By harnessing the power of encryption",
      "FIELD14": " an artist's music can be published on public channels such as IPFS without exposing their  creative works to piracy or otherwise diminishing the value of their work. Play Protect utilizes threshold encryption so that no single node or centralized entity holds the keys to decrypt artist content",
      "FIELD15": " thereby reducing chances of piracy and large-scale exploits.In conclusion",
      "FIELD16": " despite some resistance towards digital rights management",
      "FIELD17": " encryption can be an effective tool for artists to protect the value of their work. Play Protect provides a decentralized and secure platform for artists to distribute their music while ensuring that their intellectual property remains safe from piracy and exploitation. Through the use of threshold encryption",
      "FIELD18": " Play Protect enables artists to control access to their content",
      "FIELD19": " granting licenses based on conditions set by the artist. This technology empowers artists to distribute their work in a more sovereign and independent way",
      "FIELD20": " reducing their reliance on centralized platforms and allowing them to maintain control over their creative output. The project uses the following:NextJSLit Protocol SDKIPFSAn artist uses the UI to upload an mp3 to IPFS that is encrypted using Lit Protocol's SDK and underlying threshold encryption scheme. The artist defines conditions for media decryption and playback using Lit Protocol's access control conditions and Lit Actions. These conditions can use on-chain or off-chain resources from a near infinite array of sources including dozens of blockchains and any API available behind HTTP.When a fan wants to play media",
      "FIELD21": " they simply sign a message to authenticate their address and  assuming access control conditions are met",
      "FIELD22": " the Lit Protocol nodes will return the requisite number of BLS shares in order to form the encryption key to decrypt the media. The media is then finally retrieved and decrypted client-side allowing the fan to play the artist's work.",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 113,
    hackathon: "ETHGlobal Tokyo",
    title: "alphagram with p2p nft trading in chat",
    more: "https://ethglobal.com/showcase/alphagram-with-p2p-nft-trading-in-chat-796q9",
    demo: "",
    repo: "https://xd.adobe.com/view/2f6e5ad2-d7ae-4578-a8fd-48a58117394b-7a3d/",
    video: "",
    winner: "",
    short: "Social experience for P2P NFT trading directly in Telegram chat UI with token-enabled smart contracts for a convenient and secure NFT market. ",
    description: "P2P NFT in Chat is a blockchain-based social feature designed specifically by using the alphagram app",
      "FIELD11": " a 3rd-party Telegram",
      "FIELD12": " in chat page",
      "FIELD13": " allowing users to directly engage in P2P NFT transactions within chat conversations.It utilizes smart contracts and digital tokens to exchange NFTs",
      "FIELD14": " offering users a faster and more convenient trading experience. This feature boasts high security as the transaction process is executed entirely on the blockchain without the need for third-party platforms. Additionally",
      "FIELD15": " the process is transparent and easily traceable",
      "FIELD16": " which is beneficial for protecting user privacy and assets. Ethereum blockchain:Utilizes smart contracts to enable NFT trading functionality and cryptocurrency payments.Smart contract with solidity:Writes smart contracts to execute transactions on the Ethereum network.alphagram integration (Telegram open source):Seamlessly integrates with the Telegram chat interface",
      "FIELD17": " allowing users to trade within chats.IPFS:Stores and distributes NFT metadata and related media files",
      "FIELD18": " ensuring decentralized storage and high-performance.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 114,
    hackathon: "ETHGlobal Tokyo",
    title: "LayerHorizon",
    more: "https://ethglobal.com/showcase/layerhorizon-bq5st",
    demo: "https://layer-horizon.vercel.app/",
    repo: "https://github.com/Bitpickers-dev/LayerHorizon",
    video: "",
    winner: "",
    short: "LayerHorizon is a tool that visually illustrates how Layer 2 protocols connect with the main blockchain. The goal is enhancing transparency and deepening understanding of blockchain technology in the Ethereum ecosystem.",
    description: "LayerHorizon is a product designed to provide a visual representation of the relationship between Ethereum's Layer 2 protocol and the main blockchain. The platform allows users to grasp how the layer 2 solution is connected to Ethereum. Users can access block information and more through the \"LayerHorizon\" intuitive interface.When the user selects the chain he/she wants to monitor",
      "FIELD11": " information for the last 6 blocks is displayed.Clicking on them will take the user to an external URL (etherscan..etc) for more detailed block information",
      "FIELD12": " etc. The @arbitrum ",
      "FIELD13": " @optimismFND APIs and @AlchemyPlatform are used to retrieve the second layer blocks and store them in Azure. These are deployed on Vercel.We are not using web3-like technologies like smart contracts or distributed indexing here",
      "FIELD14": " though",
      "FIELD15": " Better UI/UX and wider chain support are our future tasks.",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 115,
    hackathon: "ETHGlobal Tokyo",
    title: "AniMATE",
    more: "https://ethglobal.com/showcase/animate-f9pc3",
    demo: "",
    repo: "https://github.com/Tlazypanda/ethtokyofinal",
    video: "",
    winner: "📜 Scroll — Just Deploy 🔐 Livepeer — Best Token-Gated Video 🏊‍♂️ Polygon — Pool Prize 🃏 FVM — Wild Card 🥉 zkBob — Best Use ",
    short: "AniMATE is a decentralised anime streaming platform that uses zero-knowledge proof for age verification and rewards users with an NFT",
    description: " allowing them to upload and watch anime content. ",
      "FIELD11": "The project is focused on creating a decentralised platform for anime streaming that caters to the needs of all anime fans. While most anime content is accessible to everyone",
      "FIELD12": " some content is adult-only",
      "FIELD13": " and the platform provides a solution to verify the age of users who are interested in watching adult anime without compromising their identity.AniMATE provides a straightforward solution to age verification by allowing users to connect their wallets and upload their ID. The platform then uses zero-knowledge proof to verify whether the user is 18+ without storing or revealing any personal information. Once verified",
      "FIELD14": " the user is rewarded with an NFT",
      "FIELD15": " which acts as a verification for future access to adult content on the platform.AniMATE not only ensures that users are of the correct age",
      "FIELD16": " but it also provides a direct connection between anime creators and their audience. The platform removes middle parties from the equation and rewards creators for their content. Overall",
      "FIELD17": " AniMATE creates a safe",
      "FIELD18": " secure",
      "FIELD19": " and rewarding experience for anime fans and creators alike. AniMATE verifies the user's age through Zero Knowledge proof and rewards them with an NFT as proof of verification.The NFT contract is deployed on several blockchain networks",
      "FIELD20": " including Polygon",
      "FIELD21": " Celo",
      "FIELD22": " Taiko",
      "FIELD23": " FVM",
      "FIELD24": " and Scroll.Livepeer is used for creators to create or stream anime content",
      "FIELD25": " while Airstack is used to obtain NFTs from the blockchain.Lit Protocol is used to Token gate premium Anime Videos",
      "FIELD26": " and ZkBob is used to enable direct deposit functionality in the KYC process.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 116,
    hackathon: "ETHGlobal Tokyo",
    title: "solsearch",
    more: "https://ethglobal.com/showcase/solsearch-kncw1",
    demo: "",
    repo: "https://github.com/hrkrshnn/solsearch",
    video: "",
    winner: "",
    short: "Solsearch is a CLI tool for semantically searching over Solidity code. Search queries can be written in a custom Domain Specific Language (DSL) that closely resembles the Abstract Syntax Tree (AST) representation that's used internally by the Solidity compiler.",
    description: "Here's why and for what solsearch can be used:Highly customizable linters: the DSL can encode simple linting rules.Highly extensible static analysis tools: the DSL can be used to write rules on the fly. Currentstatic-analysis tools require working with the AST directly in a high-level language like C++",
      "FIELD11": "Rust or Python. The learning curve and feedback-loop for existing static-analysis tool is bad.Security research:A researcher can build their own internal set of rules",
      "FIELD12": " for common vulnerabilities and patternsthat they notice",
      "FIELD13": " and run it againt solidity contracts.When a new security bug is found",
      "FIELD14": " this search tool can be used to query against all verifiedcontracts on chain to find out affected contracts.Language designers: when existing features for solidity gets updated",
      "FIELD15": " the compiler team oftenneeds to understand the impact of the changes. This search tool can be used to precisely locatedopen-source contracts that use certain language patterns.Fun: I wanted to see how to design a query language to search over Solidity's AST and howpowerful such queries can get. It's in built on Rust",
      "FIELD16": " and uses some existing libraries (solidity-rs: I had to make a fork of this repo to use it as a library",
      "FIELD17": " my fork) that has the Rust struct bindings for solc's AST. For the first few hours",
      "FIELD18": " I was mainly searching such a library. Implementing it from scratch would have been tedious and impractical for a Hackathon. (tweet: the replies to this tweet gave some other libraries.)More importantly",
      "FIELD19": " functions or the visitor patterns are also needed for building the search tool. In retrospect",
      "FIELD20": " the visitor pattern implemented in this library wasn't suitable for building the generalized matching engine. In the end",
      "FIELD21": " I decided to de-scope the matching engine to only work with a few rules. If I were to build this over 2 weeks",
      "FIELD22": " I'd probably reimplement the visitor pattern to be something more suitable for my use-case.The Domain Specific Language (DSL) was inspired by Semgrep. Solsearch can be thought of as a highly specialized semgrep for Solidity. It understands the nitty-gritty annotations that the solidity compiler internally creates for the program. Working directly with the solidity AST can be powerful",
      "FIELD23": " as it has plenty of rich details about the language.Once the DSL and the AST could be internally represented",
      "FIELD24": " it was a matter of building the pattern matching engine for it. For the MVP",
      "FIELD25": " I decided to just support the pattern matching engine just for the AST node functionCalls. The DSL has support for a few more type of AST nodes",
      "FIELD26": " but both do not completely support every AST node type from Solidity. Completing this would be a more ambitious project that would take around 2 weeks. The future plans are listed in the GitHub repo.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 117,
    hackathon: "ETHGlobal Tokyo",
    title: "Shima ",
    more: "https://ethglobal.com/showcase/shima-n10ac",
    demo: "https://shima-vercel.vercel.app/",
    repo: "https://github.com/kasarlabs/shima-hackaton",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏆 Celo — Wildcard 🧱 Taiko — 🥇 Best Infrastructure ",
    short: "Shima is a decentralized RPC platform that connects anyone who wants to become an RPC provider by making their blockchain infrastructure available to the world and those who use these APIs access to the blockchain networks every day without having to run their own nodes.",
    description: "We believe that running and hosting nodes should not be something limited to classic infrastructure providers such as Alchemy",
      "FIELD11": " Infura",
      "FIELD12": " Chainstack",
      "FIELD13": " etc. since anyone with some knowledge of blockhain development can deploy a node in a few minutes. That's why we decided to make it even more accessible by supporting providers and users in their blockchain development journey. Shima is a decentralized RPC platform that connects anyone who wants to become an RPC provider by making their blockchain infrastructure available to the world and those who use these APIs access to Ethereum and other blockchain networks every day without having to run their own nodes.How does it work? To explain Shima we will proceed in 2 parts",
      "FIELD14": " first what we have set up for people who want to become Shima Actor (rpc providers) and then we will see the Shima Users part.Today to set up a node on any blockchain it can take you 5min to several hours",
      "FIELD15": " that's why we first set up a graphical interface installer that allows anyone who only need to knows how to open a terminal to create a node between the available blockchains clients: Ethereum",
      "FIELD16": " Gnosis",
      "FIELD17": " Scroll",
      "FIELD18": " Mantle",
      "FIELD19": " Celo",
      "FIELD20": " Taiko",
      "FIELD21": "...  and expose it on a port of his machine in a few clicks and in less than a minute. This installer generates an url that the provider can enter in his provider space on the Shima interface to make it accessible to the world. Those referenced rpcs by the providers will then be stored on a leaderboard specific to each chains. This leaderboard is very important because it allows to provide the users of these RPCs with the best possible route for their requests. The leaderboard works the following: It ranks available RPC providers based on their response time  quality and availability. It helps users and applications choose the most suitable RPC provider for their needs",
      "FIELD22": " ensuring faster performance and lower latency. We follow 3 steps to sort it: 1. Data Collection",
      "FIELD23": " the system collects data on the response time (latency) for each RPC provider. This can be done using automated monitoring tools or by measuring the time it takes for the provider to respond to a specific request",
      "FIELD24": " such as eth_blockNumber. 2. Ranking: The RPC providers are ranked based on their response time",
      "FIELD25": " with the provider with the lowest response time at the top of the leaderboard. Users and applications can then choose providers based on their position in the ranking. 3. Update: The leaderboard is updated periodically to account for changes in provider response time",
      "FIELD26": " ensuring that the ranking remains accurate and up-to-date. This allows users and applications to make informed decisions when choosing RPC providers. By utilizing the RPC leaderboard",
      "FIELD27": " users and applications can easily be redirected to the fastest RPC providers",
      "FIELD28": " resulting in a better overall experience and more efficient use of resources. In the future",
      "FIELD29": " other factors could be incorporated into the ranking system to provide a more comprehensive evaluation of RPC providers such as it's availability",
      "FIELD30": " it's reliability",
      "FIELD31": " the actual state it stored",
      "FIELD32": " the functionability",
      "FIELD33": " it's errors and disconnections... This leaderboard is then linked to the users' Shima RPC keys.As for the user interface",
      "FIELD34": " we did not want to complicate things by re-inventing the RPC key generation interface",
      "FIELD35": " so we kept something very similar to the current RPC providers. The user can simply create a project by selecting the chain he wants to deploy it and giving a name to it and then the platform generates a Shima key that he can use in it's applications and interact with the blockchain world.Like any other RPC provider",
      "FIELD36": " the nodes performances and user stats will be tracked and displayed in dashboards on the interface. We need to track this data because like other RPC providers we offer paid solutions based on successful request units for both parties. The user can then recharge his account via a smart-contract payment that we have deployed on the Celo blockchain and when he will have exceeded his quota of free requests per month it will be debited and redisplayed to the corresponding providers. This system encourages providers to participate in the network by allowing them to take advantage of their distributions and users to take advantage of this competition by benefiting from the most efficient nodes.With this system we built with Shima we can claim to set up in the future a truly decentralized system where users will be able to execute their queries directly to the most efficient users by updating this leaderboard locally via an SDK for development or extensions of dapps.We believe that Shima is a huge step towards the decentralization of the network without taking into account the centralized RPC provider and their markets. Shima gives users back control of the Blockchain! The Shima project benefits from its diverse and robust technical stack",
      "FIELD37": " which enhances its functionality",
      "FIELD38": " performance",
      "FIELD39": " and ease of use for both users and providers.Backend: The Express application",
      "FIELD40": " written in TypeScript",
      "FIELD41": " serves as a reliable and efficient core for the platform. By using TypeScript",
      "FIELD42": " the code is more maintainable",
      "FIELD43": " readable",
      "FIELD44": " and scalable",
      "FIELD45": " allowing the Shima team to develop new features and improvements faster. The backend handles API requests and manages user and provider data effectively",
      "FIELD46": " ensuring a seamless experience for users when interacting with the platform.Node Installer: The Bash-based node installer enables providers to quickly and easily set up blockchain nodes",
      "FIELD47": " reducing the barrier to entry for those looking to become RPC providers. By streamlining the node installation process",
      "FIELD48": " the platform encourages greater decentralization and a broader range of providers",
      "FIELD49": " ultimately enhancing the resiliency and performance of the Shima ecosystem.Payment Smart Contract: (address:0x13BB753567Eaf68A760D6e92e52323DC23904765 on Celo) The Solidity-based smart contract ensures secure and transparent transactions between users and providers. By using a blockchain-based approach to payments",
      "FIELD50": " Shima guarantees that users can manage their account balances and usage quotas with confidence",
      "FIELD51": " while providers receive fair compensation for their services. This fosters trust in the platform and promotes its continued growth and adoption.Frontend: The React-based frontend offers a user-friendly interface that simplifies interaction with the platform. By employing reusable UI components and efficient rendering and updating processes",
      "FIELD52": " the frontend enables users to create projects",
      "FIELD53": " manage their keys",
      "FIELD54": " and monitor usage with ease. The frontend's communication with the backend through API endpoints ensures a smooth and responsive experience",
      "FIELD55": " which further enhances user satisfaction.By leveraging these technologies",
      "FIELD56": " the Shima project creates a powerful",
      "FIELD57": " accessible",
      "FIELD58": " and efficient decentralized RPC platform that caters to the needs of both users and providers. The platform's technical stack ensures a secure",
      "FIELD59": " scalable",
      "FIELD60": " and user-friendly experience",
      "FIELD61": " promoting wider adoption and fostering a thriving ecosystem of decentralized RPC services.",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 118,
    hackathon: "ETHGlobal Tokyo",
    title: "Zaisan",
    more: "https://ethglobal.com/showcase/zaisan-6dxue",
    demo: "https://github.com/Complexia/zaisen-ui-new",
    repo: "https://github.com/gabrielantonyxaviour/zaisan-blockend ",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 Worldcoin — Pool Prize 🥉 Sismo — Best ZK Badge or Data Hack 🏊‍♂️ Polygon — Pool Prize 🤝 Hyperlane — Best use of Permissionless Interoperability ",
    short: "Create promotions. Earn rewards without revealing data. Build the infinite community.",
    description: "This project provides the ability for any user to create his own Promotion event and a custom POAP to be minted on his own network. Any user or claimer can aggregate any amount of private data in his private vaults and generate proofs without revealing his data. We are EVM chain-agnostic. We can aggregate data in any given EVM network. One has to add the RPC URL and chain ID to setup a new chain to aggregate data in their vaults. One can also aggregate off-chain data from data sources like Github",
      "FIELD11": " Twitter etc. Our dApp is a social media application which means one can view promotions for his NFT collection in the dApp. Each promotion will be a post enabling people to build a community around it. Our project being chain-agnostic is deployed on various chains and can be deployed to any other new EVM network by any user at any time. We have built our architecture in such a way that it is completely adaptable to add a new chain to aggregate data. We deployed our main contract on Polygon POS and cross-chain contracts on Scroll",
      "FIELD12": " PolygonZkEVM",
      "FIELD13": " Mantle",
      "FIELD14": " Alfajores",
      "FIELD15": " Chiado. We deployed hyperlane across all these chains so that we could mint custom souldbound NFTs on the respective chain on successful collection of a promotion claim. We used the Metamask SDK to connect with the wallet and interact with the smart contracts. We built with Sismo to build the data vaults. Sismo being our key sponsor. We built some new data groups and created 2 template contracts which could listen to any NFT and Token contract on any given EVM chain and aggregate the data.  We used Worldcoin to uniquely identify each person so that no two persons can claim the same rewards. A promotion can be an on-chain condition aggreagated by Alchemy and Token Providers on Ethereum",
      "FIELD16": " Polygon and Goerli. We have deployed our template groups in Sismo Hub. Anyone can use the data group to whitelist people for any event",
      "FIELD17": " reward or any on-chain privelages. We used Lens Protocol as the social interaction layer of our dApp enabling people to create Promotions as a Post and interact with the community as a whole. We used AirStack to fetch NFTs from Ethereum to be displayed in our profile.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 119,
    hackathon: "ETHGlobal Tokyo",
    title: "MLMP",
    more: "https://ethglobal.com/showcase/mlmp-96ncx",
    demo: "https://www.youtube.com/watch?v=mEROkjCPNIw",
    repo: "https://github.com/Jahanshah1/MachineLearning-marketplace-platform",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Discover a decentralized platform for secure ML data storage using IPFS & web3.storage. Ensuring data integrity",
    description: " transparency",
      "FIELD11": " and quality",
      "FIELD12": " our marketplace fosters collaboration",
      "FIELD13": " monetization",
      "FIELD14": " and accelerates ML projects in a trusted ecosystem.",
      "FIELD15": "This project presents a decentralized platform for managing and sharing machine learning data using IPFS and web3.storage. The platform focuses on addressing data security",
      "FIELD16": " integrity",
      "FIELD17": " and accessibility challenges prevalent in the machine learning community.The system leverages the benefits of decentralized storage",
      "FIELD18": " ensuring data remains tamper-proof and clean",
      "FIELD19": " which is crucial for reliable model development. By removing single points of failure and censorship risks",
      "FIELD20": " the platform guarantees data availability and resilience.One key aspect of this project is the transparent provenance feature",
      "FIELD21": " which allows users to trace dataset origins and history. This fosters trust in the data and ensures users can confidently build upon it without concerns about copyright infringement or potential biases.In addition to secure data storage",
      "FIELD22": " the platform offers a marketplace for users to exchange datasets. This encourages collaboration",
      "FIELD23": " knowledge sharing",
      "FIELD24": " and joint problem-solving among machine learning practitioners",
      "FIELD25": " researchers",
      "FIELD26": " and enthusiasts. This project uses",
      "FIELD27": " HTML/CSS and React.js for the frontend",
      "FIELD28": " and TailwindCSS for styling. It integrates WorldCoin and Polygon for blockchain functionality and Privacy-Preserving-Proof-Of-Personhood-Protocol (PPPoP) and uses Solidity for smart contract development. The platform connects to decentralized storage through IPFS and web3.storage. Metamask and Rainbowkit serve as browser-based wallets",
      "FIELD29": " facilitating transactions.",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 120,
    hackathon: "ETHGlobal Tokyo",
    title: "LINKSTART",
    more: "https://ethglobal.com/showcase/linkstart-fkdua",
    demo: "https://link-start-app.vercel.app/",
    repo: "https://github.com/ETH-Tokyo-2023-LS/Link-Start-App",
    video: "",
    winner: "",
    short: "We manage secret key at lit protocol and create AA（ERC4337） wallet from google account by stackup and access to web3 services and do web3 actions by its  AA wallet on LINKSTART.",
    description: "We manage secret key at lit protocol and create AA（ERC4337） wallet from google account by stackup and access to web3 services and do web3 actions by its  AA wallet on LINKSTART.LIKSTART  wallet is super easy to create tied to own google account and LINKSTART explorer supports you to access to web3 world smoothly by its AA wallet.By creating AA wallet from google account and LINKSTART explorer",
      "FIELD11": " LINKSTART onboard mainstream users into web3.Exisiting wallet is a little be hard for mainstream users to set-up",
      "FIELD12": " manage secret key",
      "FIELD13": " and explore web3 world without any supports.This is not enough onboarding experience. In our word",
      "FIELD14": " ’onboarding into web3’ means settling mainstream users in web3.To build the ideel onboarding experience",
      "FIELD15": " we provide not only creating AA wallet from google account super easily",
      "FIELD16": " but also LINKSTART explore for mainstream users to show the right way to get into web3 and enjoy web3 world. Also",
      "FIELD17": " LINKSTART has action page where user can swap FT",
      "FIELD18": " trade NFT by very simple UI/UX by uniswap and opensea are running in backend.Using LINKSTART",
      "FIELD19": " we can onboard next billion users to web3 without no fliction and  become a entrance and hub for mainstream users to access to web3 world",
      "FIELD20": " adding valuable web3 services on explorer page and web3 native actions on action page.In addition to that",
      "FIELD21": " more and more users use our explore",
      "FIELD22": " we can recommend dapps more and more personalized by token graph recommendation.Here’s usecases and functions of LINKSTART＜Usecase＞😀usersuser can access to basic web3 functions(token swap",
      "FIELD23": "NFT trade",
      "FIELD24": " NFT airdrop)  and web3 app/game super easily by LINKSTART.🤓NFT projectsthey can Airdrop to our mainstream users who do not have wallet.😎web3 game/applicationif they are on  our explorer page",
      "FIELD25": " they can access to mainstream users who do not have wallet.😋businessesthey can onboard their users to web3  very smoothly by creating contract wallet from social id.＜Function＞🐶creating contract wallet from google account・user do not have to manage secret key🐱asset page：user can easily check own asset・user can check own asset(FT/NFT)🐭action page：user can easily do web3 actions・token(FT) swap（uniswap run in the backend）・NFT trade（opensea run in the backend）🐹explorer：user can easily access to web3 services・search engine（now）・access to web3 services like opensea",
      "FIELD26": " uniswap and lens protocol easily on this page（coming soon）※in near future",
      "FIELD27": " we definitely add another sign-up options like twitter",
      "FIELD28": " facebook and anything else. We manage secret key at lit protocol and create AA（ERC4337） wallet from google account by stackup and access to web3 services and do web3 actions by its  AA wallet on LINKSTART.tech stackFE: Next.js(TypeScript)",
      "FIELD29": " React",
      "FIELD30": " tailwind cssBE: Node.js(TypeScript)Blockchain: ether.js ",
      "FIELD31": " hardhat",
      "FIELD32": " solidity",
      "FIELD33": "Tools used: stackup(Account Abstraction)",
      "FIELD34": " litprotocol",
      "FIELD35": " Alchemy",
      "FIELD36": " Google Cloud",
      "FIELD37": " Vercel",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 121,
    hackathon: "ETHGlobal Tokyo",
    title: "Megaxis",
    more: "https://ethglobal.com/showcase/megaxis-wvxrq",
    demo: "",
    repo: "https://github.com/megaxis-for-ethtokyo",
    video: "",
    winner: "🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize 💻 FVM — Compute over Data ",
    short: "the decentralized platform for tokenizing AI prompts. With the integration of Web3 infrastructure and tokenomics",
    description: " MEGAxis creates a new revenue stream for prompt engineers while also making the AI industry more accessible",
      "FIELD11": " efficient",
      "FIELD12": " and sustainable.",
      "FIELD13": "We believe that AI and Web3 together can bring unprecedented changes to the online economy. In the use case of the generative AI industry",
      "FIELD14": " it will be exciting to create a prompt marketplace on a decentralized chain",
      "FIELD15": " fueled and sustained by Web3 tokenomics.MEGAxis team observed a huge potential market for prompt engineers in the future. As OpenAI",
      "FIELD16": " Midjourney and many other AI generative tools have taken the stage recently",
      "FIELD17": " we see the rampant growth in demand for high-quality prompts that can help train AI models to produce accurate and useful results. However",
      "FIELD18": " creating effective prompts requires a deep understanding of the nuances of language and context",
      "FIELD19": " as well as the large language model . It can be a challenging task to craft prompts that are precise and unambiguous. Furthermore",
      "FIELD20": " developing effective prompts is not a one-time task. As AI models continue to learn and evolve",
      "FIELD21": " there is a need for ongoing refinement and optimization of prompts. Talents will be urgently needed to craft good prompts.Tokenizing prompts can actualize the potential market. MEGAxis can create a marketplace where prompt engineers can earn tokens for creating and selling high-quality prompts. The better their prompts perform",
      "FIELD22": " the more valuable their tokens become. MEGAxis can also use Web3 tokenomics to create a community around the platform. For example",
      "FIELD23": " users who hold tokens could be given voting rights on platform decisions",
      "FIELD24": " upvote and downvote prompts. This not only makes the platform more fun for users",
      "FIELD25": " but also encourages community engagement and investment in the platform's success.The industrial value of tokenizing prompts is that it will make the AI industry fairer",
      "FIELD26": " more accurate",
      "FIELD27": " and more efficient. MEGAxis creates a level playing field where developers of all sizes can contribute to the industry and earn income from their work. This can also allow developers to build upon existing prompts",
      "FIELD28": " avoid common mistakes",
      "FIELD29": " and refine their models to be more accurate. By using existing NFTs and building on them to create more advanced models",
      "FIELD30": " developers can save time",
      "FIELD31": " reduce costs",
      "FIELD32": " and ultimately lead to faster development of AI models. Smart contract:MEGAxis uses smart contracts written in Solidity",
      "FIELD33": " deployed by hardhat. We're building on the Polygon testnet Mumbai[1] and the Celo testnet Alfajores.Store Prompt NFT dataWe store our data on Filecoin to ensure maximum security and decentralization.Indexing protocolWe integrate[3] with The Graph indexing protocol to create subgraphs that allow users to easily query prompt data and optimize their AI models.[1] prompt-nft：https://mumbai.polygonscan.com/address/0xd8f65552dE03BA8366B4b646B4EA2b3045fE2721#codeprompt-nft-market：https://mumbai.polygonscan.com/address/0xe556Cf4F063274AAbE136b1eE8b8b1A9021e639A#code[2] prompt-nft：https://mumbai.polygonscan.com/address/0xd8f65552dE03BA8366B4b646B4EA2b3045fE2721#codeprompt-nft-market：https://alfajores.celoscan.io/address/0xe556Cf4F063274AAbE136b1eE8b8b1A9021e639A[3] filecoinprompt-nft：https://hyperspace.filscan.io/address/general?address=0x86929a4634CbB0f9c4c77cE0Ae9987D70144Ce0Bprompt-nft-market：https://hyperspace.filscan.io/address/general?address=0xba6fbbAB59C04aacde97831Df2C8f903E5c8849E",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 122,
    hackathon: "ETHGlobal Tokyo",
    title: "MINAmal VRF",
    more: "https://ethglobal.com/showcase/minamal-vrf-ap9t9",
    demo: "https://minamalvrf.vercel.app/demo",
    repo: "https://github.com/zKatcha/zKatcha",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 🥈 Mina — Best Use 🥇 Mantle — Build Use ",
    short: "A Library that provides developers with Trustless Verifiable Randomness proven by Recursive ZK Technology",
    description: "Motivation:Randomness is essential in many applications. It’s what underpins cryptography",
      "FIELD11": " makes sampling fair and generates the unpredictability and excitement we love in games.Problem Statement:Current random generators either require trust",
      "FIELD12": " are extremely expensive or overkill for a lot of applications. Just as there are many different uses for randomness",
      "FIELD13": " there is also a need for different sources of randomness.Design Statement:To develop a zero knowledge library that is able to provide trustless verifiable randomness that is free and easy to implement.Solution:MINAmal VRF is a library of functions to allow developers to quickly implement trustless randomness in their projects. Randomness is generated through an amalgamation of hashed secrets from the participating users and cycles to include the previous random numbers as each round of generation is required.A ZK proof is created to verify that the randomness was fairly generated. For on-chain verification",
      "FIELD14": " the Mina protocol is used for it’s recursive ZK proof system. A relayer was built to allow the proof to be access from any other chain.To empower developers",
      "FIELD15": " an SDK was built for easy implementation.Further Improvements:The custom built relayer will need to be replace with MINA state bridge once the MINA state bridge is ready.Provide MINAmal VRF as a serviceBuild privacy features to hide the seedBuild escalating odds function to improve library offering This project consists of 3 key components and 2 smart contracts deployed across 6 different chains.The first is a library that allows people to easily build trustless verifiable randomness into their applications. This library is built using MINA SnarkyJS which allows us to quickly verify the proof using MINA’s Kim Chi’s recursive proving system. The randomness that is generated cannot be controlled by any party nor is it predictable due to our custom built Natto Interactive Random Protocol. The Natto Interactive Random Protocol is defined by the following formula:Σ((Secret Hash₁)",
      "FIELD16": " (Secret Hash ₂)",
      "FIELD17": "(Secret Hash₃)) = Initial HashRandom 1 = R((Secret₁)",
      "FIELD18": " Initial Hash))Random 2 = R((Secret₂)",
      "FIELD19": " Initial Hash",
      "FIELD20": " Random 1)Random 3 = R((Secret₃)",
      "FIELD21": " Initial Hash",
      "FIELD22": " Random 2)The commitment of an Initial Hash prevents players from changing their secret in subsequent turns as this would cause the Initial Hash to not match in the proof.The second component in this project is the custom relayer. The relayer takes the Proof generated by MINA and provides verification before sending it to the destination EVM chains. The relayer is a temporary solution due to the Mina EVM bridge not yet being available.The third component of this project is a front end game of Texas Holdem to demonstrate the use of MINAmal VRF. The front end is built with a dashboard to display the current Hash of each player and the current random generated. This is shown alongside the Texas Holdem game and displays in real time the backend values as each card is dealt.In addition to the 3 components",
      "FIELD23": " 2 types of smart contracts have been deployed across 6 different EVM chains. The first smart contract is a universal relayer smart contract which facilitates the receival of the verified proof from the relayer. The second smart contract is an EVM Proof Channel which allows participants to publicise their proof. This channel allows the participants to trustlessly cross verify that the random numbers have not been tampered with.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 123,
    hackathon: "ETHGlobal Tokyo",
    title: "Uwabe",
    more: "https://ethglobal.com/showcase/uwabe-92hme",
    demo: "https://uwabe.vercel.app/",
    repo: "https://github.com/0xkusari/uwabe",
    video: "",
    winner: "",
    short: "Uwabe is a UI tool for smart contracts. Once you have created a smart contract",
    description: " you need to think about the UI to get people to use it. If you create a smart contract",
      "FIELD11": " no matter how great it is",
      "FIELD12": " if people don't know how to use it",
      "FIELD13": " it will never reach many people.",
      "FIELD14": "Uwabe (上辺) is a UI tool developed to make handling smart contracts more intuitive. This makes it easier to visually understand the functionality of smart contracts and to execute functions with ease. It is very simple to use and allows users to utilize Uwabe by simply entering the contract address. This makes it easy for anyone to utilize smart contract functions.Uwabe also allows configuration information to be stored on-chain as tokens",
      "FIELD15": " which can then be referenced by other users and platforms. This makes it easier to share smart contract usage and settings. Uwabe is a tool that makes smart contracts more accessible to a wider audience. TypeScript and Next.js were used to create the front-end application.For the connection to the wallet",
      "FIELD16": " the relevant functionality from the MetaMask SDK was used.The etherscan API was used to retrieve contract information for the testnet and mainnet. Hardhat was used to deploy smart contracts.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 124,
    hackathon: "ETHGlobal Tokyo",
    title: "Report Card 〜for the web3 Community〜",
    more: "https://ethglobal.com/showcase/report-card-for-the-web3-community-i53rp",
    demo: "https://youtu.be/nleMn05CyqY",
    repo: "https://github.com/UnyteDAO/report-card",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Revolutionize DAO task management & gratitude on blockchain. Built with React",
    description: " ethers.js",
      "FIELD11": " Material UI & Emotion. Boost collaboration on Polygon & EVM networks",
      "FIELD12": " while ensuring transparency & decentralization in recognizing contributions. Elevate DAO communities!",
      "FIELD13": "Introducing a groundbreaking solution for Decentralized Autonomous Organizations (DAOs) tailored for hackathon judges! Our platform is designed to create",
      "FIELD14": " manage",
      "FIELD15": " and appreciate tasks while expressing gratitude for valuable contributions. Built with a core stack of React",
      "FIELD16": " ethers.js",
      "FIELD17": " Material UI",
      "FIELD18": " and Emotion",
      "FIELD19": " this service fosters a collaborative environment for DAO communities on Polygon and other EVM networks. This innovative blockchain-based solution ensures transparency and decentralization in recognizing and recording the efforts of task contributors. With a seamless and efficient way to appreciate each other's work",
      "FIELD20": " our platform empowers DAO communities to drive positive impact and further their mission. We are excited to present our hackathon project",
      "FIELD21": " which showcases the power of combining modern web technologies with blockchain networks to revolutionize the way DAOs operate. Together",
      "FIELD22": " let's elevate DAO communities and transform the way they collaborate and appreciate their members' contributions! Frontend: We used React as our primary UI library for building the user interface components. Material UI was chosen for its extensive collection of pre-built components and Emotion for styling",
      "FIELD23": " making it easier to create a responsive and visually appealing design.Backend: For connecting with the blockchain",
      "FIELD24": " we relied on ethers.js as our JavaScript library. It enabled us to interact with Ethereum-based networks such as Polygon and other EVM-compatible networks",
      "FIELD25": " allowing us to manage tasks and record gratitude expressions on the blockchain.Sponsor Technologies: We leveraged Polygon as our primary network",
      "FIELD26": " which provided several benefits",
      "FIELD27": " including faster and cheaper transactions compared to the Ethereum mainnet. This significantly improved the user experience by reducing wait times and costs associated with transactions.Hacky Solutions: One notable hacky solution we implemented was to create a dynamic system for fetching and decrypting data from the blockchain. Instead of making separate calls for each data piece",
      "FIELD28": " we used Promise.all to fetch data concurrently",
      "FIELD29": " significantly reducing the overall fetching time.Integration: The frontend and backend components were integrated using a combination of hooks and custom functions. We used useCallback and useEffect hooks for managing side effects",
      "FIELD30": " such as fetching data from the blockchain and updating the UI accordingly.By carefully selecting and combining these technologies",
      "FIELD31": " we built a powerful",
      "FIELD32": " efficient",
      "FIELD33": " and user-friendly platform for managing tasks and expressing gratitude within DAO communities. Our project showcases the potential of blockchain technology in fostering collaboration and promoting transparency in decentralized environments.Core Stack-- React-- ethers.js-- Material UI-- EmotionSupported Networks-- polygon and any EVM",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 125,
    hackathon: "ETHGlobal Tokyo",
    title: "ETHFarm",
    more: "https://ethglobal.com/showcase/ethfarm-mc4u0",
    demo: "https://predyprotocol.github.io/ethglobaltokyo/",
    repo: "https://github.com/predyprotocol/ethglobaltokyo",
    video: "",
    winner: "🥈 The Graph — Best use of Existing Subgraph ",
    short: "ETH Farm: A DeFi-gaming fusion where players farm virtual mushrooms representing Uniswap v3 fees. Buy plants with USDC",
    description: " earn & harvest fees. Powered by Predy Finance v3.2 & Graph protocol. A seamless blend of gaming & DeFi! ",
      "FIELD11": "Project Submission for HackathonProject Name: ETH FarmProject Type: GamingOverview:ETH Farm is an innovative gaming platform that merges the excitement of gaming with the real-world benefits of decentralized finance (DeFi). Utilizing Uniswap v3 LP positions",
      "FIELD12": " the Graph protocol",
      "FIELD13": " and Predy Finance",
      "FIELD14": " ETH Farm allows players to farm virtual mushrooms that represent the fees earned from Uniswap. The gaming experience is seamlessly integrated with DeFi",
      "FIELD15": " creating a unique and engaging project.Prerequisite:Participants must already have a main vault with Predy Finance v3.2. To set up a main vault",
      "FIELD16": " connect to Predy Finance (https://app.predy.finance/) with MetaMask",
      "FIELD17": " approve",
      "FIELD18": " and deposit USDC.Gameplay Description:ETH Farm is centered around farming virtual mushrooms",
      "FIELD19": " which represent the fees generated from leveraged Uniswap LP positions. To begin the game",
      "FIELD20": " players must purchase a plant using USDC. This action is equivalent to providing liquidity to the Uniswap v3 ETH-USDC trading pair and earning fees in the form of mushrooms. Once the mushrooms have grown",
      "FIELD21": " players can harvest them",
      "FIELD22": " effectively closing their Uniswap v3 LP position and withdrawing the fees earned as real assets.Technical Implementation:The backend transactions for ETH Farm are powered by Predy Finance v3.2",
      "FIELD23": " a leveraged Uniswap v3 LP automated market maker (AMM) system. The Graph protocol is used to support the project",
      "FIELD24": " ensuring smooth and efficient data management. This unique combination of gaming and DeFi creates a truly composable project that bridges the gap between entertainment and finance.ETH Farm showcases the potential for interactive gaming experiences that also provide tangible financial benefits for users. By leveraging cutting-edge DeFi technologies",
      "FIELD25": " this project is set to revolutionize the gaming landscape and inspire further innovation in the space. How It's Made: ETH FarmConceptualization:We envisioned a gaming experience that combines DeFi elements with fun and interactive gameplay",
      "FIELD26": " resulting in the idea of farming virtual mushrooms representing Uniswap v3 fees.Design & Development:Our team designed the user interface and gameplay mechanics",
      "FIELD27": " focusing on a seamless and enjoyable experience. We integrated Predy Finance v3.2 and the Graph protocol to handle backend transactions and data management.Integration of DeFi Components:We connected ETH Farm with Uniswap v3 LP positions to allow players to provide liquidity using USDC and earn fees as mushrooms. Predy Finance v3.2",
      "FIELD28": " a leveraged Uniswap v3 LP AMM system",
      "FIELD29": " was used to handle the backend transactions for the game.Testing & Optimization:Rigorous testing was conducted to ensure a smooth and engaging gaming experience. We identified and fixed any bugs",
      "FIELD30": " optimized the platform for various devices",
      "FIELD31": " and ensured that the DeFi components were functioning correctly.Deployment & Launch:With thorough testing and optimization completed",
      "FIELD32": " ETH Farm was deployed and launched for users to enjoy. The project showcases the potential for interactive gaming experiences that provide tangible financial benefits and paves the way for future innovation in DeFi gaming.",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 126,
    hackathon: "ETHGlobal Tokyo",
    title: "Kyosou",
    more: "https://ethglobal.com/showcase/kyosou-zzxss",
    demo: "https://kyosou-atakedemo.vercel.app/",
    repo: "https://github.com/atakedemo/kyosou",
    video: "",
    winner: "",
    short: "Decentralized platform to organize fair and free contests like hackathons ",
    description: "Musicians register their songs to a smart contract set up by the contest organizer",
      "FIELD11": " and participants vote and throw in their votes for the songs.After a predetermined period of time",
      "FIELD12": " prizes will be awarded to the top performers",
      "FIELD13": " and all musicians will be able to receive money from the smart contract.(The ability for contest organizers to freely set up contests as smart contracts like Uniswap will be implemented later.) For the backend",
      "FIELD14": " a standard token built by Bunnz and a smart contract on Polygon (testnet) that manages the ratings and rewards for each piece of music.For the front end",
      "FIELD15": " Next.jst and Ethers.jsn implement the following two categories of functions.Contest participants (musicians): Registration of musicAudience: Voting and contribution",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 127,
    hackathon: "ETHGlobal Tokyo",
    title: "安定",
    more: "https://ethglobal.com/showcase/-x8q1p",
    demo: "https://www.xn--49s8a.jp/",
    repo: "https://github.com/maceip/antei",
    video: "",
    winner: "",
    short: "Antei: trustless liquid vaults leveraging ethereum account abstraction BLS signatures",
    description: "Antei vaults are controlled by a network of erc-4332 BLS smart contract wallets",
      "FIELD11": " and for every vote-Escorewed or locked token you deposit",
      "FIELD12": " our network will mint a GHO token",
      "FIELD13": " leveraging 1inch fusion. Our first interface we supported is Velodrome a DEX where users lock VELO tokens",
      "FIELD14": " where they then receive a NFT. We started with Gnosis and Safe but they didn't support the networks we wanted to so we moved to Lit and a few other open source libraries. We waned to build a Metamask snap to enable BLS signing but didn't have time. We burned a bunch of time trying to deplouy our own account abstraction contracts on Gnosis Testnet but their nodes dont support it.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 128,
    hackathon: "ETHGlobal Tokyo",
    title: "Great Gas Grants",
    more: "https://ethglobal.com/showcase/great-gas-grants-vigiv",
    demo: "https://github.com/taijusanagi/2023-ethtokyo-submission",
    repo: "https://github.com/taijusanagi/2023-ethtokyo-submission",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize 🆔 Polygon — Best use of Polygon ID 🏊‍♂️ Polygon — Pool Prize ",
    short: "Great Gas Grants is an innovative",
    description: " credential-based gas grants service that harnesses the power of the Account Abstraction Paymaster to provide users with access to gas grants tailored to their credentials.",
      "FIELD11": "Great Gas Grants offers an innovative solution for funding gas fees",
      "FIELD12": " powered by our new Account Abstraction Paymaster with credential-based verification. Now",
      "FIELD13": " it's easier than ever for community members to join the Web3 ecosystem.Key Features:Smooth Web3 OnboardingAccess to Learning ResourcesCommunity EmpowermentDeveloper Grant OpportunitiesOur platform is Sybil attack-resistant and utilizes the Account Abstraction Paymaster for credential-based verification. Seamlessly integrating with services like Polygon ID and Worldcoin",
      "FIELD14": " it provides granting and verification processes that respect user privacy while ensuring the use of valid credentials. Credential-Based Account Abstraction PaymasterOur platform utilizes a custom Account Abstraction Paymaster to verify user credentials on-chain. Once the credentials are successfully confirmed",
      "FIELD15": " the smart contract sponsors the transaction",
      "FIELD16": " allowing only eligible users to benefit from the gas grants.We have adopted the ERC4337 0.5.0 smart contract standard and bundler for efficient transaction handling. To accelerate the wallet app's development",
      "FIELD17": " Great Gas Grants employed Trampolin",
      "FIELD18": " a widely-used quick-start solution.Polygon ID and Worldcoin for Credential ServicesGreat Gas Grants integrates both Polygon ID and Worldcoin as credential services to verify user eligibility",
      "FIELD19": " ensuring privacy and security for users' data.WorldcoinGreat Gas Grants employs Worldcoin to confirm that users are human and not bots",
      "FIELD20": " adding a layer of Sybil resistance. This approach prevents individuals from creating multiple accounts to access the same grants repeatedly",
      "FIELD21": " upholding fairness and equal opportunity for all eligible users on the platform.The platform has integrated the 'Sign in with Worldcoin' feature for user authentication",
      "FIELD22": " streamlining the login process. Additionally",
      "FIELD23": " it incorporates on-chain verification within the paymaster smart contract",
      "FIELD24": " offering a secure and efficient method to verify credentials and manage gas grants for eligible users.PolygonIDGreat Gas Grants utilizes Polygon ID to generate ETHTokyo Participant credentials",
      "FIELD25": " allowing community members to create grants for all attending hackers. This enables participants to benefit from sponsored Account Abstraction (AA) transactions through Polygon ID. The platform integrates custom credential issuance and verification within the frontend and wallet for a seamless user experience.While attempting to incorporate on-chain verification with the paymaster",
      "FIELD26": " the team faced challenges interacting with browser extension AA wallets due to Polygon ID app specifications.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 129,
    hackathon: "ETHGlobal Tokyo",
    title: "Splend",
    more: "https://ethglobal.com/showcase/splend-yb3d1",
    demo: "https://www.usesplend.xyz",
    repo: "https://github.com/spennyp/eth-tokyo-hackathon",
    video: "",
    winner: "📜 Scroll — Just Deploy 🥇 The Graph — Best New Subgraph 🏊‍♂️ Polygon — Pool Prize ",
    short: "A decentralized peer to peer lending protocol to connect social impact conscious lenders to borrowers who do not have access to capital",
    description: "Splend is a new microfinance lending protocol which aims to tackle some of the challenges of the microfinance market. Based on market research",
      "FIELD11": " and also personal experiences of one of our team members (Ben)",
      "FIELD12": " it became evident to us that this is an important problem worth solving. Specifically",
      "FIELD13": " based on research",
      "FIELD14": " only 8% of the unbanked $1.4B actually have access to micro finance",
      "FIELD15": " and because of the predatory nature of these loans (often ranging from 20%-40%)",
      "FIELD16": " borrowers often end up defaulting.We think that decentralized blockchain technology can open up access to borrowers who live in capital constrained environments. And we also incorporated a peer-to-peer aspect",
      "FIELD17": " with interest rates ranging from 0%-3%",
      "FIELD18": " making it a quality opportunity for borrowers looking to use some leverage to build something meaningful.Keeping the user experience in mind for both the borrower and lender",
      "FIELD19": " we’ve built an easy to use dApp where borrowers can create a loan proposal in less than 10 minutes which includes specific deal terms such as term length and rate",
      "FIELD20": " a marketplace where both lenders and borrowers can check out a repository of loans",
      "FIELD21": " and an instant funding mechanism which transfers the loan amount from the lender to borrowers as soon as the lender decides to fund a project. Borrowers must then pay back the loan within the set term length with their principal + interest.We believe that this opportunity allows social impact focused lenders to invest in people and communities they believe in",
      "FIELD22": " while giving borrowers access to capital in an ethical way. We used ConnectKit to be EVM compatible and to provide a wallet solution in our application and quickly scaffolded with React",
      "FIELD23": " NextJS",
      "FIELD24": " Supabase (backend psql)",
      "FIELD25": " TailwindCSS",
      "FIELD26": " and Chakra UI to create our MVP. Our designer Richa created wireframes on Figma for our MVP and SLP (sufficiently lovable product). For our smart contracts",
      "FIELD27": " Spencer used Foundry to develop",
      "FIELD28": " test",
      "FIELD29": " build",
      "FIELD30": " and deploy our lending protocol on multiple EVM chains. Spencer additionally created complex subgraphs using The Graph in order to read our data from the blockchain. Ben handled most of our frontend/fullstack work and lived in our NextJS project in order to produce a visually appealing and functional user experience.We aggressively prioritized low hanging fruit and shipping over everything. We employed iterative design principles",
      "FIELD31": " developed processes for team consensus and product alignment",
      "FIELD32": " and remained disciplined in our focus to develop a sophisticated app backend + smart contract infrastructure in order to remain efficient under mounting time and resource constraints.The Graph provided a solution that allowed for our data-reads-from-blockchain to remain decentralized in a space that continues to develop a dependence on centralized solutions. Our appreciation for their tech grew in profound ways as we spoke to their devrel team and learned more about their offerings.Overall",
      "FIELD33": " the hackiness and grit is demonstrated through our commitment to excellence and our unwillingness to accept mediocrity. Our project only visually came together in the 11th hour - we had to solve so many non-visual technical challenges that we were not able to focus on the aesthetic until the late stage. Despite this setback",
      "FIELD34": " we resolved to continue to iterate and recommitted to shipping a functional product that could deliver joy.",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 130,
    hackathon: "ETHGlobal Tokyo",
    title: "TaikoSwap",
    more: "https://ethglobal.com/showcase/taikoswap-p8zrz",
    demo: "",
    repo: "https://github.com/s-ekai/TaikoSwap",
    video: "",
    winner: "",
    short: "Cross Chain Swap between Ethereum and Taiko by using cross-chain messaging.",
    description: "The project aims to enable cross-chain swaps between Ethereum and Taiko using Taiko's cross-chain messaging. When a user wants to swap L1 USDC for L2 USDT",
      "FIELD11": " the USDC is first sent to TaikoSwap on L1",
      "FIELD12": " and then TaikoSwap sends that information to SignalService. If the signal is confirmed on TaikoSwap on L2",
      "FIELD13": " TaikoSwap sends USDT to the user I am currently working on it and have not yet built it. I am checking whether it can be designed and technically implemented. I am currently redesigning the format of messages handled in the existing SignalService to a format suitable for cross-chain swaps and working on the overall design.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 131,
    hackathon: "ETHGlobal Tokyo",
    title: "UFO ~ Live Streaming from Video on Demand",
    more: "https://ethglobal.com/showcase/ufo-live-streaming-from-video-on-demand-tttrs",
    demo: "https://docs.google.com/presentation/d/1vejG6-Ito1JSv_NYd1EeR1PnMKF3m5IGrphyxFeDcGg/edit?usp=sharing",
    repo: "https://docs.google.com/presentation/d/1vejG6-Ito1JSv_NYd1EeR1PnMKF3m5IGrphyxFeDcGg/edit?usp=sharing",
    video: "",
    winner: "🔟 Lens — Top 10 ",
    short: "UFO is establishing the first internet radio station built with web3. Watch Party allows creators to stream live",
    description: " establish a catalog",
      "FIELD11": " access video on demand content and embed in their own websites. Curating and hosting social content experiences with their communities.",
      "FIELD12": "UFO is establishing the first internet radio station built with web3. We launched as a podcast in September 2022 with 30",
      "FIELD13": "000+ subscribers over Lens",
      "FIELD14": " Mirror and Twitter.In the ETH Tokyo hackathon we are exploring the live video streaming aspect of the radio station. A functionality we had in mind is calling the Lens API to live stream video on demand content from Lenstube",
      "FIELD15": " embedded into a video player on our website at ufo.fm.This broadcasting concept transforms async content which is normally experienced only individually into a collective social experience. The Watch Party and live community experience can be token-gated. The curation can also be community led. UFO content is produced by live streaming video: DJs",
      "FIELD16": " music performances",
      "FIELD17": " podcasts",
      "FIELD18": " web3 talks and events etc. This will be built on Livepeer. These live streams are minted to a catalog on Lenstube.This Video on Demand (VOD) content can be curated afterwards into a Lenstube playlist which is streaming live to a video embed on ufo.fm. Curating VOD and making it live again.To build this functionality we need to have the ability of creating playlist natively on Lenstube - this functionality is not created yet",
      "FIELD19": " also Lenstube is not equipped for live streaming on Livepeer yet.Tools used: Lens Protocol",
      "FIELD20": " Livepeer",
      "FIELD21": " Lenstube",
      "FIELD22": " Figma",
      "FIELD23": " Guild",
      "FIELD24": " Website BuilderWe didn't get the chance to make this concept live as didn't find a developer to work with our non-technical team. We also confirmed with Lenstube that essential functionality for this concept is not yet live on their platform.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 132,
    hackathon: "ETHGlobal Tokyo",
    title: "GardenGrower 🌹",
    more: "https://ethglobal.com/showcase/gardengrower-ynd62",
    demo: "https://www.youtube.com/watch?v=hTwZHIeqd34",
    repo: "https://github.com/MarcusWentz/GardenGrower",
    video: "",
    winner: "📜 Scroll — Just Deploy ",
    short: "Multisignature verifier for public goods. Users lock ETH into the contract and can refund their ETH if a proposal has expired.",
    description: "A smart contract allows users to lock in ETH for use in funding a public goods proposal such as \"plant more trees.\" Once the proposal's requirement is met",
      "FIELD11": " which is determined by a multisig vote",
      "FIELD12": " the ETH is rewarded to the plant grower. If the plant grower does not finish his task",
      "FIELD13": " then the ETH is returned back to the donors. Multisignature verifier for public goods.Users lock ETH into the contract and can refund their ETH if a proposal has expired.In particular",
      "FIELD14": " we use Safe for multisignature verification",
      "FIELD15": " we used Scroll as an L2 to deploy this project on because of gas costs and scaling purposes.Deployments 🏛️GardenGrower Goerli Address 🌹:https://goerli.etherscan.io/address/0x56f9269a4dd74acd461bfcde3f878e3a164a6788#codeSafe (Gnosis) Multisignature Verifier Judge Address Goerli ⚖️:https://goerli.etherscan.io/address/0x9F4Fc2673c4542F0cC4C5ebeEB24ebB19F8BE29f#codeGardenGrower Scroll Address 📜:https://blockscout.scroll.io/address/0xbFB26279a9D28CeC1F781808Da89eFbBfE2c4268/contracts#address-tabsSafe (Gnosis) Protocol Kit SDK 🧰Deployed a new multisignature wallet using SDK Typescript example 🔐 :https://github.com/MarcusWentz/GardenGrower/blob/main/safeMultisigSDK/deployNewSafe.tsCreate transactions in transaction queue ✉️ :https://github.com/MarcusWentz/GardenGrower/blob/main/safeMultisigSDK/createNewTransactionInQueue.tsReference 📖:https://docs.safe.global/learn/safe-core/safe-core-account-abstraction-sdk/protocol-kit",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 133,
    hackathon: "ETHGlobal Tokyo",
    title: "GardenGrower 🌹",
    more: "https://ethglobal.com/showcase/gardengrower-ynd62",
    demo: "https://www.youtube.com/watch?v=hTwZHIeqd34",
    repo: "https://github.com/MarcusWentz/GardenGrower",
    video: "",
    winner: "📜 Scroll — Just Deploy ",
    short: "Multisignature verifier for public goods. Users lock ETH into the contract and can refund their ETH if a proposal has expired.",
    description: "A smart contract allows users to lock in ETH for use in funding a public goods proposal such as \"plant more trees.\" Once the proposal's requirement is met",
      "FIELD11": " which is determined by a multisig vote",
      "FIELD12": " the ETH is rewarded to the plant grower. If the plant grower does not finish his task",
      "FIELD13": " then the ETH is returned back to the donors. Multisignature verifier for public goods.Users lock ETH into the contract and can refund their ETH if a proposal has expired.In particular",
      "FIELD14": " we use Safe for multisignature verification",
      "FIELD15": " we used Scroll as an L2 to deploy this project on because of gas costs and scaling purposes.Deployments 🏛️GardenGrower Goerli Address 🌹:https://goerli.etherscan.io/address/0x56f9269a4dd74acd461bfcde3f878e3a164a6788#codeSafe (Gnosis) Multisignature Verifier Judge Address Goerli ⚖️:https://goerli.etherscan.io/address/0x9F4Fc2673c4542F0cC4C5ebeEB24ebB19F8BE29f#codeGardenGrower Scroll Address 📜:https://blockscout.scroll.io/address/0xbFB26279a9D28CeC1F781808Da89eFbBfE2c4268/contracts#address-tabsSafe (Gnosis) Protocol Kit SDK 🧰Deployed a new multisignature wallet using SDK Typescript example 🔐 :https://github.com/MarcusWentz/GardenGrower/blob/main/safeMultisigSDK/deployNewSafe.tsCreate transactions in transaction queue ✉️ :https://github.com/MarcusWentz/GardenGrower/blob/main/safeMultisigSDK/createNewTransactionInQueue.tsReference 📖:https://docs.safe.global/learn/safe-core/safe-core-account-abstraction-sdk/protocol-kit",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 134,
    hackathon: "ETHGlobal Tokyo",
    title: "YORU",
    more: "https://ethglobal.com/showcase/yoru-4si1p",
    demo: "https://youtu.be/bOa3mGhHDTI",
    repo: "https://github.com/TheYoru/yoru-contracts",
    video: "",
    winner: "🥷 EF — ZK",
    short: " Semaphore",
    description: " RLN",
      "FIELD11": " & Unirep 🏆 ETHGlobal Tokyo Finalist ",
      "FIELD12": "YORU is a privacy-preserving DApp for social crypto payment. YORU leverages account abstraction and stealth address to make a token transfer. Token is sent to a one-time address",
      "FIELD13": " which is owned by the receiver and only known by the sender and the receiver.",
      "FIELD14": "There are two main challenges for social crypto payment.Anyone can track transaction history.Transaction is transparent and can be traceable on chain if the receiver address is the same. This is not allowed for social payment if anyone other than the sender and the receiver make sense of the asset transfer. In addition",
      "FIELD15": " anyone can track the wallet balance from the same address.User experience is bad on web3.First",
      "FIELD16": " it’s difficult for users to remember wallet addresses. We can remember our friends’ social media accounts",
      "FIELD17": " but we cannot remember his wallet address.Second",
      "FIELD18": " anyone who sends an Ethereum transaction needs to pay ETH for gas fees. If a user receives some tokens from others",
      "FIELD19": " he needs to buy some ETH before withdrawing the tokens.Imagine a scenario where a merchant receives tokens from his customers",
      "FIELD20": " but everyone knows how much the merchant earned everyday by monitoring the receiving address. Another case is that we do know who participates in ETHTokyo hackathon",
      "FIELD21": " if we watch the registration address. That is bad user experience  for crypto payment and is privacy compromising.SolutionConsidering the user experience and privacy transfer",
      "FIELD22": " YORU is designed to offer social crypto payment capability. YORU is an innovation to combine stealth address scheme with account abstraction to offer privacy-preserving wallet.As for privacy transfer",
      "FIELD23": " a one-time receiver address is generated every time by the sender if the sender knows the receiver’s public key. If the sender wants to send the transaction to the same receiver again",
      "FIELD24": " he will generate a fresh receiver address. The nice thing is that this is done without the receiver needing to generate multiple private keys or wallets. Most importantly",
      "FIELD25": " no one can identify which address is linked to the receiver’s wallet address.For better wallet experience",
      "FIELD26": " we leverage DID and ENS for public key registration. User can bind his wallet account with his social media account",
      "FIELD27": " like gmail",
      "FIELD28": " twitter",
      "FIELD29": " line and so on. For example",
      "FIELD30": " if Bob is in Alice’s telegram contact",
      "FIELD31": " then Alice can make a transfer to Bob by querying Bob’s telegram profile to get his public key. Then Alice can directly send the tokens to a one-time stealth address that is only controlled by Bob. Or he can do the same thing by registering the info on ENS.In order to withdraw the tokens without paying the gas fee",
      "FIELD32": " we leverage paymaster in account abstraction to sponsor transactions so the receiver does not need to deposit ETH in the one-time stealth address. This is super helpful for user onboarding.FutureThe way our system works is really similar to a UTXO contract wallet. We believe it not only can be used as crypto payment but also is a good wallet architecture design for centralized exchange on L2. YORO is currently available on Goerli tetsnet.In this project",
      "FIELD33": " we leverageDID to resolve receiver’s public keyENS (web3)Lens Protocol (web2)Account abstraction (EIP-4337) to make gasless transactionsStealth address (EIP-5546) to create stealth accountsCREATE2 (EIP-1014) to precompute abstract account addressesFor the stealth account part",
      "FIELD34": " we use umbra-js to create an account with the secret number.Our DApp in composed of four smart contracts.Yoru.solUsed by the sender to send tokens to a CREATE2 precompute abstract account address which is controlled by the receiver’s stealth accountThis contract mainly serves the purpose of storing relevant information for each transfer so receiver can recover the transfers by scanning the emitted eventsPayMaster.solUsed to cover the gas fee when receiver wants to spend his stealth fundStealthWallet.solThe abstract account to store receiver’s stealth fundStealthWalletFactory.solA factory contract to create stealth wallet contract",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 135,
    hackathon: "ETHGlobal Tokyo",
    title: "UwU Link",
    more: "https://ethglobal.com/showcase/uwu-link-v9exf",
    demo: "https://uwulink-demo.vercel.app/",
    repo: "https://github.com/tinaszheng/uwulink-demo",
    video: "",
    winner: "",
    short: "Sign any transactions by scanning a QR code",
    description: " without having to connect your wallet",
      "FIELD11": "UwU Link lets users sign any transactions without having to connect their wallet to a dapp. With UwU Link",
      "FIELD12": " users can simply scan a QR code (UwU code) with any mobile wallet app",
      "FIELD13": " which parses the transaction for them to sign directly inside their wallet. This eliminates the need for users to go through the cumbersome “Connect Wallet” flow that defines web3 UX today and instead",
      "FIELD14": " lets users participate on-chain on a transaction by transaction basis. In addition to a simplified UX",
      "FIELD15": " this solution better preserves user privacy since dapps have no way of knowing which wallet addresses have interacted with the UwU code.For developers and creators",
      "FIELD16": " UwU Link eliminates the need to build elaborate dapp sites for one-off projects",
      "FIELD17": " such as NFT mints",
      "FIELD18": " token-gated events",
      "FIELD19": " on-chain votes",
      "FIELD20": " airdrop claims",
      "FIELD21": " etc. They can easily socialize the UwU code to their communities via established channels (Discord",
      "FIELD22": " IG",
      "FIELD23": " Twitter",
      "FIELD24": " etc) to mobilize on-chain participation. This is especially useful for IRL events where UwU codes can be shared in-person to collect",
      "FIELD25": " mint",
      "FIELD26": " or claim digital artifacts. On our example mint interface",
      "FIELD27": " we're displaying a QR code that embeds the transaction object used for an NFT mint. It adds an optional webhook URL to the QR code that the wallet can later use to send status updates.We added a QR code parser to the Uniswap Wallet that reads the transaction object and fires a request modal to the user to sign. Once signed and sent off to the mempool",
      "FIELD28": " the wallet will call the webhook passed through with the QR code and send the transaction hash.Technologies used: next.js",
      "FIELD29": " react-native",
      "FIELD30": " ethers",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 136,
    hackathon: "ETHGlobal Tokyo",
    title: "ETHGPT",
    more: "https://ethglobal.com/showcase/ethgpt-yx4sp",
    demo: "https://www.ethgpt.org/",
    repo: "https://github.com/jiayaoqijia/ethgpt",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "ETHGPT: a GPT-powered ChatBot for accurate Ethereum info. We've compiled resources like go-ethereum and ethresear.ch to enhance ChatGPT's knowledge",
    description: " keeping you updated on Eth's latest developments. ETHGPT streamlines access to Ethereum-related info",
      "FIELD11": " benefiting users/developers.",
      "FIELD12": "Over the past 8 years",
      "FIELD13": " Ethereum has evolved with numerous updates",
      "FIELD14": " documentation",
      "FIELD15": " and codebases. With scattered materials and no centralized hub for information",
      "FIELD16": " it's been challenging for developers and users to stay updated on the latest Ethereum news and codebase explanations",
      "FIELD17": " such as the Shapella upgrade.Introducing ETHGPT - a GPT-powered ChatBot designed to answer all your Ethereum-related questions quickly and accurately. We've generated documentation for the Go-Ethereum codebase and incorporated various Ethereum resources like https://ethresear.ch/.By storing generated vectors",
      "FIELD18": " we enable users to ask questions and index the vector database. This provides precise contextual information as prompts to GPT",
      "FIELD19": " resulting in concise responses.As ChatGPT's knowledge is limited to September 2021",
      "FIELD20": " it lacks the latest Ethereum updates",
      "FIELD21": " such as the Shanghai upgrade. However",
      "FIELD22": " our newly generated documentation and resources provide the necessary context to guide ChatGPT in finding accurate answers.We believe ETHGPT will significantly improve the efficiency of accessing Ethereum-related information",
      "FIELD23": " helping users and developers better understand the Ethereum ecosystem. We built ETHGPT",
      "FIELD24": " a GPT-powered ChatBot for precise Ethereum info",
      "FIELD25": " using a combination of technologies like go-ethereum",
      "FIELD26": " OpenAI's ChatGPT",
      "FIELD27": " langchain",
      "FIELD28": " and NextJS. We generated documentation for the Go-Ethereum codebase and incorporated various Ethereum-related resources",
      "FIELD29": " such as https://ethresear.ch/.We stored generated vectors",
      "FIELD30": " allowing users to query questions and index the vector database. This provides accurate contextual info as prompts to GPT",
      "FIELD31": " leading to concise replies. Since ChatGPT's knowledge is limited to pre-Sept 2021 data",
      "FIELD32": " we updated it with the latest Ethereum info",
      "FIELD33": " such as the Shanghai upgrade",
      "FIELD34": " by generating new documentation.Overall",
      "FIELD35": " ETHGPT significantly enhances the efficiency of accessing Ethereum-related info",
      "FIELD36": " benefiting both users and developers in understanding the Ethereum ecosystem.Newly generated documentation for Go-Ethereum can be found athttps://github.com/jiayaoqijia/ethgpt/tree/main/docs/go-ethereum-md/go-ethereum",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 137,
    hackathon: "ETHGlobal Tokyo",
    title: "Strawberry App",
    more: "https://ethglobal.com/showcase/strawberry-app-ti0sk",
    demo: "https://strawberry-dawndarkness.vercel.app/",
    repo: "https://github.com/dawndarkness/strawberry",
    video: "",
    winner: "",
    short: "Strawberry App connects the crypto community with Non Profit Organisations who are looking for donations.",
    description: "Strawberry App is a PWA that connects people who want to do their part and donate to Non Profit Organisations (NPOs) in cryptocurrency. It is decentralised",
      "FIELD11": " and with a few simple button clicks a potential donor can select an NPO and send them some crypto. Other than that awesome feeling of doing something good in the world",
      "FIELD12": " they also receive a tree icon for every donation which will appear in their virtual landscape on Strawberry App. Being a team of web2 engineers",
      "FIELD13": " we knew our strengths",
      "FIELD14": " and what we needed to learn.We wanted to create a nice user experience with the help of web2 and provide security",
      "FIELD15": " automation",
      "FIELD16": " privacy",
      "FIELD17": " gamification",
      "FIELD18": " via web3/decentralisation. So",
      "FIELD19": " we started off with a CRA equivalent of web3 dapp for the frontend",
      "FIELD20": " ethers.js for communicating with the alchemy/infura APIs. On the web3 side",
      "FIELD21": " we used remix truffle",
      "FIELD22": " ganache",
      "FIELD23": " hardhat to create",
      "FIELD24": " test",
      "FIELD25": " and deploy our web3 contract",
      "FIELD26": " written in solidity",
      "FIELD27": " on Goerli ETH. On the end user end",
      "FIELD28": " the user can use any wallet",
      "FIELD29": " be it worldcoin",
      "FIELD30": " metamask",
      "FIELD31": " any walletconnect supported wallet",
      "FIELD32": " coinbase wallet.",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 138,
    hackathon: "ETHGlobal Tokyo",
    title: "GamefiWormhole",
    more: "https://ethglobal.com/showcase/gamefiwormhole-bviux",
    demo: "",
    repo: "https://github.com/vinhyenvodoi98/GamefiWormhole",
    video: "",
    winner: "",
    short: "a crosschain NFT collateral solution that makes gamefi easily accessible",
    description: "The problem now is that there are too many different NFTs and they are slowly losing value. My solution was to create a method that can reuse NFTs from other chains instead of creating new ones. Users will first collateralize NFT from ethereum. i use airstack to get their floor price on opensea. evaluate the value then decide to migrate the amount of stablecoin tokens in mantle corresponding to 50% of the value. users will then use this new stablecoin to purchase in-game characters. The special feature is that it is possible to use hyperlane for crosschain collateral. mantle to implement game because the speed of transaction very fast and cheap fee.airstack for get floor price of collateral NFT. platform very easy to config because it have AI to generate queryhyperlane to crosschain collateral. i try to implement mailbox in mantle blockchain",
      "FIELD11": "",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 139,
    hackathon: "ETHGlobal Tokyo",
    title: "HatsWallet",
    more: "https://ethglobal.com/showcase/hatswallet-1soqo",
    demo: "",
    repo: "https://github.com/Hats-Protocol/hats-wallet",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "HatWallet introduces role-based rewards",
    description: " tying streamed rewards and compensation with a given role rather than specific addresses",
      "FIELD11": "One of the biggest challenges for DAOs today is the lack of accountability for paid contributors. It is an easy trap for a DAO to fall into",
      "FIELD12": " where contributor compensation is set up via DAO proposal",
      "FIELD13": " and some contributors are receiving large or recurring grants",
      "FIELD14": " but after some time",
      "FIELD15": " stop delivering work that is commensurate with that compensation. Right now",
      "FIELD16": " DAOs don't have a good way of holding those contributors accountable to following through on their responsibilities",
      "FIELD17": " and stopping compensation when appropriate.Our project builds on top of Hats Protocol",
      "FIELD18": " an open-source repo that enables DAOs to grant their contributors roles represented by ERC1155 tokens.We implemented a Hat-specific version of Mech from Gnosis Guild to give every Hat its own smart contract wallet",
      "FIELD19": " then attached the Superfluid compensation streams to those wallets. This is HatWallet. HatWallets are wallets that are controlled by the DAO but can be delegated to specific individuals and tied to specific accountabilities.This unlocks three key capabilities:HatWallet gives the DAO control over specific wallets as opposed to relying on individuals personal EOAs. This improves security.HatWallet introduces role-based rewards",
      "FIELD20": " tying streamed rewards and compensation with a given role rather than specific addresses. This ensures good stewardship of the DAOs resources",
      "FIELD21": " and enables a more programmable and permissionless contribution-based reward structure.HatWallet connects rewards and signing authority associated with a wallet to specific accountabilities. For example",
      "FIELD22": " if a facilitator role comes with control of a given HatWallet",
      "FIELD23": " and a specific requirement for keeping that roles is maintaining at least a 75% approval rating from their colleagues",
      "FIELD24": " the moment they fall below that threshold they will lose access to the rewards and authorities associated with that HatWallet. We did a short demo of combining HatsWallet with Hats + MolochDAOs for context! https://www.loom.com/share/4ed0155735454b62ba0305dd754eb771 Our project builds on top of Hats Protocol",
      "FIELD25": " an open-source repo that enables DAOs to grant their contributors roles represented by ERC1155 tokens.We implemented a Hat-specific version of Mech from Gnosis Guild to give every Hat its own smart contract wallet",
      "FIELD26": " then attached the Superfluid compensation streams to those wallets.Polygon deployments of HatsWallet:implementation: 0x761417B02a5406Ff4e692bC9aB04A7e66C2f5d0afactory: 0x6FE23eEe15eB5aB6Cb6c4D1C6A769e49368cE739Gnosis Chain deployments of HatsWallet:implementation: 0x761417B02a5406Ff4e692bC9aB04A7e66C2f5d0afactory: 0x6FE23eEe15eB5aB6Cb6c4D1C6A769e49368cE739Celo Alfajores testnet deployments of HatsWallet:implementation: 0x761417B02a5406Ff4e692bC9aB04A7e66C2f5d0afactory: 0x6FE23eEe15eB5aB6Cb6c4D1C6A769e49368cE739",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 140,
    hackathon: "ETHGlobal Tokyo",
    title: "POMPoarding",
    more: "https://ethglobal.com/showcase/pompoarding-yis1w",
    demo: "https://pomp-ethglobal.vercel.app",
    repo: "https://github.com/spdrstar/POMPoarding-ETHTokyo",
    video: "",
    winner: "🏊 The Graph — Pool Prize 🅰️🅰️ Safe — Best Web2 Experience with AA 🏆 ETHGlobal Tokyo Finalist ",
    short: "The easiest way to onboard communities to web3 through a simple type form ",
    description: "POMPoarding allows communities to be onboarded to web3 in a simple and easy way.  By answering questions in a type form",
      "FIELD11": " community leaders can create their community's web3 identity without needing previous knowledge of crypto or wallets. In the back end",
      "FIELD12": " we help communities create a multi-sig wallet that can be used for governance/treasury etc. We also create a dashboard that the community leaders can use to manage members. This project uses SAFE to create multi-sig wallets for communities. We use Push to send push notifications to the owner when community leaders join into the multi-sig. We also use The Graph to manage our notifications for community leaders so they know when to sign in to confirm. Additionally",
      "FIELD13": " Jitter was used to create interactive animations and Figma was used for the design of visual assets.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 141,
    hackathon: "ETHGlobal Tokyo",
    title: "SuperPlay",
    more: "https://ethglobal.com/showcase/superplay-5zr28",
    demo: "https://0xsuperplay.xyz/",
    repo: "https://github.com/Rashmi-278/SuperPlay-ETH-Tokyo-2023",
    video: "",
    winner: "🥇 Reazon — Best Mass Adoption 🏊‍♂️ Polygon — Pool Prize 🎮 Superfluid — Best Gaming 🥈 Gnosis Chain — Best Use 🅰️🅰️ Safe — Best Web2 Experience with AA 🏆 ETHGlobal Tokyo Finalist ",
    short: "Your gateway to web3 gaming. Hassle-free onboarding with email registration and gas-less transactions with Safe and Superfluid. Try out new games today!",
    description: "OverviewSuperPlay is a user-friendly onboarding infrastructure that allows gamers to try out Web3 games without the hassle of setting up a wallet or buying assets. SuperPlay also provides gaming projects with a simple and efficient onramp to attract a broader audience.User StoryAs a gamer",
      "FIELD11": " I want to try out Web3 games without having to set up a wallet or buy assets",
      "FIELD12": " so I can understand how to play the game with no knowledge about cryptocurrency.User ExperienceI visit the gaming project's website and register my email address to create a Safe contract wallet.Upon registration",
      "FIELD13": " the system automatically creates a Safe contract wallet that is associated with my email address.Inside the contract wallet",
      "FIELD14": " I own a small amount of the gaming project's ERC20 token",
      "FIELD15": " which is used for the subscription.I can start playing the game without using any assets in my wallet for a limited time (e.g.",
      "FIELD16": " 1 week).During the trial",
      "FIELD17": " the gaming project covers the gas fees for my transactions using Safe Relay Kits.After the trial",
      "FIELD18": " I can choose to subscribe to the game by paying a fee in the gaming project's ERC20 token with a credit card",
      "FIELD19": " which will be charged to my contract wallet automatically every week.FeaturesEmail registration to create a Safe contract walletLimited time trial without requiring any assets in the walletSubscription service using the gaming project's ERC20 token and credit card paymentGas fee coverage during the trial using Safe Relay KitsWhat's Good for UsersHassle-free onboarding process for non-crypto savvy usersSeamless trial experience to try out Web3 games without buying assets or paying gas feesAutomatic and convenient subscription service for a seamless gaming experience Smart contract: Safe Contract Wallet SDKPayment: SuperfluidGas fee management and cross-chain payment: Safe Relay KitsContract wallet creation and management: Safe Onramp KitsBlockchain: Polygon",
      "FIELD20": " Gnosis",
      "FIELD21": " EthereumTo create a seamless user experience",
      "FIELD22": " SuperPlay leverages Safe Contract Wallet SDK to provide users with secure contract wallets that can hold ERC20 tokens and interact with dApps. Safe Relay Kits are used to cover gas fees during the trial period",
      "FIELD23": " allowing users to try out the platform without worrying about transaction costs.Superfluid is used for the payment system",
      "FIELD24": " allowing for continuous streaming of payments and allowing users to subscribe to gaming projects with ease. The Safe Onramp Kits are utilized to enable users to start a paid subscription without owning any crypto assets",
      "FIELD25": " thus eliminating the need for users to have prior experience with cryptocurrency.Overall",
      "FIELD26": " SuperPlay offers a user-friendly",
      "FIELD27": " secure and seamless way for users to enter the world of decentralized gaming",
      "FIELD28": " with the help of these powerful and versatile technologies.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 142,
    hackathon: "ETHGlobal Tokyo",
    title: "Apeify",
    more: "https://ethglobal.com/showcase/apeify-stp4i",
    demo: "",
    repo: "https://github.com/arvindbr95/ethglobal-tokyo",
    video: "",
    winner: "🥈 ApeCoin — Best Integration 🏊‍♂️ Polygon — Pool Prize 🗄 Airstack — Best Use in a Business Application or Tooling ",
    short: "Our Shopify template enables ApeCoin DAO members to launch global brands and start accepting ApeCoin within seconds",
    description: " contributing to the continuous growth of the ApeCoin DAO ecosystem.",
      "FIELD11": "This project presents a Shopify app that reads the NFTs a user possesses in their wallet",
      "FIELD12": " and automatically generates a ApeCoin-themed Shopify store based on the specific tokens that she/he has. Anyone who visits the store will be able to buy the products with ApeCoin ($APE) tokens.This ApeCoin-themed Shopify store can be set-up in a matter of seconds",
      "FIELD13": " empowering holders to start selling their products and merchandise globally",
      "FIELD14": " while participating in growing the ApeCoin brand and ecosystem. For this project",
      "FIELD15": " we built a Shopify App for merchants to integrate into their store and generate a store template based on the NFTs they own. Additionally",
      "FIELD16": " we built the ApeCoin payment checkout experience the user gets redirected to upon checkout.The Merchant flow is as follows:The merchant creates a shop that has the default template.The merchant then adds the Apeify app to their Shopify store.The merchant connects their wallet that holds the Yuga Labs NFTs",
      "FIELD17": " and the relevant NFT details are fetched (such as image data",
      "FIELD18": " traits",
      "FIELD19": " tokenID",
      "FIELD20": " etc.). We use Airstack as our data indexer.Once this is done",
      "FIELD21": " we make a call to our backend with the NFT details that the user chooses and the the base shopify theme is edited based on the NFT metadata such as the background colour",
      "FIELD22": " image",
      "FIELD23": " token ID",
      "FIELD24": " etc.This theme is then uploaded via Shopify's REST API.The User flow while purchasing is as follows:The user lands on the website and picks the item they are interested in.They enter their personal details such as Address and contact informationThey can pick ApeCoin as the payment method during the final step.If they picked ApeCoin",
      "FIELD25": " they will be redirected to a new tab once they confirm their purchase",
      "FIELD26": " where they can make the ApeCoin payment.They can either pay by transferring funds to the specified contract or connecting their wallet and signing the smart contract transaction with their wallet.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 143,
    hackathon: "ETHGlobal Tokyo",
    title: "Web3 from A to Z",
    more: "https://ethglobal.com/showcase/web3-from-a-to-z-zzehj",
    demo: "https://nikainu.github.io/web3fromAtoZ/",
    repo: "https://github.com/nikainu/web3fromAtoZ",
    video: "",
    winner: "",
    short: "This website offers bite-sized explanations to web3 term in order to help anyone to understand what web3 is",
    description: " how it works and how it can change the world.",
      "FIELD11": "This project started with the idea to provide a website explaining basic web3 terminology. We chose 26 blockchain-related terms based on the 26 letters of the alphabet. The explanations are based on existing definitions of ethereum.org. We also provide links to learn more about each term. The goal of this project was to lower the threshold for absolute beginners and non-technical people to get into web3. The website was built with the react framework. We tried to make it as clean and responsive as possible so it can be maintained and added to by the community in the future. We used ethereum.org to source some of the information and link back to ethereum.org in order to provide more explanations.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 144,
    hackathon: "ETHGlobal Tokyo",
    title: "OMZ",
    more: "https://ethglobal.com/showcase/omz-kszfc",
    demo: "https://omz-app-web.vercel.app/",
    repo: "https://github.com/ETHGlobalTokyo-OMZ/omz-app",
    video: "",
    winner: "📜 Scroll — Just Deploy 🔟 Push — Top 10 🏊‍♂️ Polygon — Pool Prize 💸 Hyperlane — Best DeFi ",
    short: "OMZ is a MultiChain OTC market with notification function for p2p trading",
    description: "OMZ is a MultiChain OTC market with notification. The seller must deposit stable token in escrow for the transaction",
      "FIELD11": " and the deposit ratio is determined by the seller himself. Based on their decision",
      "FIELD12": " the buyer purchases stable token in escrow to complete the transaction. In the process of making a transaction",
      "FIELD13": " you can receive an alarm according to the transaction. We used the Polygon chain",
      "FIELD14": " which is relatively faster in a MultiChain based OTC transaction",
      "FIELD15": " as the underlying chain to store information on OTC orders and match them. Through MultiChain OTC transactions",
      "FIELD16": " you can buy or sell coins or tokens from various chains",
      "FIELD17": " allowing you to quickly exchange various tokens within Polygon for tokens on other chains.And network primarily supports Polygon",
      "FIELD18": " Optimism",
      "FIELD19": " and Ethereum.We used Push Protocol to enhance user experience in asynchronous OTC transactions. When a new sales listing appeared in OTC transactions",
      "FIELD20": " it notifies everyone through Channel notifications",
      "FIELD21": " and during the transaction",
      "FIELD22": " it informs the seller and buyer of the progress of the transaction.<Example Case of trading MATIC >[Seller Flow]The seller must first list the token they want to sell.Choose the token for sale and enter the quantity.Set the USDC price for the token.Select the deposit rate for escrow. (With options of 1",
      "FIELD23": " 5",
      "FIELD24": " 7",
      "FIELD25": " 10",
      "FIELD26": " or 50% deposit rate).-> A higher deposit rate increases the buyer's trust.*If the deposit rate is selected and the seller does not make a deposit after the transaction is completed",
      "FIELD27": " the deposit amount will be deducted from the buyer (Penalties may apply)Click the \"Make a List to Sell\" button to list the order for sale.After listing the token",
      "FIELD28": " the seller receives a notification if there is a waiting buyer.Once the buyer deposits USDC into escrow",
      "FIELD29": " the seller receives USDC payment for the sold token.[Buyer Flow]The buyer places an order for the token that meets the seller's conditions by checking the order list provided by the seller.After the order is accepted",
      "FIELD30": " the buyer can view the details of the order and history on the dashboard.The seller receives a notification through the push protocol for the order.If the seller deposits MATIC into escrow-> the buyer receives a notification that MATIC has been received",
      "FIELD31": " and the seller receives a notification that they have received USDC payment.If the seller does not deposit MATIC into escrow-> the buyer receives a notification that they have received the listing collateral (USDC)",
      "FIELD32": " and the seller receives a notification that the listing has been canceled.",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 145,
    hackathon: "ETHGlobal Tokyo",
    title: "DayPass",
    more: "https://ethglobal.com/showcase/daypass-jf7vx",
    demo: "https://www.daypass.dev/",
    repo: "https://github.com/devlyn37/Daypass",
    video: "",
    winner: "📜 Scroll — Just Deploy 🤝 Polygon — Best Public Good with Account Abstraction 🏊‍♂️ Polygon — Pool Prize 🅰️🅰️ EF — Best Account Abstraction 🥈 Mantle — Build Use ",
    short: "Send an NFT and automatically cover the recipients gas! Daypass allows the distribution and organization of gas sponsorship via NFTs or \"Daypasses\". It's easy to use",
    description: " and leverages the composability of NFTs for AA based gas sponsorship.",
      "FIELD11": "Send an NFT and automatically cover the recipient's gas! DayPass allows the distribution and organization of gas sponsorship via NFTs or \"Daypasses\". We abstract the process of paymaster deployment and leverage the composability of NFTs for AA-based gas sponsorship. Developers can set up restrictions including disabling trading",
      "FIELD12": " gas limits",
      "FIELD13": " spending limits",
      "FIELD14": " and as the name \"Daypass\" suggests time limits.We believe that paymasters are going to be a core piece of crypto infrastructure",
      "FIELD15": " with many eventually servicing millions of wallets. Distributing access to these paymasters via NFTs provides a way to organize and track this usage",
      "FIELD16": " leveraging existing NFT tools. Think of DayPass as an organization and composability layer for paymaster access.Beyond the benefits of organization and composability",
      "FIELD17": " in addition to the awesome benefits of gas sponsor ship enabled by AA in general",
      "FIELD18": " the time restriction feature of these NFTs could be useful for a few different use cases:Developer events- Do you want someone to try out your new protocol? Send them 3 days worth of all the gas they'd want on relevant contracts.- Do you want users to deploy to your L2 during a hackathon? Airdrop Daypasses to all attendees that sponsored deploys and swaps for the duration of the hackathon!Games- Free gas could be a really cool reward item",
      "FIELD19": " and an NFT \"ticket\" or \"pass\"Large Scale NFT based onboarding- A ton of users' first interaction with crypto is being airdropped an NFT",
      "FIELD20": " think about super bowl commercials",
      "FIELD21": " promotions",
      "FIELD22": " etc. Recent examples of these types of drops include Crown Royal",
      "FIELD23": " Mastercard",
      "FIELD24": " Starbucks",
      "FIELD25": " etc. If these NFTs conformed to the DayPass spec",
      "FIELD26": " users could sell or trade these NFTs without ever needing to fiat onboard",
      "FIELD27": " vastly improving their first experience. DayPass is a tool for ERC 4337 based AA",
      "FIELD28": " which uses NFTs to guard paymaster access. When someone sets up their \"Daypasses\" they specify a series of restrictions. Once they're finished and hit submit we do two three things: Deploy a Daypass NFT contract",
      "FIELD29": " then deploy an ERC 4337 Paymaster contract",
      "FIELD30": " stake",
      "FIELD31": " and deposit on the paymaster. We have a helper contract that handles this",
      "FIELD32": " it's setupHelper.sol if you want to see exactly what we're doing!That paymaster contract decides whether or not to sponsor transactions based on the senders' ownership of a \"valid\" Daypass NFT. We underestimated how restrictive the verification function on the paymaster is",
      "FIELD33": " so there's a bit of a discrepancy between the restriction functionality shown in the client vs on-chain. You can see HackathonPaymaster.sol for details there. Future work would involve working around these restrictions.We built this with the future in mind",
      "FIELD34": " where AA is ubiquitous and AA wallets have good paymaster selection built-in. In our demo",
      "FIELD35": " you'll see us input the address of the newly created paymaster when we're showing off sponsored transactions. In the client",
      "FIELD36": " we're using ZeroDev AA wallets. For more details check out https://docs.zerodev.app/.",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 146,
    hackathon: "ETHGlobal Tokyo",
    title: "Kukuponpon",
    more: "https://ethglobal.com/showcase/kukuponpon-c4goa",
    demo: "https://eth-tokyo-2023-kukupon.vercel.app/",
    repo: "https://github.com/kryptogo/eth-tokyo-2023-kukupon",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize 🏊‍♂️ Polygon — Pool Prize 🌱 1inch — Open Track ",
    short: "Kukupon is a voucher wallet for blockchain games. We simplify gaming by offering anonymous verification",
    description: " free sponsorships",
      "FIELD11": " and promotion budgets to attract players. Join the GameFi revolution!",
      "FIELD12": "Kukupon is a voucher wallet designed specifically for blockchain games. Blockchain games",
      "FIELD13": " or GameFi",
      "FIELD14": " face several challenges",
      "FIELD15": " including difficulty in promotion",
      "FIELD16": " the need for real-name verification",
      "FIELD17": " inability to attract senior players",
      "FIELD18": " high entry barriers for newcomers",
      "FIELD19": " low conversion rates with KOL marketing",
      "FIELD20": " performance limitations",
      "FIELD21": " and the need to build a strong community and ecosystem.To address these challenges",
      "FIELD22": " Kukuponpon proposes several solutions",
      "FIELD23": " including anonymous verification of domain experts or GameFi senior players",
      "FIELD24": " sponsorships by games or KOLs to allow players to participate for free",
      "FIELD25": " and allocation of promotion budgets by game developers. Kukuponpon also utilizes unique technologies",
      "FIELD26": " such as ERC-4337 for handling private key issues",
      "FIELD27": " L2 for accelerating transactions",
      "FIELD28": " and zero-knowledge verification of identity to avoid duplication.Kukuponpon can be applied in various scenarios",
      "FIELD29": " such as game discussion forums",
      "FIELD30": " donations and withdrawals",
      "FIELD31": " and in-game screens. The user flow involves selecting the category for verification of identity",
      "FIELD32": " allowing senior players to gain benefits and distribute promotion codes",
      "FIELD33": " and newcomers to enter promotion codes or be directed to forums. Kukupon was built using a variety of technologies to ensure a seamless gaming experience. Airstack was used to track players' on-chain activity",
      "FIELD34": " while ERC-4337 was utilized to establish a Paymaster for Voucher payments and a Voucher Wallet for delivering Gift Cards to players. WorldID was also employed to verify identities and prevent duplicate redemptions. By combining these technologies",
      "FIELD35": " we have created a secure and efficient way for players to enjoy GameFi.Our unique technology handles private keys",
      "FIELD36": " accelerates transactions",
      "FIELD37": " and enables zero-knowledge verification.",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 147,
    hackathon: "ETHGlobal Tokyo",
    title: "Saturn",
    more: "https://ethglobal.com/showcase/saturn-ofzti",
    demo: "",
    repo: "https://github.com/thedigitalgraz/saturn",
    video: "",
    winner: "",
    short: "We issue academic certs & diplomas as SBTs on blockchain",
    description: " easily verified by stakeholders. zk-SNARKs & zero-knowledge proofs ensure privacy/security of holders while allowing verification.",
      "FIELD11": "This protocol",
      "FIELD12": " Saturn",
      "FIELD13": " will enable educational institutions and organizations to issue academic certificates and diplomas as SBTs on the blockchain",
      "FIELD14": " which can be easily verified by employers and other stakeholders. The protocol will use zk-SNARKs and other zero-knowledge proof techniques to protect the privacy and security of the certificate holders while enabling verification of their credentials.It targets a range of stakeholders in the education sector",
      "FIELD15": " including universities",
      "FIELD16": " colleges",
      "FIELD17": " vocational schools",
      "FIELD18": " training providers",
      "FIELD19": " and employers. By enabling the issuance and verification of academic certificates and diplomas as NFTs",
      "FIELD20": " the protocol helps institutions to reduce fraud",
      "FIELD21": " increase transparency",
      "FIELD22": " and improve the value of their credentials. Employers benefit from a more reliable and secure method of verifying candidates' credentials",
      "FIELD23": " while students and graduates have greater control over their academic records and a more secure method of sharing them with potential employers.Saturn can generate revenue by charging a fee for the issuance and verification of SBTs",
      "FIELD24": " as well as for additional services such as storage and backup of certificate data. This protocol also offers additional features such as analytics and insights on the use of academic certificates and diplomas",
      "FIELD25": " which could be useful for institutions and employers.How it works -->1/ An educational institution or organization creates a new certificate or diploma and uploads it to the smart contract",
      "FIELD26": " along with relevant metadata such as the name of the certificate",
      "FIELD27": " the name of the issuing institution",
      "FIELD28": " and the date of issuance.2/ The smart contract mints a new SBT representing the certificate and assigns ownership to the recipient.3/ The recipient can now transfer the SBT to their own wallet or keep it in the smart contract.4/ When an employer or other stakeholder wants to verify the authenticity of the certificate",
      "FIELD29": " they can request access to the metadata associated with the SBT.5/ The smart contract uses zero-knowledge proofs to verify the authenticity of the certificate without revealing any private information about the recipient. This could involve a zk-SNARK proof",
      "FIELD30": " for example",
      "FIELD31": " that proves that the certificate was issued by the correct institution and has not been tampered with.6/ If the verification is successful",
      "FIELD32": " the metadata is provided to the verifier",
      "FIELD33": " who can then confirm the authenticity of the certificate.7/ If the verification is not successful",
      "FIELD34": " the verifier is notified that the certificate is invalid.8/The smart contract can also include additional features",
      "FIELD35": " such as the ability to revoke or expire certificates in the event of fraud or other issues. At this stage",
      "FIELD36": " the concept is still in the proof of concept phase",
      "FIELD37": " and I have not yet built a working prototype. However",
      "FIELD38": " I believe that the potential for this concept is significant",
      "FIELD39": " as it can revolutionize the way academic certificates and diplomas are issued",
      "FIELD40": " verified",
      "FIELD41": " and stored securely. I am committed to bringing this idea to life and am currently exploring funding opportunities to support its development.Although I didn't find a developer with the required skills at this hackathon",
      "FIELD42": " I remain committed to bringing this project to life. I will continue to work hard to find the right team and resources needed to implement this concept and bring the benefits of blockchain-based academic credentials to the world.",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 148,
    hackathon: "ETHGlobal Tokyo",
    title: "Streamyx",
    more: "https://ethglobal.com/showcase/streamyx-zvsvs",
    demo: "https://http://streamyx.bubbleapps.io",
    repo: "https://github.com/encody/streamyx",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Streamyx allows creators to schedule token-gated content",
    description: " collect crypto payments and conduct revenue-sharing with collaborators.  Streamyx also enables sponsors to remunerate creators according to real performance.",
      "FIELD11": "Streamyx is a tool that enable creators toSchedule token-gated content to provide additional utility for NFT holdersCollect crypto payments to avoid high transaction costConduct automated revenue-sharing with collaboratorsSponsor assurance",
      "FIELD12": " as the remuneration is calculated by Smart Contract based on real performanceSince the tool is built with decentralised video infrastructure",
      "FIELD13": " the cost for the creators are low.We are integrating with Livepeer streaming services in this project but we could make it compatible with various other platforms in future iteration. Streamyx combines web2 and web3 technologies together.First",
      "FIELD14": " we leverage the LivePeer web3-integrated live-streaming system to bring live content to our users. Our app maintains no private server-side state",
      "FIELD15": " because the only thing that a user needs to keep secret is their per-stream stream key",
      "FIELD16": " which is issued right before the stream begins.The smart contract is built with a combination of technologies from OpenZeppelin",
      "FIELD17": " SuperFluid",
      "FIELD18": " and ThirdWeb",
      "FIELD19": " and it is scaffolded with HardHat. In the case that someone (e.g. a potential advertiser) wishes to sponsor a stream",
      "FIELD20": " we use the SuperFluid money streaming API to dynamically send money to the stream’s host while the livestream is active. Streams will have a baseline attendance rate (40% of the sponsor’s goal",
      "FIELD21": " possibly adjustable in the future) above which the money streaming will continue",
      "FIELD22": " and increase until the 100% attendance rate. Because the money will be streamed dynamically according to attendance",
      "FIELD23": " sponsors are effectively paying for units of viewership per time",
      "FIELD24": " while stream hosts are incentivized to not only attract a large number of viewers",
      "FIELD25": " but keep them watching for long periods of time.The frontend is built in Next.js",
      "FIELD26": " with some Chakra UI elements and TailwindCSS styling. For the Web3 integration",
      "FIELD27": " we used ThirdWeb. The contracts are deployed to the Polygon Mumbai testnet.Most of the work on this project went into writing the smart contract and making it as robust and user-friendly as possible.Test it out here: https://streamyx.vercel.app/",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 149,
    hackathon: "ETHGlobal Tokyo",
    title: "Mottainai",
    more: "https://ethglobal.com/showcase/mottainai-swy8t",
    demo: "",
    repo: "https://github.com/ethtokyo-rokubunnoni/recycle-box",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Your wallet account holds your blockchain journey and memories",
    description: " like POAPs and SBTs.   Tidy up unwanted tokens and keep using it long-term!",
      "FIELD11": "By using this service",
      "FIELD12": " you can easily organize unwanted tokens in your wallet and receive eco-friendly NFTs with utility. Furthermore",
      "FIELD13": " once the project is completed",
      "FIELD14": " disposed tokens will be automatically categorized into Major Token",
      "FIELD15": " Stable Token",
      "FIELD16": " Alt Coin",
      "FIELD17": " and Scam Token",
      "FIELD18": " with operations carried out for each category. Profits generated from these operations will be returned to users as ETH",
      "FIELD19": " allowing you to withdraw ETH at your preferred timing.Organizing your wallet allows for long-term continued use of the wallet. Additionally",
      "FIELD20": " in countries with strict taxation on crypto assets",
      "FIELD21": " organizing your wallet before filing your tax return enables accurate balance calculations and simplifies the tax filing process.This feature is highly useful in cases where the gas fees for individually swapping tokens worth less than one dollar are higher than the tokens received after the swap. Therefore",
      "FIELD22": " it caters to a wide range of users",
      "FIELD23": " from those dabbling with small amounts of crypto to those managing large sums.This service allows you to easily organize your wallet",
      "FIELD24": " acquire eco-friendly NFTs",
      "FIELD25": " and provides a system that automatically categorizes tokens",
      "FIELD26": " optimizes operations",
      "FIELD27": " and returns profits as ETH. With long-term wallet use",
      "FIELD28": " simplified tax filing",
      "FIELD29": " and efficient handling of tokens worth less than a dollar",
      "FIELD30": " this service offers great convenience to users. This time",
      "FIELD31": " we participated as a team for the first time. We divided our tasks into three groups: those responsible for advancing the project development",
      "FIELD32": " front-end developers",
      "FIELD33": " and back-end developers. The team responsible for advancing the development consistently checked progress and determined compromises as needed to reach the final goal. This project uses the IPFS behind the scenes.We used Next JS to design the frontend.",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 150,
    hackathon: "ETHGlobal Tokyo",
    title: "Hikyaku Protocol",
    more: "https://ethglobal.com/showcase/hikyaku-protocol-run4m",
    demo: "https://hikyaku-protocol.vercel.app/",
    repo: "https://github.com/y-shijo/HikyakuProtocol",
    video: "",
    winner: "📜 Scroll — Just Deploy 🥈 Reazon — Best Mass Adoption 🏊‍♂️ Polygon — Pool Prize ",
    short: "Hikyaku Protocol makes it a breeze to send web3 assets to anyone with just an email address",
    description: " even if you don't know their web3 address. ",
      "FIELD11": "Hikyaku Protocol is a system designed to simplify the process of sending web3 assets to others without the need for knowing their web3 address. It enables users to send assets using only an email address while preserving privacy with end-to-end encryption(Partially supported at this hackathon).And remember",
      "FIELD12": " Hikyaku Protocol is designed to potentially work with other identifiers like Twitter usernames or phone numbers in the future",
      "FIELD13": " expanding its capabilities even further! Alice wants to send assets to Bob",
      "FIELD14": " but doesn't know his web3 address. She accesses Hikyaku Protocol and enters Bob's email address.She chooses a trustworthy provider from the HikyakuNotificationProvidersNetwork",
      "FIELD15": " which generates a temporary web3 address for Bob.Alice sends her request to the Hikyaku Protocol contract",
      "FIELD16": " which registers Bob's temporary web3 address.The provider decodes the email address and informs Bob via email that Alice wants to send him assets.Bob accesses the provided URL",
      "FIELD17": " where he can replace the temporary web3 address with his actual one",
      "FIELD18": " which is then sent to Alice.If Alice had already sent assets to the temporary web3 address",
      "FIELD19": " the provider detects the change and sends a LitProtocol PKP NFT to Bob's web3 address",
      "FIELD20": " giving him control over the assets.Bob can use a different web3 address for each sender if he wishes. The HikyakuNotificationProvidersNetwork offers a variety of providers",
      "FIELD21": " allowing for different levels of immediacy and response times.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 151,
    hackathon: "ETHGlobal Tokyo",
    title: "ZKChat&Pay",
    more: "https://ethglobal.com/showcase/zkchat-and-pay-sc9wr",
    demo: "https://zkchatnpay.vercel.app/",
    repo: "https://github.com/xentoshi/ZkChat-Pay",
    video: "",
    winner: "🥷 EF — ZK",
    short: " Semaphore",
    description: " RLN",
      "FIELD11": " & Unirep 🥈 zkBob — Best Use ",
      "FIELD12": "Decentralised ZK messaging with Defi Features X Fund the best Public Good Projects with Zk.",
      "FIELD13": "Decentralised ZK messaging with Defi Features X Fund the best Public Good Projects with Zk.Project where the users would be easily able to chat with other users and send them money through zk .It utilises zkbob for payment ",
      "FIELD14": " RLN for preventing spams",
      "FIELD15": " Sismo for zk verification ",
      "FIELD16": " Worldcoin for personhood. Its made through non-stop coding of >48 hrs ",
      "FIELD17": " high dedication and the rich support of all the sponsors and mentors.We have used the best stack for the Project - Nextjs in the Frontend",
      "FIELD18": " Express with Socket-io in the server side and hardhat for the contract.RLN is used in our zk-chat to prevent spamming and generate proofs for each message sent by the users.GHO tokens have been implemented to provide utility around the future of payments and funding.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 152,
    hackathon: "ETHGlobal Tokyo",
    title: "Sponsored Voting: Governor Extension",
    more: "https://ethglobal.com/showcase/sponsored-voting-governor-extension-p9p0o",
    demo: "https://www.tally.xyz/gov/ETHTokyo-Sponsored-Voting-2",
    repo: "https://github.com/wildmolasses/sponsored-voting",
    video: "",
    winner: "",
    short: "Extending OpenZeppelin Governor contract to sponsor the gas fees of proposal votes",
    description: "This governor extension introduces proposal vote sponsorship to DAO governance token holders. This makes it easier for protocol users to participate in governance",
      "FIELD11": " which in turn fosters equitability and diversity. It does so by adding ERC-4337 compliant paymaster functionality to the OpenZeppelin governor contract. And because it uses the OpenZeppelin governor",
      "FIELD12": " it's interoperable with a bunch of existing UIs and tooling. With this extension",
      "FIELD13": " governance token holders with 0 ETH in their wallet can cast votes on DAO proposals! Future work could include:expand the scope of what can be sponsored (e.g. proposal execution)support more vote methods (currently only castVote supported)give governor a way to punish griefingharden paymaster validation logic",
      "FIELD14": " include better unit testshelper library for forge users This project is a foundry project written in solidity that imports the @openzeppelin/contracts as well as the Ethereum Foundation's infinitism/account-abstraction contracts. It composes them in a new",
      "FIELD15": " original contract called GovernorSponsoredVoting.sol.  Tests are written to prove that token holders with 0 ETH in their wallet can indeed cast their vote on a proposal",
      "FIELD16": " with gas paid entirely by the governor contract's new paymaster capabilities. However",
      "FIELD17": " there is 1 remaining block.number call (to fix) that prevents the UserOperation from getting included in a goerli bundle.I cut a whole bunch of corners",
      "FIELD18": " for example:only support castVote and not other relevant vote methodsonly support BasicAccount style executehardcoded paymaster address in trampoline",
      "FIELD19": " as currently trampoline wants a paymaster url insteadcan currently be griefed by malicious account who calls with innocent calldata but whose implementation spends the gas on something irrelevant. See TODO on blacklisting / reverting in 2nd postOp.I tried to mark TODOs in appropriate places. Would love to keep working on this!",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 153,
    hackathon: "ETHGlobal Tokyo",
    title: "Accio.NFT",
    more: "https://ethglobal.com/showcase/accio-nft-c1tkj",
    demo: "https://accio-frontend-fork.vercel.app/",
    repo: "https://github.com/2023ethtokyoteam1/.github",
    video: "",
    winner: "4️⃣ Linea — Best Use 🦄 1inch — 🥉 Best use of Fusion 🏆 Hyperlane — Best Overall ",
    short: "A one-click magic for buying NFTs with cross-chain liquidity.",
    description: "Accio.NFT combines interchain bridging protocol with NFT marketplaces to create a one-click UX for buying NFTs with cross-chain liquidityBackgroundAs the Ethereum ecosystem expands",
      "FIELD11": " we are seeing more and more new L2 chains.This means that in order to use multiple products",
      "FIELD12": " users need to move liquidity between multiple chains. The current UX for bridging liquidity is quite cumbersome—users need to swap and bridge tokens from each chain separately.So we thought that there needs to be an easy way for users to collect assets from multiple chains at once and use their beloved products.FunctionalitiesUsers can check their wETH balances on 4+ chains (Goerli",
      "FIELD13": " Mumbai",
      "FIELD14": " Linea",
      "FIELD15": " Optimism)Users can swap USDC -> wETH using 1inch Fusion APIUsers can check the NFTs currently on sale (Opensea)Users can buy NFTs by specifying how much they want wETH they want to use from which chains (e.g. 0.5 wETH on Linea and 0.5 wETH on Mumbai) ModulesSmart contractsThe buy function on the LiquidityAggregator contract is the initial entrypoint that triggers the cross-chain liquidity aggregation and NFT purchase flow:Stores the user's request within the contract storageFetches user funds on the local chain if neededSends interchain messages to the LiquidityAggregators on the remote chainsOnce the remote LiquidityAggregator receives the message",
      "FIELD16": " it gets the user's funds on the remote chain and calls transferRemote on the HypERC20 token to send them over to the origin chain.Upon a successful interchain transfer",
      "FIELD17": " the handleWithToken function on the origin chain's LiquidityAggregator is called and if the funds are all aggregated",
      "FIELD18": " an NFT purchase is executed.FrontendEasily view liquidity across multiple chainsDisplay the aggregated value of various tokens from multiple chains through the 1inch APISupport simple swaps across multiple chains using the 1inch Fusion SDKAggregate and display NFT collection information from multiple chains and marketplaces. Also used opensea.io APIIntegrated with the accio.nft smart contractView your NFTs distributed across multiple chainsTech stackHyperlaneUsing Hyperlane was essential for making our project since we needed both a general messaging bridge and a token bridge. We had fun trying to deploy Hyperlane on a new chain (Linea) and running validators/relayers ourselves.One challenge we encountered was related to relayers--our messages kept failing because the relayer transaction ran out of gas. We ended up digging up the rust code to find out where the gas limit was being set and doubled it to make our transactions go through.Another challenge was modifying the Warp Route default contracts so that it could send arbitrary data along with bridging token. We wanted to use hyperlane-deploy",
      "FIELD19": " which contains helper scripts for deploying and testing Warp Route",
      "FIELD20": " but we couldn't use it as given because it was importing hyperlane-sdk as an npm package. We ended up using git submodule to solve this problem.1inchWe implemented 1inch Fusion SDK into our service so that users can swap their assets in the most safe and gas-efficient wayWe used the 1inch quote API to enable a quick glance at the total value of various tokens on each chain.Metamask (Linea)We deployed our contract on Linea Goerli network because we believed that it has potential to become a widely-used L2 chain for NFTs and gaming since it is cheap and is very well integrated with other products such as Metamask and Infura.AirstackWe used Airstack to get NFT metadata and the latest transfer information for each NFT collection",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 154,
    hackathon: "ETHGlobal Tokyo",
    title: "Pansy AMM",
    more: "https://ethglobal.com/showcase/pansy-amm-7330w",
    demo: "",
    repo: "https://github.com/wasabijiro/Pansy-AMM",
    video: "",
    winner: "",
    short: "Pansy AMM is an AMM that utilizes a currency basket-style liquidity pool to achieve greater profitability and lower impermanent loss. This is made possible through the implementation of active liquidity control and rebalancing mechanisms.",
    description: "Pansy AMM proposes a new approach to liquidity provision in DeFi with a smart AMM that achieves high returns and zero impermanent loss. Existing liquidity provision suffers from low returns due to liquidity fragmentation and high risk due to impermanent loss. Pansy AMM solves these issues by using demand-based liquidity management and a currency basket pool with a pricing mechanism based on market price rather than coin balances in the pool. This makes impermanent loss zero and provides zero slippage to traders for market price. Pansy AMM incentivizes swaps that improve the pool balance and penalizes swaps that worsen it. Pansy AMM is highly composable with other protocols and will be a new liquidity infrastructure to facilitate the DeFi ecosystem. Solidity: for writing the smart contract codeTruffle: for compiling",
      "FIELD11": " testing",
      "FIELD12": " and deploying the smart contractsReact: for building the front-end user interfaceWeb3.js: for interacting with the Ethereum blockchain from the front-endInfura: for connecting to the Ethereum network",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 155,
    hackathon: "ETHGlobal Tokyo",
    title: "🥭MPR",
    more: "https://ethglobal.com/showcase/mpr-7r4n5",
    demo: "",
    repo: "https://github.com/clober-dex/mango-farmers-club",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Mango Farmers Club: The first community token project on Polygon zkEVM",
    description: "The Mango Farmers Club (MFC) is a decentralized autonomous organization (DAO) dedicated to promoting the adoption of Central Limit Order Book (CLOB) infrastructure on the Polygon zkEVM ecosystem. To distribute its tokens",
      "FIELD11": " MFC will conduct an airdrop and hold a public registration event",
      "FIELD12": " with no allocation reserved for the team. The funds raised from the registration event will be sent to the Mango Treasury",
      "FIELD13": " which will distribute 0.1% of its USDC balance as daily dividends to MANGO farmers(stakers). In general",
      "FIELD14": " building a project like the Mango Farmers Club DAO would require a variety of technologies",
      "FIELD15": " including blockchain technology",
      "FIELD16": " smart contracts",
      "FIELD17": " and decentralized finance (DeFi) protocols. These technologies are typically pieced together to create a functioning ecosystem that can be used by stakeholders.For example",
      "FIELD18": " the Mango Farmers Club DAO would need to use a blockchain network like Polygon zkEVM to provide a secure and decentralized infrastructure for its operations. The DAO would also need to create smart contracts to automate its processes",
      "FIELD19": " such as the distribution of daily dividends to stakers. Additionally",
      "FIELD20": " the project would need to integrate with DeFi protocols like CLOB infrastructure to enable trading and liquidity on the platform.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 156,
    hackathon: "ETHGlobal Tokyo",
    title: "DeCast",
    more: "https://ethglobal.com/showcase/decast-pp7jn",
    demo: "https://decast.xyz/",
    repo: "https://github.com/deCast-xyz/frontend",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "DeCast is an open-source and extensive live-streaming platform for creators.",
    description: "・OverviewDeCast is an open-source and extensive live-streaming platform for creators.As anyone can add any modules",
      "FIELD11": " we can cover 36B hours of live stream view as a censorship-resistant",
      "FIELD12": " non-exploitative",
      "FIELD13": " and all-in-one platform.As the first step",
      "FIELD14": " we build modules for token-gate live streaming by subscription with Livepeer",
      "FIELD15": " Superfluid",
      "FIELD16": " and Push.・ProblemWhile live streaming becomes increasingly important for creators to connect with their audience and around 36B hours of live streaming were watched in 2021",
      "FIELD17": " they face several challenges that hinder their growth and creative freedom.Censorship and dependency on centralized platforms",
      "FIELD18": " limiting control and expressionLosing a significant portion (30-50%) of their membership revenue to platforms like YouTube and TwitchCreators or Developers cannot customize or add features based on their demand.・SolutionDeCast offers a solution for creators with an open-source and extensive live-streaming platform tailored for creators.Utilizing Livepeer",
      "FIELD19": " DeCast provides a decentralized video infrastructure that ensures censorship resistance and greater autonomy for creatorsEliminating excessive fees and enabling creators to retain a larger share of their revenueWith Superfluid money streaming",
      "FIELD20": " fans can seamlessly support their favorite creators through easy",
      "FIELD21": " secure",
      "FIELD22": " and transparent subscriptionsIt’s open source and module base. So developers/creators can add functionalities as modules.・How it worksAs Creators and Viewers",
      "FIELD23": " we will explain the modules of live-streaming and token gate by subscription.CreatorsCreate an account by minting Creator NFT and set up membership conditionStart live-streaming by selecting modules like stream-gated",
      "FIELD24": " NFT-gated with Sismo",
      "FIELD25": " etc…Do live streaming enabled by the OBS app and LivepeerViewersSelect creators who are doing live streamingSubscribe to membership by paying with Superfluid money streaming or Prove your holding NFT by Sign in with SismoWatch live streaming and engage by live chatDevelopersDevelopers can add modules to our platform・Future workBuild the module template for developers to build and add their own modulesAdd more modules like 1 on 1 video streaming",
      "FIELD26": " Tipping",
      "FIELD27": " etc… ・LivepeerWe use Livepeer to create the token-gated live streaming experience.Creators can initiate the live streaming. And for the viewer side",
      "FIELD28": " If they have a specific token or subscribe to the creator",
      "FIELD29": " they can watch live streaming.・SuperfluidWe use Superfluid to create the subscription payment from viewers to creators.Creators can set how much they wanna receive as a monthly subscription and they can see the revenue update every second.Viewers need to subscribe (open the money stream) to watch the stream-gated live streaming.・PushWe use Push Protocol to create the group live chat feature which is shown on each live streaming.Creators and viewers can communicate through the group live chat with each other.・SismoWe use Sismo to create the NFT token-gated live streaming while protecting users’ privacy.Users can prove if they have that NFT without revealing the wallet address and accessing the token-gated live streaming.・WorldcoinWe use Worldcoin to prove personhood when creators register to do the live streaming.By having that",
      "FIELD30": " we can avoid the bot and several accounts from one person.・PolygonWe deployed ERC-721 contract on Polygon Mumbai. So we can mint a creator NFT when creators sign up.・CeloWe deployed ERC-721 contract on Celo testnet. So we can mint a creator NFT when creators sign up.・ScrollWe deployed ERC-721 contract on Scroll Alpha Testnet. So we can mint a creator NFT when creators sign up.・GnosisWe deployed ERC-721 contract on Chiado Testnet. So we can mint a creator NFT when creators sign up.・MantleWe deployed ERC-721 contract on Mantle Testnet. So we can mint a creator NFT when creators sign up.",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 157,
    hackathon: "ETHGlobal Tokyo",
    title: "App-chain-template",
    more: "https://ethglobal.com/showcase/app-chain-template-fgbb4",
    demo: "https://studio.youtube.com/video/757brmd7k0Y/edit",
    repo: "https://github.com/kazumal/Chain-Optima",
    video: "",
    winner: "",
    short: "Create",
    description: " customize & deploy your own blockchain with our app! Choose from DeFi",
      "FIELD11": " GameFi",
      "FIELD12": " NFT",
      "FIELD13": " DAO templates",
      "FIELD14": " simulate",
      "FIELD15": " test & manage your chain with our all-in-one platform! #blockchain #DeFi #NFT",
      "FIELD16": "Our application is an all-in-one platform designed to help users create",
      "FIELD17": " customize",
      "FIELD18": " and deploy their own blockchain projects easily. Users can choose from a variety of templates",
      "FIELD19": " such as DeFi",
      "FIELD20": " GameFi",
      "FIELD21": " NFT",
      "FIELD22": " and DAO",
      "FIELD23": " depending on their project's requirements. These templates come with customization options",
      "FIELD24": " allowing users to add or remove specific features as needed. Comprehensive tutorials and documentation support the development process",
      "FIELD25": " while debugging features help developers quickly address any issues. The platform is built using a combination of cutting-edge technologies and tools. The backend is developed in Node.js",
      "FIELD26": " utilizing the Express.js framework for handling APIs and server-side logic. Smart contracts are written in Solidity for Ethereum-based projects or other suitable languages for alternative blockchain platforms. Frontend development is done using React.js for a responsive and interactive user interface.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 158,
    hackathon: "ETHGlobal Tokyo",
    title: "Smoood Wallet",
    more: "https://ethglobal.com/showcase/smoood-wallet-4j4b9",
    demo: "",
    repo: "https://github.com/Architsharma7/Smoood-Wallet",
    video: "",
    winner: "🅰️🅰️ Safe — Best Web2 Experience with AA ",
    short: "Payment wallet that even your grandma can use ",
    description: " built with Safe and Account Abstraction along with Security Qn based Wallet Recovery",
      "FIELD11": "Smoood Wallet is for everyone ",
      "FIELD12": " who has Zero Knowledge about Crypto ",
      "FIELD13": " but can still benefit from features offered by blockchain. It is a wallet with the smoothest payment experience along with Simple Wallet Recovery method ",
      "FIELD14": " so even your Mom can use it to pay you.There is no Crypto Jargon from the onboarding itself . These are the major feature of our wallet .Social Login - Sign Up/ Signin Using web2 login methods like gmail ",
      "FIELD15": " AppleId and Phone numberSafe MultiSig  -  Smart Contract Wallet with Safe  ",
      "FIELD16": " to support endless customisability using Guards and Modules for your wallet and provide the best in class security of your funds and experienceQr Code Payments ",
      "FIELD17": " Users could just simply scan the QR Code from a merchant or a friend ",
      "FIELD18": " and pay directly in a single click with 0 gas fees from the wallet.Wallet Recovery -  We specifically designed a recovery system which is very prevalent ",
      "FIELD19": " using a Combination of PINs and Security Questions to recover the wallet .Gasless Transaction - All the txs are relayed directly via SAFE relayer using GELATO 1 Balance in the backend to provide a friction free transaction experience.Last but not the least - Simple all crypto expense management section ",
      "FIELD20": " to track all your expenses in crypto right from your dashboard We are using Safe Account Abstraction Kit to Implement the whole Smooth experience on our WebApp .SAFE Auth Kit was used to onboard users with Social Login ",
      "FIELD21": " via Web3AUTHSAFE Protocol SDK is used to interact with SAFE Contracts and the wallet.SAFE Relay Kit was used to relay the transactions via Gelato's 1 Balance & SyncFEE ",
      "FIELD22": " to provide the user wit gasless experience.Transak is being used to add the Crypto-fiat ",
      "FIELD23": "on-off Ramping ",
      "FIELD24": " so the user can just simply the crypto with Cards and other payment options.The frontend application is built in Next.js along with designing using Tailwind CSS ",
      "FIELD25": " and vanilla JS. Backend was built using Hardhat to create and deploy the contract. built in Solidity.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 159,
    hackathon: "ETHGlobal Tokyo",
    title: "Wave 🌊",
    more: "https://ethglobal.com/showcase/wave-b806a",
    demo: "",
    repo: "https://github.com/Wave-ETH-Global",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🪄 Airstack — 🥇 Best Idea Implementation ",
    short: "Wave allows web3 natives to manage their currently fragmented internet identity",
    description: " while building and maintaining its subsequent social graph",
      "FIELD11": "As web3 grows",
      "FIELD12": " we start to see non-financial applications",
      "FIELD13": " especially those in social",
      "FIELD14": " reputation",
      "FIELD15": " and attestation. But as we spend more time on these different platforms",
      "FIELD16": " our identity becomes fragmented. Predictably",
      "FIELD17": " we'll likely repeat what happens with our web2 experience where while we are keeping our different identities separated for different purposes",
      "FIELD18": " we are constantly migrating from platform to platform it becomes challenging to keep in touch with our connections.Wave allows you to express your identity differently in different situations to build and maintain connections through a filterable and portable social graph that is truly yours.Imagine having all your internet footprints in one place",
      "FIELD19": " but tailored into different identity profiles for different purposes: professional networking",
      "FIELD20": " expressing your worthiness to join a community",
      "FIELD21": " getting whitelisted",
      "FIELD22": " or simply showing off your lifestyle.Here's how it works.Wave aggregates all your on-chain footprints. Then visualise them in a fun and easy-to-understand format. This is only accessible to you.You can drag and drop your information as needed and build an identity profile for each purpose.Build a social graph through each connection you make.Use the social graph to collaborate with your connections.As an MVP",
      "FIELD23": " we are building a filterable network graph where you can easily search your contact directory for future collaboration. Say",
      "FIELD24": " I’m going to [ETHGlobal Lisbon] for a hackathon. I can filter my graph to find a [uiux designer]",
      "FIELD25": " who is in [Lisbon] or is going to [Lisbon]",
      "FIELD26": " and are passionate about the [identity] space. My social graph will show the result of my connections who fit the filters. Or if I do not have any such person in my contact but some of my connections do",
      "FIELD27": " I can reach out to them for referral to those second-degree connections.And this is just the beginning. With Wave",
      "FIELD28": " your identity will give you so much utility. Other use cases in our roadmap include community CRM where you automatically get a member directory through a simple tag on Wave profile",
      "FIELD29": " use your identity vault or profile to get a personalised AI assistant. And of course",
      "FIELD30": " monetisation of our own data the similar way web2 platforms abusively sell our data to brands and businesses. Our application is composed currently of two parts: web application and node. Node is the backend part of our project",
      "FIELD31": " and it is used to aggregate user's digital footprints to as a basis to build multiple identity profiles and create an associated social graph.This social graph is our magic! Users can query different data points to find their people for collaboration. This query is written in pure SQL and it takes only one query to get all people from your network graph.Our web application is written in React/TypeScript and Wave Node is written in Golang and PostgreSQL for storing user data.We use the following sponsor technologies: Airstack for aggregating on-chain data and Polygon PoS for claiming user handles as NFT",
      "FIELD32": " it works pretty much like an ENS registry",
      "FIELD33": " so people have their identities in their hands. Web application connects to our Wave Node to get stuff done. In the future",
      "FIELD34": " we are going to have a decentralized network of these nodes.",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 160,
    hackathon: "ETHGlobal Tokyo",
    title: "Taste Journey Ticket",
    more: "https://ethglobal.com/showcase/taste-journey-ticket-da85u",
    demo: "",
    repo: "https://github.com/shzxcv/GourmetJourneyTicket",
    video: "",
    winner: "🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize ",
    short: "This project aims to provide a restaurant reservation system using NFT to solve the problems associated with centralized reservation platforms.  1. Transfer reservation.  2. Use NFT as proof of attendance  3. Gourmet record 4. Enable restaurants to visualize their fans.",
    description: "Our product is a decentralized restaurant reservation system designed to solve the problems associated with centralized reservation platforms. Traditional platforms often result in users losing their hard-earned reservations due to last-minute changes",
      "FIELD11": " which can lead to revenue loss for restaurants. With Gourmet Journey Ticket",
      "FIELD12": " we use NFTs to offer a decentralized reservation system that allows users to transfer their reservation NFTs to others. When they check in at the restaurant",
      "FIELD13": " their NFT is released and converted to an attendance NFT",
      "FIELD14": " which records their dining history on the blockchain. Meanwhile",
      "FIELD15": " restaurants can visualize their fanbase and provide utilities through direct connection to wallets. Our system not only centralizes fragmented dining records but also supports the vision of DID for food. Gourmet Journey Ticket aims to become a decentralized restaurant reservation system that benefits both users and restaurants",
      "FIELD16": " ultimately supporting the future of food. We have Next.js as our front end and thirdweb and the graph as our back end.And we keep the system secure by inserting store information into the database and backup information into Filecoin",
      "FIELD17": " a distributed storage system.Next.js is developed using the GraphQL Client Apollo and the component library Ant Design.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 161,
    hackathon: "ETHGlobal Tokyo",
    title: "bitFlyer Governance",
    more: "https://ethglobal.com/showcase/bitflyer-governance-dvd5u",
    demo: "",
    repo: "https://github.com/bitFlyer-ETHGlobal2023/bitFlyerGovernance",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Our project uses proof of reserve to offer a more accessible and secure way for users to participate in governance. With our NFT",
    description: " users can easily vote on proposals using their exchange-held assets",
      "FIELD11": " without needing to worry about security or high network fees.",
      "FIELD12": "Our NFT project aims to set a new standard for cryptocurrency exchanges worldwide",
      "FIELD13": " allowing their users to participate in governance activities without the need to withdraw their coins from the exchange",
      "FIELD14": " and avoiding high fees and other problems.Using proof of reserve",
      "FIELD15": " users can request exchange to lock any amount of their coins for any duration. An NFT is then minted as proof of ownership and locking of the coins",
      "FIELD16": " which can be used on platforms like Snapshot to vote for different projects.Because the NFT is a certificate of ownership",
      "FIELD17": " it doesn't require to be in any specific blockchain",
      "FIELD18": " only on those that the voting platform supports. This enables the minting to happen in layer 2 blockchains",
      "FIELD19": " for lower fees and efficiency. It also allows users to handle the proof of all the coins they have locked for voting in a single blockchain and wallet. In order to achieve proof of reserve",
      "FIELD20": " the exchange will create a Merkle tree",
      "FIELD21": " where each leaf represents that a user has performed a lock on one of their assets. The exchange will then provide the user with the Merkle proof required for verification",
      "FIELD22": " as well as other relevant information (currency",
      "FIELD23": " amount",
      "FIELD24": " the user's personal address and lock expiry timestamp). The exchange will publish the root of the tree to the smart contracts deployed across the different chains they wish to support.When a user requests the minting of an NFT",
      "FIELD25": " the smart contract will receive the NFT minting call and validate the input",
      "FIELD26": " using the Merkle proof provided by the exchange. If the validation is successful",
      "FIELD27": " an NFT will be minted with information about the locked assets",
      "FIELD28": " such as the currency and amount. This NFT can then be used on any voting platform",
      "FIELD29": " such as Snapshot.",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 162,
    hackathon: "ETHGlobal Tokyo",
    title: "Streaming NFT with wallet",
    more: "https://ethglobal.com/showcase/streaming-nft-with-wallet-n559o",
    demo: "https://eth-global-tokyo.vercel.app/",
    repo: "https://github.com/synschismo/eth-global-tokyo/",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🥇 Superfluid — Top Project ",
    short: "A Wallet with a NFT rental function that allows you to rent when you need it and lend it when you don't need it. Rentals can be from just 1 second to indefinitely and Renter just pay for while using.",
    description: "The project uses a contract wallet so that users can rent NFTs when they want to use them and easily lend them out when they don't need them.It provides a content experience without owning the NFT",
      "FIELD11": " much like watching a streaming video without purchasing the video.The project uses a contract wallet so that users can rent NFTs when they want to use them and easily lend them out when they don't need them.It provides a content experience without owning the NFT",
      "FIELD12": " much like watching a streaming video without purchasing the video. This project combines smart contracts with the Lit Protocol to eliminate as much as possible the signature operations that occur with each transaction. In addition",
      "FIELD13": " by using Superfluid to pay the rental fee",
      "FIELD14": " the payment is executed only while the rental is rented without setting a rental term. If the user forgets to return the item",
      "FIELD15": " the payment will continue forever",
      "FIELD16": " so we combine this with Lit Action to allow the user to reserve a return date and time for the NFT. Airstack is used for the front-end and back-end that handles the metadata of rented and owned NFTs.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 163,
    hackathon: "ETHGlobal Tokyo",
    title: "ZKredentials",
    more: "https://ethglobal.com/showcase/zkredentials-costv",
    demo: "https://zkredentials-interface.vercel.app/",
    repo: "https://github.com/ZKredentials",
    video: "",
    winner: "📜 Scroll — Just Deploy 🧑‍⚖️ Worldcoin — Best Governance App  🏊 The Graph — Pool Prize 🏆 Push — Most Innovative 🏊‍♂️ Polygon — Pool Prize 🥷 Taiko — 🥈 ZK Zone 🥇 Gnosis Chain — Best Use ",
    short: "ZKredentials: Decentralized",
    description: " trustless resume verification for anon devs. Powered by zk-SNARKs",
      "FIELD11": " Ethereum & IPFS. Showcase skills",
      "FIELD12": " maintain privacy",
      "FIELD13": " & prove expertise in a secure ecosystem. Join our mission to revolutionize talent discovery & validation!",
      "FIELD14": "INTRODUCTIONZKredentials is a decentralized resume verification platform designed to empower anonymous developers by leveraging zero-knowledge proofs (zk-SNARKs)",
      "FIELD15": " Ethereum blockchain",
      "FIELD16": " and the InterPlanetary File System (IPFS). The platform aims to revolutionize talent discovery and validation for job hunters",
      "FIELD17": " while preserving privacy and ensuring security for job seekers.RELEVANT STATISTICS IN WEB3A survey conducted by cryptocurrency exchange Kraken found that more than 40% of respondents preferred to remain anonymous or use a pseudonym when interacting with others in the crypto industry. The survey also found that privacy was one of the most important factors for respondents when choosing a cryptocurrency exchange or wallet. (Source: Kraken",
      "FIELD18": " \"Crypto Security: A Survey of Investor Security Habits and Attitudes",
      "FIELD19": "\" 2019)In addition",
      "FIELD20": " according to a survey conducted by employment website Indeed",
      "FIELD21": " job postings in the crypto industry increased by 621% from 2015 to 2018",
      "FIELD22": " while searches for crypto-related jobs increased by 1",
      "FIELD23": "457% over the same period. However",
      "FIELD24": " the same report also notes that the supply of candidates has not kept pace with the demand for crypto talent. (Source: Indeed",
      "FIELD25": " \"Bitcoin Jobs: How to Get Paid in Cryptocurrency",
      "FIELD26": "\" 2018)Another survey conducted by CoinDesk in 2020 found that more than half of the respondents (53%) believed that pseudonymity was important to the crypto industry",
      "FIELD27": " and that it was a key factor in maintaining the industry's decentralized and open culture. (Source: CoinDesk",
      "FIELD28": " \"CoinDesk Research: The State of Crypto 2020\")WHY WE NEED ZKREDENTIALSAs we've seen from the data",
      "FIELD29": " the need for privacy and pseudonymity is evident within the crypto industry. An increasing number of individuals are seeking anonymity in their interactions",
      "FIELD30": " and this extends to their professional lives as well. This growing demand for privacy in the job market",
      "FIELD31": " coupled with the rapid expansion of the crypto industry",
      "FIELD32": " highlights the necessity for a platform like ZKredentials.ZKredentials addresses this essential need by providing a secure and privacy-preserving solution for job seekers",
      "FIELD33": " allowing them to showcase their skills and credentials without compromising their anonymity. By employing advanced technologies like zk-SNARKs",
      "FIELD34": " Ethereum",
      "FIELD35": " and IPFS",
      "FIELD36": " ZKredentials allows users to generate resumes and verify their qualifications without revealing sensitive personal information.Moreover",
      "FIELD37": " ZKredentials enables a trustless system that reduces the reliance on centralized entities",
      "FIELD38": " such as job boards or recruitment agencies. This decentralization empowers job seekers by giving them greater control over their data and credentials. At the same time",
      "FIELD39": " it ensures that potential employers have access to accurate and trustworthy information about candidates",
      "FIELD40": " which helps streamline the hiring process and improve overall efficiency.Additionally",
      "FIELD41": " the platform caters to the unique needs of the crypto industry",
      "FIELD42": " which is known for its decentralized and open culture. By providing a privacy-focused resume verification system",
      "FIELD43": " ZKredentials supports the community's ethos and promotes the growth of the industry as a whole.CONCLUSIONIn conclusion",
      "FIELD44": " ZKredentials is an essential tool for job seekers and employers in the crypto industry. By prioritizing privacy and security",
      "FIELD45": " the platform revolutionizes talent discovery and validation",
      "FIELD46": " meeting the unique demands of the industry and helping bridge the gap between the growing number of job opportunities and the limited supply of qualified candidates. As the crypto industry continues to expand",
      "FIELD47": " platforms like ZKredentials will play a crucial role in fostering a thriving job market that aligns with the values and expectations of its users. The project consists of a frontend built React and Next.js",
      "FIELD48": " backend with Node.js and smart contracts with Solidity. The frontend draws data from GraphQL APIs",
      "FIELD49": " including our own custom subgraphs leveraging The Graph.User Authentication: Users log in using their GitHub",
      "FIELD50": " or WorldID account via OAuth",
      "FIELD51": " allowing the platform to fetch relevant data using the GitHub GraphQL API or verify their unique human status with WorldID. The system can continually add more modules based on user demand for different credibility sources.User Registration: Users are minted a resume ERC-721 token when they create their profile for the first time. If a user isn't registered yet",
      "FIELD52": " they will not have an ERC-721. Each user can only have one ERC-721 for each module.Resume Generation: Users can select special criteria unique to each module to build their resume. Taking GitHub as an example",
      "FIELD53": " users select specific GitHub-based criteria for their resumes",
      "FIELD54": " which triggers the backend to generate zero-knowledge proofs (ZK proofs) for each criterion",
      "FIELD55": " ensuring data verification without revealing sensitive information.Serialize ZK proofs: The generated ZK proofs are converted into a suitable format",
      "FIELD56": " such as a JSON object.Add ZK proofs to IPFS: ZK proofs are uploaded to IPFS via a client library. IPFS then returns a content identifier (CID) for the uploaded proofs.Store the CID on-chain: A MetaMask transaction is triggered to store the CID in the respective smart contract depending on the module (GitHub",
      "FIELD57": " WorldID)",
      "FIELD58": " associating it with the user's Ethereum address. An ERC-721 token is minted for the user. This ERC-721 will enable other platforms to build on top of the dApp since all resume information is stored inside it. Once an ERC-721 is minted to the user",
      "FIELD59": " it also means the user is registered for that specific module.User Profile: The platform displays the user's generated resumes and associated ZK proofs",
      "FIELD60": " allowing users to view",
      "FIELD61": " edit",
      "FIELD62": " delete",
      "FIELD63": " and manage their data.Resume Verification: Another user can input the Ethereum address or unique proof identifier to verify a resume. The frontend fetches the associated CID from the respective smart contract",
      "FIELD64": " retrieves the ZK proofs from IPFS",
      "FIELD65": " and verifies their validity through the Verifier.sol smart contract.Chat with Anon Devs with Push Protocol: Push is integrated into ZKredentials to allow potential employers to reach out and chat with anon developers after viewing their resume on the app for further discussion.",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 164,
    hackathon: "ETHGlobal Tokyo",
    title: "CTFhub",
    more: "https://ethglobal.com/showcase/ctfhub-4sy78",
    demo: "https://project-ui-svelte.vercel.app/",
    repo: "https://github.com/eth-tokyo-project/flagship",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "CTFhub is a one-stop-shop for CTF competitions. Now all the CTF rockstars are in one place and players can boast their CTF record in their on-chain resume and socials. Organisers can deploy competitions in a permissionless way",
    description: " and benefit from CTFhub's widespread adoption.",
      "FIELD11": "CTFhub is a competition that allows the user to deploy CTF challenges in a permissionless way.  Once completing the challenge the hacker is rewarded with a soul bound NFT.Three Parts:  Challenge Builder",
      "FIELD12": " Hacker",
      "FIELD13": " and the protocol that connects them allOne competition live (more coming): Catch the Ether.Sponsors can use the protocol to launch their own competition and potentially reward hackers with cash prizes and or use for potential hiring purposes.The NFTs are soul bound tokens and can be used for reputation.The hacker can then showcase their NFT to potential employers and or just for fun to their friends.  We will eventually create a leaderboard. This project uses svelte for front end",
      "FIELD14": " and was developed using foundry and scaffold ETH 2 :D We deployed multi-chain",
      "FIELD15": " to be a core protocol in onboarding users to new EVMs. We opted for a simplistic platform consisting of router protocol",
      "FIELD16": " and FE reading the state of the chain",
      "FIELD17": " for ease of adoption by competition organisers. We rely on indexed data APIs such a Airstack help display players soul bound NFT awards and populate the leaderboard. All metadata for the souldbound tokens is generated on chain using SVG 🔥",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 165,
    hackathon: "ETHGlobal Tokyo",
    title: "splash X",
    more: "https://ethglobal.com/showcase/splash-x-25aff",
    demo: "https://tinyurl.com/a25rsk37",
    repo: "https://github.com/dilbo139/splashx",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize 🥉 zkBob — Best Use ",
    short: "SplashX is a video platform that streams rewards to their earliest and most devoted fans",
    description: "SplashX is designed to incentivize and reward early and loyal viewers",
      "FIELD11": " giving them a stake in the content they love. With SplashX",
      "FIELD12": " viewers can earn rewards for watching their favorite creators' videos",
      "FIELD13": " and creators can finally connect with their most dedicated fans.The current model favors big names and established creators",
      "FIELD14": " making it difficult for new and up-and-coming creators to get noticed. SplashX aims to level the playing field by incentivizing and rewarding early and loyal viewers",
      "FIELD15": " allowing new creators to connect with their audience and build a following.Incentivizing early and loyal users can help to address the issue of discoverability. With so much online content",
      "FIELD16": " it can be difficult for new creators to get noticed. By incentivizing early and loyal users",
      "FIELD17": " you are creating a mechanism for these users to help promote the content they love and give new creators a chance to be seen and heard.Overall",
      "FIELD18": " SplashX addresses the critical issues of discoverability",
      "FIELD19": " revenue",
      "FIELD20": " and fairness in the content creation and distribution model. SplashX is helping create a more equitable and sustainable ecosystem for all involved by providing a platform that incentivizes and rewards creators and viewers.**SplashX Presentation Deck / Demo Link - https://tinyurl.com/a25rsk37 SplashX is a video platform that incentivizes and rewards early and loyal viewers. Our platform enables users to connect their wallets through the Metamask SDK or create a Gnosis Safe Wallet through AuthKit. Once connected",
      "FIELD21": " users can upload videos and select their preferred reward token",
      "FIELD22": " ApeCoin or zkBob.Upon clicking upload",
      "FIELD23": " the video is immediately uploaded to IPFS",
      "FIELD24": " and a Lens Publication is created. When a viewer clicks play",
      "FIELD25": " the database checks if the viewer has already watched data exist (i.e.",
      "FIELD26": " on the first watch",
      "FIELD27": " they can get the coin reward). Our Airstack query checks if the viewer owns the claimable amount of ApeCoin/zkBob. If the answer is no",
      "FIELD28": " then the reward token is streamed to the viewer over the duration of the video using Superfluid",
      "FIELD29": " with the flow rate calculated based on video duration.A push notification is sent once the play button is clicked to notify viewers that they've started earning. Our Explore page lists all the videos from Lens using The Graph subgraph",
      "FIELD30": " making it easy for users to find new content to watch and earn rewards.",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 166,
    hackathon: "ETHGlobal Tokyo",
    title: "splash X",
    more: "https://ethglobal.com/showcase/splash-x-25aff",
    demo: "https://tinyurl.com/a25rsk37",
    repo: "https://github.com/dilbo139/splashx",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize 🥉 zkBob — Best Use ",
    short: "SplashX is a video platform that streams rewards to their earliest and most devoted fans",
    description: "SplashX is designed to incentivize and reward early and loyal viewers",
      "FIELD11": " giving them a stake in the content they love. With SplashX",
      "FIELD12": " viewers can earn rewards for watching their favorite creators' videos",
      "FIELD13": " and creators can finally connect with their most dedicated fans.The current model favors big names and established creators",
      "FIELD14": " making it difficult for new and up-and-coming creators to get noticed. SplashX aims to level the playing field by incentivizing and rewarding early and loyal viewers",
      "FIELD15": " allowing new creators to connect with their audience and build a following.Incentivizing early and loyal users can help to address the issue of discoverability. With so much online content",
      "FIELD16": " it can be difficult for new creators to get noticed. By incentivizing early and loyal users",
      "FIELD17": " you are creating a mechanism for these users to help promote the content they love and give new creators a chance to be seen and heard.Overall",
      "FIELD18": " SplashX addresses the critical issues of discoverability",
      "FIELD19": " revenue",
      "FIELD20": " and fairness in the content creation and distribution model. SplashX is helping create a more equitable and sustainable ecosystem for all involved by providing a platform that incentivizes and rewards creators and viewers.**SplashX Presentation Deck / Demo Link - https://tinyurl.com/a25rsk37 SplashX is a video platform that incentivizes and rewards early and loyal viewers. Our platform enables users to connect their wallets through the Metamask SDK or create a Gnosis Safe Wallet through AuthKit. Once connected",
      "FIELD21": " users can upload videos and select their preferred reward token",
      "FIELD22": " ApeCoin or zkBob.Upon clicking upload",
      "FIELD23": " the video is immediately uploaded to IPFS",
      "FIELD24": " and a Lens Publication is created. When a viewer clicks play",
      "FIELD25": " the database checks if the viewer has already watched data exist (i.e.",
      "FIELD26": " on the first watch",
      "FIELD27": " they can get the coin reward). Our Airstack query checks if the viewer owns the claimable amount of ApeCoin/zkBob. If the answer is no",
      "FIELD28": " then the reward token is streamed to the viewer over the duration of the video using Superfluid",
      "FIELD29": " with the flow rate calculated based on video duration.A push notification is sent once the play button is clicked to notify viewers that they've started earning. Our Explore page lists all the videos from Lens using The Graph subgraph",
      "FIELD30": " making it easy for users to find new content to watch and earn rewards.",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 167,
    hackathon: "ETHGlobal Tokyo",
    title: "Artsy Wave",
    more: "https://ethglobal.com/showcase/artsy-wave-e03w7",
    demo: "",
    repo: "https://github.com/Shanni/ArtsyWave",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 🏊 Mina — Pool Prize ",
    short: "NFT Multi Level Marketing protocol that promotes creativity. ",
    description: "The smart contract would be built on a blockchain platform and would be programmed to automatically transfer the NFT from the current owner to the buyer upon receipt of payment. The payment would be divided into two parts: the purchase price and the 5% royalty payment for the original author. The contract would ensure that the 5% payment is automatically transferred to the original author's digital wallet each time the NFT is sold or transferred to a new owner. This would provide a recurring source of income for the author",
      "FIELD11": " even after they have sold the NFT. Scroll ZKP chain to deploy the MLM NFT smart contract",
      "FIELD12": " which provides a loyalty mechanism to original creators and past buyers. Use Livepeer for implementing the token-gated video in that the creator streams their art-making process. When a purchase happens",
      "FIELD13": " the video will be automatically transferred to the new NFT owner. I use IPSF/(FVM) for video storage and Polygon to record it on-chain.I also create the social aspect of the platform",
      "FIELD14": " where non-buyers can also collect the NFT for a small fee",
      "FIELD15": " and the profit will be stacked to the creator pool and NFT owner pool. When the pool gets> 0.5ETH or after a year",
      "FIELD16": " they are able to withdraw tokens from the pool.ZKSnarkyJS to tracking and backup",
      "FIELD17": " in case Scroll or other main chain fails. It's a different approach of ZK",
      "FIELD18": " to make sure the system is sustainable.ZKP",
      "FIELD19": " Next.js",
      "FIELD20": " TailwindCSS",
      "FIELD21": " Solidity",
      "FIELD22": " IPFS",
      "FIELD23": " Polygon",
      "FIELD24": " Scroll",
      "FIELD25": " ZKSnarkyJS",
      "FIELD26": " Lens Collection.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 168,
    hackathon: "ETHGlobal Tokyo",
    title: "Gogaku!!!",
    more: "https://ethglobal.com/showcase/gogaku-es5jv",
    demo: "https://liff.line.me/1645278921-kWRPP32q/?accountId=826cqegv",
    repo: "https://github.com/ksuhara/ethtokyo-submission",
    video: "",
    winner: "📜 Scroll — Just Deploy ",
    short: "Learn foreign languages with a voice-based game using LINE Talk & ChatGPT interface. Easily practice listening & speaking with NFT conversation scenarios—buy",
    description: " exchange & complete to earn proof NFTs",
      "FIELD11": "This project is a language learning service that combines the popular Japanese messaging app LINE",
      "FIELD12": " OpenAI's ChatGPT",
      "FIELD13": " and non-fungible tokens (NFTs). LINE is widely used in Japan with a monthly user base of 94 million people.Users add GOGAKU!!! as a friend on LINE to gain access to the service. When users request a question",
      "FIELD14": " GOGAKU!!! provides a conversational-style prompt in audio format. Users respond with voice messages",
      "FIELD15": " and ChatGPT reviews the content for appropriateness and checks for grammatical errors",
      "FIELD16": " providing a score. If a user scores over 8 out of 10",
      "FIELD17": " they clear the theme and can mint an NFT as proof of their success. This project is a language learning service that combines the popular Japanese messaging app LINE",
      "FIELD18": " OpenAI's ChatGPT",
      "FIELD19": " and non-fungible tokens (NFTs).The service is built on LINE Messaging API",
      "FIELD20": " and it creates quizzes using OpenAI's API. Google Text-to-Speech reads the quizzes aloud",
      "FIELD21": " and audio files are generated and sent to users via LINE. Users then respond to the quizzes using voice messages.On the backend",
      "FIELD22": " the Whisper API is employed to transcribe voice messages into text",
      "FIELD23": " and ChatGPT is utilized to grade the responses. When users achieve a certain score",
      "FIELD24": " they earn the right to mint NFTs. The rights to mint NFTs are managed off-chain through Firebase",
      "FIELD25": " allowing users to mint NFTs at their convenience.The NFTs are issued as ERC1155 tokens using ThirdWeb's signature minting feature. The frontend is built using Next.js",
      "FIELD26": " and the Scroll network is adopted for NFT transactions.In summary",
      "FIELD27": " this project is an innovative language learning service that combines the LINE messaging app",
      "FIELD28": " ChatGPT",
      "FIELD29": " and NFTs. Users can practice speaking and listening through interactive quizzes",
      "FIELD30": " and their progress is rewarded with NFTs that can be minted and exchanged.",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 169,
    hackathon: "ETHGlobal Tokyo",
    title: "TheDAO Reunion",
    more: "https://ethglobal.com/showcase/thedao-reunion-bsanp",
    demo: "",
    repo: "https://github.com/motoqui/thedaoreunion",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Introducing TheDAO Reunion",
    description: " inspired by the decentralized autonomous organization of 2016. Investors who participated in The DAO transactions will receive membership NFTs",
      "FIELD11": " fostering a positive outlook. Members can communicate through Discord-like chats and attend offline events.",
      "FIELD12": "Introducing TheDAO Reunion",
      "FIELD13": " a project inspired by the groundbreaking and infamous decentralized autonomous organization that emerged in 2016. The DAO utilized Ethereum smart contracts to enable investment decisions through decentralized governance",
      "FIELD14": " paving the way for the birth of numerous Web3 projects. However",
      "FIELD15": " shortly after its ICO",
      "FIELD16": " The DAO was hacked by an infamous reentrancy attack",
      "FIELD17": " leading to the loss of a significant portion of its funds. This sparked a debate between those who supported a hard fork to reverse the hack and those who believed in following the smart contract",
      "FIELD18": " causing controversy within the blockchain community.TheDAO Reunion aims to create a community for the investors. Accounts that invested in TheDAO transactions on the chain will be whitelisted",
      "FIELD19": " and their owners will be able to mint membership NFTs. Inspired by the culture in the crypto industry where words such as \"degen\" are used positively",
      "FIELD20": " this project aims to see the investment in The DAO in a positive light.As an idea for what this community will actually do",
      "FIELD21": " they will first communicate with each other and participate in a decentralized Discord-like place",
      "FIELD22": " and they will rank the membership NFTs by the amount of investment. They also plan to hold offline events. A more compliant and safer 2023 version of TheDAO may be born. At first",
      "FIELD23": " only NFT holders will be able to access the community",
      "FIELD24": " but it is better to prioritize expanding the community by allowing other users to participate soon after. Additionally",
      "FIELD25": " they may be involved in some form in 2023",
      "FIELD26": " and they believe that there is ample potential for interesting projects to emerge from the bottom up",
      "FIELD27": " leveraging their intuition about their DAO. It is interesting to consider a movement in which TheDAO and its founders are involved in TheDAO reunion. On the other hand",
      "FIELD28": " it may become a closed",
      "FIELD29": " melancholic community. Whatever the case",
      "FIELD30": " I would like to see the memes and atmosphere that are self-generated. That is what is \"Crypto-ish",
      "FIELD31": "\" isn't it? I used Thirdweb offered by Alchemy to create the mechanism for connecting a wallet to a browser and minting SBT. The chain used was the Polygon testnet. Additionally",
      "FIELD32": " using Airstack",
      "FIELD33": " I extracted the accounts that had made transactions to TheDAO's address at that time",
      "FIELD34": " and verified if the data and the user's address being used were included. Accounts that passed the verification process were able to acquire a membership card NFT with the letter \"D\" and a number 1",
      "FIELD35": " 2",
      "FIELD36": " or 3 in the lower right corner",
      "FIELD37": " based on the size of their investment at the time.",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 170,
    hackathon: "ETHGlobal Tokyo",
    title: "I AM HERE.",
    more: "https://ethglobal.com/showcase/i-am-here-t2384",
    demo: "https://i-am-here-iota.vercel.app/",
    repo: "https://github.com/krishaamer/i-am-here",
    video: "",
    winner: "🔟 Push — Top 10 ",
    short: "Your AI Web3 Assistant to help you plan your next hackathon trip more efficiently",
    description: "\"I AM HERE\" project combines the latest tools in AI (chatGPT) & web3 (wallet to wallet messaging) to deliver smarter and more relevant information on web3 travel. The project aggregates both on and off chain data (Twitter",
      "FIELD11": " Telegram",
      "FIELD12": " lens protocol",
      "FIELD13": " POAPs",
      "FIELD14": " Pragma NFTs) to deliver highly customized information",
      "FIELD15": " streamlining event RSVP and connecting you with the local Web3 community. Push protocol - wallet to wallet location based messaging group chatMetaMask - loginNext Js - front endAirstack - data pullingChatGPT - for copilot and to provide personalized crypto travel recommendationFigma - for prototyping and UI/UX designsAfter Effects - for video animation",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 171,
    hackathon: "ETHGlobal Tokyo",
    title: "Satori Drop",
    more: "https://ethglobal.com/showcase/satori-drop-n2r33",
    demo: "https://satori-drop-frontend.vercel.app/",
    repo: "https://github.com/egthack/SatoriDrop",
    video: "",
    winner: "🔥 Airstack — Best Overall Use ",
    short: "The platform is designed to use Airstack to detect targeted users for airdrops.",
    description: "The platform",
      "FIELD11": " Airstack",
      "FIELD12": " is designed to enable project teams that want to conduct token airdrops to identify target users based on on-chain data from token holders in other projects. By utilizing various criteria",
      "FIELD13": " the platform maximizes the effectiveness of the airdrops. The extracted user data can be downloaded in CSV format",
      "FIELD14": " which can then be uploaded to other tools that facilitate the airdrop process. This project utilizes Airstack APIs (TokenBalances API",
      "FIELD15": " TokenTransfers API) instead of the upcoming Snapshots feature mentioned in the roadmap. The backend runs on Express",
      "FIELD16": " hosted on AWS Lightsail to secure the API key. For the frontend",
      "FIELD17": " Next.js is employed and deployed on Vercel",
      "FIELD18": " which converts the JSON data returned by the backend into a downloadable CSV format.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 172,
    hackathon: "ETHGlobal Tokyo",
    title: "Mud Explorer",
    more: "https://ethglobal.com/showcase/mud-explorer-u1wr9",
    demo: "",
    repo: "https://github.com/proofofjake/MUDExplorer",
    video: "",
    winner: "",
    short: "a Visualisor for MUD based games",
    description: " where it shows each entity",
      "FIELD11": " component and system and how they are linked together",
      "FIELD12": "this is mostly built as a dev tool trying to understand how various different mud games utilise the ecs/mud architecture. It helps visually layout how each component",
      "FIELD13": " system and entity is interconnected and interacting with each-other",
      "FIELD14": " in the future it will allow quick deployment to an rollup as a service style testnet quickly and efficiently",
      "FIELD15": " allowing both for replaying of matches and also live playing a mud based game that has been deployed in several clicks! its a currently a simple flask website built in python",
      "FIELD16": " which allows for the reading of the mud github repo",
      "FIELD17": " and visualisation processing. In future it will likely need to be rewrote in react/js to be more compatible with the various web3 apis it needs! it also uses the mud architecture in way of proxy",
      "FIELD18": " which is a opensource & MIT licensed engine built by lattice (funded by 0xPARC)",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 173,
    hackathon: "ETHGlobal Tokyo",
    title: "DID ECO (DAO ID)",
    more: "https://ethglobal.com/showcase/did-eco-dao-id-yj2u3",
    demo: "https://did.eco",
    repo: "https://github.com/asterso/did-eco",
    video: "",
    winner: "🏊 The Graph — Pool Prize ",
    short: "DID.eco empowers NFT collectors",
    description: " DAO enthusiasts & communities to amplify social awareness in Web2 & Web3 via ENS. Enables ENS domains as a key base for DAO & NFT projects",
      "FIELD11": " offering unified IDs for members. Leverages LayerZero for cross-chain functionality",
      "FIELD12": " boosting ENS reach.",
      "FIELD13": "DID.eco (DAO ID) is a must-have platform for NFT collectors",
      "FIELD14": " DAO believers",
      "FIELD15": " and all kinds of communities to amplify social awareness in Web2 and Web3",
      "FIELD16": " leveraging the power of ENS(Ethereum Name Service).It allows each ENS domain to serve as a key base for every DAO and NFT project. They can use DID.eco to launch their domains/namespaces by selecting an ENS domain.DAOs can distribute passcards",
      "FIELD17": " enabling each member to claim their subdomains on ENS. NFT projects can allow holders to claim TokenID-related subdomains to build global consensus.DAOs",
      "FIELD18": " including NFT communities",
      "FIELD19": " can take advantage of ENS's existing infrastructure and out-of-the-box features. Users can send & receive funds or set their primary name to show off their namespace & personal domains on major platforms and wallets (e.g.",
      "FIELD20": " Etherscan",
      "FIELD21": " Opensea",
      "FIELD22": " Brave",
      "FIELD23": " Coinbase wallet) to raise social awareness.Moreover",
      "FIELD24": " by leveraging cross-chain protocols like LayerZero",
      "FIELD25": " DAOs and NFT projects on other blockchains can grant ENS-based domains to their community members",
      "FIELD26": " expanding ENS's reach. We have also developed a token distribution tool to enhance the platform's utility.It is a win-win solution for DAO and ENS",
      "FIELD27": " providing unique & unified & widely-supported IDs for DAO distributed to their members",
      "FIELD28": " meanwhile increasing the demand and user base of ENS. In regard to smart contract development",
      "FIELD29": " we have built separate contracts for DAO and NFT projects such as ApeCoin DAO and BAYC. We learned from the contracts of ENS and managed to generate appropriate values for node and label hashes for ENS domains and subdomains. DAOs can use our factory contract to issue DAO passport NFTs and related namespaces with a single click",
      "FIELD30": " without any coding required.Our contracts maintain records for every namespace collection and the subdomains that belong to these collections. These contracts primarily communicate with the ENS controller contract to automatically create and manage subdomains for qualified users who hold related NFTs or passcards. Additionally",
      "FIELD31": " we have built tools for DAOs to batch-send token rewards to their communities.We used React JS",
      "FIELD32": " web3js",
      "FIELD33": " ensjs for the frontend",
      "FIELD34": " while obtaining data of ENS and NFTs from The Graph & Airstack. We developed smart contracts with Hardhat",
      "FIELD35": " Truffle and Infura.To help DAOs prevent Sybil attacks",
      "FIELD36": " we integrated Worldcoin and Lens. Our solution also uses cross-chain messaging protocols such as LayerZero to assist DAOs and NFT projects on other blockchains in launching their ENS-based domains on Ethereum.Sharing the vision of making ENS the universal ID for all platforms",
      "FIELD37": " we deployed our contracts on ETH Goerli",
      "FIELD38": " as well as Linea",
      "FIELD39": " Taiko",
      "FIELD40": " Scroll",
      "FIELD41": " Polygon",
      "FIELD42": " Mantle",
      "FIELD43": " Gnosis",
      "FIELD44": " and Celo.Our users can create and claim their unique DAO names based on ENS and use them as primary names on platforms such as OpenSea",
      "FIELD45": " Etherscan",
      "FIELD46": " Brave",
      "FIELD47": " MetaMask",
      "FIELD48": " and Coinbase Wallet.",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 174,
    hackathon: "ETHGlobal Tokyo",
    title: "Rate & Trust OTC",
    more: "https://ethglobal.com/showcase/rate-and-trust-otc-12gdt",
    demo: "https://www.figma.com/file/YEU4jIkC6oyrkSNFXP3mO8/reputation-model?node-id=0%3A1&t=UV97rjqP8oyLJ7nA-1",
    repo: "https://www.figma.com/file/YEU4jIkC6oyrkSNFXP3mO8/Untitled?node-id=6%3A128&t=KLlZc8idNhU0Fr5J-1",
    video: "",
    winner: "",
    short: "This OTC Deal Rating feature allows users to rate each other on a scale of 1-5. This promotes transparency and builds trust",
    description: " while also discouraging fraudulent behavior",
      "FIELD11": " and incentivizing trustworthy users.",
      "FIELD12": "Rate&Trust OTC feature allows users to rate each other based on their experience after an over-the-counter (OTC) deal. Users can rate each other on a scale of 1 to 5",
      "FIELD13": " with 5 being the highest rating",
      "FIELD14": " after each OTC deal. This feedback system provides transparency and helps build trust between users",
      "FIELD15": " as they can assess the reliability of their counterpart before engaging in any future transactions.The rating feature will also help to create a more secure OTC marketplace by deterring fraudulent behavior. Users with consistently low ratings will find it difficult to attract counterparties and may be flagged or banned from the platform altogether.Additionally",
      "FIELD16": " users can set their own interest rate based on their trust level. By allowing users to set their own interest rates",
      "FIELD17": " this feature promotes transparency and allows users to accurately reflect their level of trustworthiness. Users with higher trust ratings can set a higher interest rate",
      "FIELD18": " which will incentivize users to be more professional when they are dealing with customers.Overall",
      "FIELD19": " the Rate and Trust feature is a powerful tool for creating a trustworthy and transparent OTC marketplace",
      "FIELD20": " which allows users to make more informed decisions when engaging in OTC transactions. We came up with the idea to rate each other in the OTC market",
      "FIELD21": " and used Figma to visualize what it would look like. Because of a lack of time",
      "FIELD22": " we only applied the UI of the new feature.For further improvement",
      "FIELD23": " Rate&Trust OTC feature would likely involve the use of a database to store user ratings",
      "FIELD24": " an authentication system to ensure that only verified users can access the feature",
      "FIELD25": " and an interface for users to view and rate their counterparts. Additionally",
      "FIELD26": " to implement the feature that allows users to set their own interest rate based on their trust level",
      "FIELD27": " we would use Secured Finance's smart contracts and orderbook.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 175,
    hackathon: "ETHGlobal Tokyo",
    title: "Shishi-odoshi",
    more: "https://ethglobal.com/showcase/shishi-odoshi-2jgvo",
    demo: "",
    repo: "https://github.com/kajeagentspi/shishiodoshi-contracts",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Discord-integrated party game",
    description: " that boosts communication within DAOs.",
      "FIELD11": "We create a casual party game that is integrated with Discord.This game was created to promote interaction among participating DAO members and getting excited together.The game itself is a web application",
      "FIELD12": " but this application that works closely with Discord.Games can be started with a command on Discord",
      "FIELD13": " and the progress of the game is posted by the bot on Discord.Comments about the game that the audience has posted in a thread on Discord are displayed on the web application. The front-end framework is built in Nuxtjs.I dared to combine metamask-sdk",
      "FIELD14": " etherjs",
      "FIELD15": " and web3js and made a comparison.The API of discord is also used in the js to connect to the outside world.Hosting was done by vercel",
      "FIELD16": " and by integrating with github",
      "FIELD17": " we were able to build a CI/CD flow at an early stage.For the contracts we used foundry to easily test and deploy the contracts. Go is used to for the game master which is the one responsible for initializing and ending the games. Since everyone can see all the data in the blockchain we need to initialize every game with a hashed proof. The raw bytes used to generate the winningHash is derived from the combination of the bytes value of the randomly generated amount that would tip the bamboo (first two bytes) and the last 30 bytes come from the first 30 bytes of a randomly generated sha256 hash.For the back-end development",
      "FIELD18": " we used Python to seamlessly integrate the game with the Discord chat screen.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 176,
    hackathon: "ETHGlobal Tokyo",
    title: "Trustfer",
    more: "https://ethglobal.com/showcase/trustfer-cn66s",
    demo: "",
    repo: "https://github.com/nandemotoken/Trustfer_Damage_Compensation_NFT",
    video: "",
    winner: "",
    short: "streamlines damage compensation in the real life in Japan via joint guarantee agreements.",
    description: "This innovative project is designed to revolutionize the rent management landscape by introducing joint guarantee agreements powered by blockchain technology and smart contracts. By providing a platform that facilitates a more efficient and transparent process",
      "FIELD11": " it aims to minimize risks associated with rental agreements for both landlords and tenants. The decentralized voting system ensures that all participants are held accountable for their actions",
      "FIELD12": " fostering a trust-based ecosystem. This seamless integration of technology and real estate management simplifies the entire rental experience",
      "FIELD13": " bringing a new level of convenience and security to all parties involved. In building this project",
      "FIELD14": " we focused on the integration of blockchain technology and smart contracts to streamline rental management processes. We used Ethereum Goerli testnet chain as a secure environment and NFTs for proof of compensation. Legal specialists can verify and manage claims",
      "FIELD15": " ensuring compliance and fairness. The decentralized voting system holds participants accountable",
      "FIELD16": " fostering a trust-based ecosystem. By combining NFTs and the Ethereum blockchain",
      "FIELD17": " we achieved a convenient and secure rental management solution.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 177,
    hackathon: "ETHGlobal Tokyo",
    title: "Universal Paymaster",
    more: "https://ethglobal.com/showcase/universal-paymaster-a2fyy",
    demo: "",
    repo: "https://github.com/marktoda/hackathon-paymaster",
    video: "",
    winner: "🅰️🅰️ EF — Best Account Abstraction ",
    short: "Long term yield bearing swap powered by a universal paymaster.",
    description: "As the paymaster sponsors EIP4337 User Operations",
      "FIELD11": " the ETH liquidity providers will have their ETH gradually swapped into the desired output token. The contract will stake a large portion of the escrowed ETH and then lend out the staked ETH to earn interest for LPs. It will also lend out the profit tokens accrued from submitting user ops. This project also acts as a time weighted average price order for LPs but instead of time the order is executed as the paymaster sponsors user ops requesting to pay gas in the selected output token. This project implements a generalized version of a EIP4337 paymaster. It uses Uniswap V2 style LP position management for capital and rewards accounting in the paymaster. We use the following technologies in our project:Uniswap V3 TWAP oracle to quote between ETH and desired quote gas tokens.LIDO to stake the escrowed ETH in the Paymaster contract.AAVE to lend out STETH and earn additional yield for LPs.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 178,
    hackathon: "ETHGlobal Tokyo",
    title: "dLottery",
    more: "https://ethglobal.com/showcase/dlottery-o6mum",
    demo: "",
    repo: "https://github.com/minh-rakuten/dLottery",
    video: "",
    winner: "📜 Scroll — Just Deploy ",
    short: "A lottery auto generator platform with a reverse lottery as its main feature. Unlike traditional lotteries where one person wins and everyone else loses",
    description: " in this system one person loses and everyone else wins!",
      "FIELD11": "Introducing dLottery",
      "FIELD12": " a decentralized application designed to bring new and exciting twists to traditional lottery models. The MVP features two different types of lotteries:The first type is named a Spinner. This is effectively lets users create a reverse lottery. Unlike typical lotteries",
      "FIELD13": " where only one lucky person wins",
      "FIELD14": " the Spinner can allow everyone to win",
      "FIELD15": " except for one or few unlucky people. It also features an NFT Lottery",
      "FIELD16": " where the offer creator will specify an NFT collection and allow holders of those NFTs to participate. Future iterations will include other interesting mechanics such as an open-ended prediction market lottery",
      "FIELD17": " which would provide users with a unique opportunity to speculate on outcomes. The offer creator would inputs several fields describing the event",
      "FIELD18": " and for arbitration",
      "FIELD19": " they will declare an address or choose in-house arbitration. Additionally",
      "FIELD20": " features will be implemented to provide users with incentives",
      "FIELD21": " such as getting an NFT if they fall under that small percentage of people who lose. With its user-friendly interface",
      "FIELD22": " transparent and secure design",
      "FIELD23": " and potential for big payouts",
      "FIELD24": " dLottery is set to revolutionize the way we think about lotteries on the blockchain. We built this project as a server-less application that interacts directly with the smart contract on the front-end. For the smart contract",
      "FIELD25": " we used Solidity and the Remix IDE. For the front-end",
      "FIELD26": " we used Material UI and React.js",
      "FIELD27": " as well as Hardhat and Microsoft Visual Studio as our development tools.Using sponsor technologies benefited our project in various ways",
      "FIELD28": " such as enabling us to streamline our development process and access additional resources and support.One notable hacky approach we used in the project was leveraging the loser incentive of receiving an NFT to encourage user engagement",
      "FIELD29": " even if they do not win the lottery. This added an extra layer of excitement to the experience and incentivized users to participate",
      "FIELD30": " even if they did not think they had a good chance of winning.",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 179,
    hackathon: "ETHGlobal Tokyo",
    title: "FundTogether",
    more: "https://ethglobal.com/showcase/fundtogether-cu3xp",
    demo: "",
    repo: "https://.com",
    video: "",
    winner: "",
    short: "The Ultimate Platform for Asset Management and Public Goods Funding",
    description: "Project FundTogether is an innovative platform that seamlessly combines asset management in DeFi and public goods funding",
      "FIELD11": " providing users with a simple",
      "FIELD12": " efficient",
      "FIELD13": " and secure solution to earn and fund public goods in one location. This groundbreaking project is designed to revolutionize the way we approach financial management and philanthropy in crypto ecosystemOur platform is a hybrid of DeFi vaults and Gitcoin",
      "FIELD14": " creating a unique ecosystem that empowers users to grow their wealth while also contributing to the greater good. By integrating these two essential components",
      "FIELD15": " FundTogether is able to streamline the process of funding and investing",
      "FIELD16": " making it more accessible and engaging for everyone.Key Features of Project FundTogether:Comprehensive Asset Management: Users can easily manage and track their digital assets in one place",
      "FIELD17": " thanks to our intuitive user interface and cutting-edge DeFi vaults. This allows for diversified investments and maximized returns",
      "FIELD18": " with the added benefit of reduced risk and complexity.Efficient Public Goods Funding: With our platform's Gitcoin integration",
      "FIELD19": " users can effortlessly contribute to public goods projects that align with their interests and values. This not only helps to democratize the funding process but also enables the creation of a more sustainable and equitable digital ecosystem.Automated Earnings and Contributions: Project FundTogether's smart contracts automate the process of earning and distributing funds",
      "FIELD20": " ensuring that users can effortlessly generate returns on their investments while simultaneously contributing to public goods. This minimizes manual effort and maximizes efficiency",
      "FIELD21": " making the platform more user-friendly and rewarding.Secure and Transparent: Our platform is built on blockchain technology",
      "FIELD22": " providing users with a secure",
      "FIELD23": " decentralized",
      "FIELD24": " and transparent environment for managing their assets and funding public goods. All transactions and project funding details are easily accessible",
      "FIELD25": " ensuring trust and accountability.Community-Driven Governance: Project UniFund is designed to be a truly decentralized platform",
      "FIELD26": " with community members taking an active role in governance and decision-making. This fosters a sense of ownership and empowerment",
      "FIELD27": " further driving the success and growth of the platform and its supported projects.By integrating asset management and public goods funding into one unified platform",
      "FIELD28": " FundTogether is set to redefine the way we approach philanthropy. With our innovative solution",
      "FIELD29": " users can effortlessly earn",
      "FIELD30": " invest",
      "FIELD31": " and contribute to a better future – all in one place. Welcome to the future of finance and social impact. Key Components of Project FundTogether:Funding for Public Goods: At the core of Project FundTogether is a robust funding system that enables users to effortlessly support public goods projects in line with their interests and values. By democratizing the funding process",
      "FIELD32": " our platform fosters the development of a more sustainable and equitable digital landscape.DeFi Integration: Project FundTogether harnesses the potential of DeFi to generate revenue for funding public goods. By incorporating DeFi vaults and protocols",
      "FIELD33": " our platform allows users to earn and grow their investments",
      "FIELD34": " while simultaneously channeling a portion of the returns towards financing public goods projects. This innovative approach maximizes efficiency and promotes a mutually beneficial ecosystem.DAO Governance: Project FundTogether is designed as a DAO",
      "FIELD35": " empowering community members to actively participate in the platform's decision-making process. By implementing decentralized governance",
      "FIELD36": " we ensure that the platform remains truly community-driven",
      "FIELD37": " fostering a sense of ownership and commitment among users",
      "FIELD38": " and facilitating the platform's ongoing growth and success.",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 180,
    hackathon: "ETHGlobal Tokyo",
    title: "Trustless Trust Exchange",
    more: "https://ethglobal.com/showcase/trustless-trust-exchange-ba6im",
    demo: "https://youtu.be/At3JRBpHKF8",
    repo: "https://github.com/UnyteDAO/ETH-TOKYO",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "A World of “Trustless“ Trust Exchange  -Leverage reliable",
    description: " third-party evaluations for trust-building -Fair and unbiased decision-making for DAO and project collaborations -Prevent false self-reporting and promote transparency -Escape the \"honest people suffer\" scenario",
      "FIELD11": "Decentralized Trust for Anonymous WorkspacesTraditional corporate organizations were closed entities that operated through centralized decision-making based on stock ownership and compensation through wages. In contrast",
      "FIELD12": " DAOs (Decentralized Autonomous Organizations) operate as open and fair entities that allow anyone to contribute",
      "FIELD13": " through a distributed decision-making process based on tokens and a reward system.There has been a problem of sustainability in the operations of DAOs. To address this issue",
      "FIELD14": " we propose the implementation of a Decentralized Member Evaluation System.Solution-Teammates can write encrypted evaluations for a user-Evaluations are stored securely and privately-Access evaluations using unique tokens sent to target user's wallet-Incentivize evaluation disclosure with token rewardsA World of “Trustless“ Trust Exchange-Leverage reliable",
      "FIELD15": " third-party evaluations for trust-building-Fair and unbiased decision-making for DAO and project collaborations-Prevent false self-reporting and promote transparency-Escape the \"honest people suffer\" scenario The data entered by the user is encrypted using Lit when it is stored on the chain. This is necessary to ensure that people who have not paid cannot see the data. Data is also stored in CELO. We had to pay a lot of gas money to fine-tune who to include in our own CVs",
      "FIELD16": " and we chose CELO for its performance",
      "FIELD17": " which is not available in other EVM chains. Normally",
      "FIELD18": " when the logic that only the token holder can decrypt data is expressed on the chain",
      "FIELD19": " it is difficult to securely store the data because the private key or the data that encrypts it is inevitably visible",
      "FIELD20": " but by using Lit",
      "FIELD21": " decrypting data only under certain conditions can be However",
      "FIELD22": " by using Lit",
      "FIELD23": " it is possible to decrypt data only under certain conditions",
      "FIELD24": " which is easier and more secure to implement.Core Stack-- React (version 18.2.0)-- Web3.js (version 1.9.0)-- Matarial UI (version 5.12.0)-- Emotion (version 11.10.6)-- lit-protocol-- ipfsSupported Networks-- CELO and Scroll and any EVM",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 181,
    hackathon: "ETHGlobal Tokyo",
    title: "Web4",
    more: "https://ethglobal.com/showcase/web4-hdnqv",
    demo: "https://eth-global-tokyo-fork.vercel.app/",
    repo: "https://github.com/CarsonCase/Web4",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Web4 aims to simplify crypto portfolios by interfacing with GPT-4s natural language processing instead of confusing webapp GUIs. Our framework offers an intuitive alternative that is network-agnostic and easy for developers to build their own modules.",
    description: "As a member of this hackathon",
      "FIELD11": " you're likely in the top 5% of DeFi understanding. However",
      "FIELD12": " even with this knowledge",
      "FIELD13": " you've probably spent hours wrestling with DApps to use DeFi. Crypto has achieved massive adoption on centralized exchanges like Binance and FTX because of their simple UI. But the decentralized world can never be as cohesive",
      "FIELD14": " with every protocol being a new language to learn. We need to simplify the user interface to blockchain",
      "FIELD15": " and we believe the answer lies in Natural Language Processing (NLP).Instead of learning the language of Unicorn website",
      "FIELD16": " Ghost website",
      "FIELD17": " Fox chrome extension",
      "FIELD18": " ect. Imagine if users could interact with this technology like it was a friendly financial advisor. Endlessly patient",
      "FIELD19": " knowledgeable and trustworthy",
      "FIELD20": " and able to help construct your portfolio's transactions requiring only a private key's signature for approval.This is the power of combining GPT-4 with blockchain. We believe this is what the future face of our industry looks like. Our project provides a glimpse of this future",
      "FIELD21": " with a Web4 chatbot framework that includes modular plugins for swapping on Uniswap and streaming on Superfluid. Our project is built using a combination of AWS Lambda",
      "FIELD22": " OpenAI API",
      "FIELD23": " React",
      "FIELD24": " and smart contracts written in Solidity. We utilized AWS Lambda to create serverless functions that communicate with the OpenAI API",
      "FIELD25": " using specialized instructions tailored to the needs of crypto users and plugins. These plugins include smart contracts written in Solidity that are deployed on various EVM chains. We used tools such as Foundry for testing and Hardhat for development to develop these smart contracts.On the frontend",
      "FIELD26": " we used React to create an intuitive user interface that communicates with the backend through APIs and websockets. The frontend also connects to Metamask",
      "FIELD27": " a browser extension that handles transaction signing and interacts with smart contracts. To pass data to the smart contracts",
      "FIELD28": " we used a custom parsing engine that scans all text displayed on the frontend for special tags that indicate the data should be sent to the smart contracts.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 182,
    hackathon: "ETHGlobal Tokyo",
    title: "NBond-BY-gusto",
    more: "https://ethglobal.com/showcase/nbond-by-gusto-783rc",
    demo: "https://www.figma.com/proto/gUevreJ17uWiimPVJvgpHe/Gusto-UI?node-id=1-2239&starting-point-node-id=1%3A2239",
    repo: "https://github.com/AiKosuke/NBond-BY-gusto",
    video: "",
    winner: "",
    short: "NFT corporate bond platform for companies. We will transform traditional paper-based corporate bonds into smart contract-based bonds",
    description: " making them accessible for anyone to invest in",
      "FIELD11": "Our platform is a blockchain-based bond issuance and trading platform that utilizes smart contracts to enable transparent",
      "FIELD12": " secure",
      "FIELD13": " and efficient bond transactions.With our platform",
      "FIELD14": " issuers can create and issue bonds as digital assets on the blockchain",
      "FIELD15": " and investors can purchase and trade these bonds peer-to-peer. The platform leverages a decentralized ledger to record all transactions",
      "FIELD16": " ensuring transparency and immutability.The bond smart contracts define the terms and conditions of each bond",
      "FIELD17": " including the principal amount",
      "FIELD18": " coupon rate",
      "FIELD19": " maturity date",
      "FIELD20": " and other relevant information. Investors can view and evaluate these terms before deciding to invest in a particular bond.To ensure security and efficiency",
      "FIELD21": " all transactions are processed automatically by the smart contracts. Once a bond is purchased",
      "FIELD22": " the investor's ownership is recorded on the blockchain",
      "FIELD23": " and the bond's coupon payments are automatically distributed to the investor's wallet.Overall",
      "FIELD24": " our platform offers a secure",
      "FIELD25": " transparent",
      "FIELD26": " and efficient solution for bond issuance and trading",
      "FIELD27": " making it easier for companies to raise capital and investors to diversify their portfolios. We built this project using a variety of technologies to create a functional peer-to-peer bond marketplace in web3. We used the Gnosis Safe SDK",
      "FIELD28": " Polygon SDK",
      "FIELD29": " ENS SDK",
      "FIELD30": " EPNS",
      "FIELD31": " and IPFS protocols to create a secure",
      "FIELD32": " efficient",
      "FIELD33": " and scalable system that allows for the trading of bonds without the need for intermediaries.To begin building this project",
      "FIELD34": " we installed and set up the necessary tools and dependencies",
      "FIELD35": " including the Polygon SDK",
      "FIELD36": " Gnosis Safe SDK",
      "FIELD37": " and web3.js. We then created a new project directory and initialized a new NPM project.Using the Gnosis Safe SDK",
      "FIELD38": " we created a new Gnosis Safe to be used as the marketplace's escrow account",
      "FIELD39": " and transferred funds to the Safe. We also created a new ENS domain using the ENS SDK and configured it to point to the marketplace's front-end.Next",
      "FIELD40": " we designed and implemented the front-end of the marketplace using a framework such as React or Vue.js and integrated it with the Gnosis Safe SDK and ENS SDK. We then implemented the back-end of the marketplace using a server-side framework such as Node.js and integrated it with the Polygon SDK and Gnosis Safe SDK.We created smart contracts to represent the bonds to be listed on the marketplace",
      "FIELD41": " defining the parameters of the bonds such as the issuer",
      "FIELD42": " maturity date",
      "FIELD43": " coupon rate",
      "FIELD44": " collateral",
      "FIELD45": " and credit rating. These smart contracts were deployed to the Polygon network using the Polygon SDK.We also created smart contracts to facilitate the peer-to-peer trading of bonds on the marketplace and deployed them to the Polygon network using the Polygon SDK. We wrote unit tests for the smart contracts and ran them using a testing framework such as Truffle. We integrated the smart contracts with the front-end and back-end of the marketplace using web3.js.To provide user authentication and profile management for companies that want to list their bonds",
      "FIELD46": " we created a user authentication smart contract. We also created a form for companies to list their bonds",
      "FIELD47": " including bond details such as name",
      "FIELD48": " duration",
      "FIELD49": " interest rate",
      "FIELD50": " and amount.We used IPFS to store and distribute bond-related content such as prospectuses and other documents. We implemented a search and filter functionality for users to discover available bonds based on their preferences. We also created a system for users to invest in the listed bonds and transfer funds to the escrow account",
      "FIELD51": " using Gnosis Safe to ensure the safety of the funds.Finally",
      "FIELD52": " we implemented a notification system for companies and users to keep track of their investments and listing status. The working model was hosted using Vercel or Netlify.Throughout the development process",
      "FIELD53": " we used various sponsor technologies such as Gnosis Safe",
      "FIELD54": " Polygon",
      "FIELD55": " and ENS to build a more secure",
      "FIELD56": " efficient",
      "FIELD57": " and scalable system. These technologies helped us to create a functional and reliable marketplace that allows for the trading of bonds without the need for intermediaries.we are proud of the nitty-gritty details of this project",
      "FIELD58": " including the use of multiple protocols and technologies to create a cohesive and functional system. While we did not do anything particularly hacky",
      "FIELD59": " we did spend a significant amount of time testing and fine-tuning the system to ensure its reliability and security",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 183,
    hackathon: "ETHGlobal Tokyo",
    title: "probablynothing.works",
    more: "https://ethglobal.com/showcase/probablynothing-works-qgrrf",
    demo: "https://docs.google.com/presentation/d/1ZzY8MJl9RspxOo6oVAkWhgjoZArbhLBmyQ9fVGdvouo/edit#slide=id.gcb9a0b074_1_0",
    repo: "https://github.com/allenday/permissionless-ads",
    video: "",
    winner: "🏆 ETHGlobal Tokyo Finalist ",
    short: "A protocols that allows web3 communities to generate revenue from advertising",
    description: " without censorship.",
      "FIELD11": "There are four user personas referenced in our project:Publishers - Web 3 community managers who can choose to show ads to their communities as a source of revenue.Advertisers - These users have messages they want to share with website visitors",
      "FIELD12": " and can pay for distribution of the message.Website visitors - Users whom the ads will be shown.Protocol operator - Provides the infrastructure to facility the advertising between the publishers and the advertisers.The ability to bring in revenue via advertising is an important way for traditional web communities to generate revenue. However",
      "FIELD13": " Web 2 advertisers and Ad Exchanges have been reluctant to on-board crypto projects. At the same time",
      "FIELD14": " centralized Ad Exchanges are prone to \"demonetization\"",
      "FIELD15": " where the Ad Exchange refuse to montize publishers for various reasons",
      "FIELD16": " sometimes in a transparent manner.Permissionless-ads protocol lays out the basic foundations for permissionless ad serving infrastructure. For this hack",
      "FIELD17": " we implemented the following:Ad Inventory as a NFT: Similar to a Supply Side Platforms",
      "FIELD18": " allowing Publishers to publish their advertising inventory and receive payment for the ads they serveAdvertising Campaign as an NFT: Similar to a Demand Side Platforms",
      "FIELD19": " allows Advertisers to purchase advertising to the communities they wish to reachWeb3 Ad Exchange Connector: Connecting between on-chain orders and Web 2 Ad ServerPayment Service: Perodically pay out to the Publisher (Ad Inventory) NFT based on the amount of ads they've servedFuture functionalities include:Moderation Tools: Allows Publishers and Advertisers to opt-in to different types and kinds of advertising they wish to receive and pay forAd Formats: Standardized type and formats of advertising that suppliers can offer and advertisers can purchaseBidding & Auctions: Different methods that advertisers and publishers can reach agreement on pricing of the ads and price discoveryReporting: For advertisers and publishers to estimate the value of their NFT and optimize their spend / revenue Our project has 5 components:adUnit smart contract:This creates an \"adUnit\" as an NFT. An Ad Unit is where advertising can be displayed and where the economic value from the advertising will accrue.An adUnit has an owner",
      "FIELD20": " and is implemented as a Hilbert Curve to optimize display space",
      "FIELD21": " and contains information about the kinds of ad that can be shown on it. E.g.",
      "FIELD22": " the size (200x200 pixels",
      "FIELD23": " 800x200 piexles) and type (banner",
      "FIELD24": " video) of advertising that can be shown on the ad unit.The adUnit is typically associated with a web property such as a website.While this implementation associates the adUnit with a specific website",
      "FIELD25": " it can be abstracte to represent a collection of advertising types and locations that someone can operate",
      "FIELD26": " e.g.",
      "FIELD27": " an advertising agency in charge of optimizing advertising revenue associated with multiple collections and properties.Implementing the adUnit as an NFT allows the economics value accrued to collections and properties to become tradable and liquid.campaign smart contractThis creates an \"campaign\" as an NFT. A campaign is where advertisers will pay money to reach their desired audience.A campaign require the following inputs:Budget: how much the advertiser wants to spend for this campaignCPC: Cost per Click",
      "FIELD28": " how much the advertiser will pay for a single click",
      "FIELD29": " or \"interaction\" from the viewerImage: the creative to be shwon to the end user. This can be abstracted to represent a video",
      "FIELD30": " sound",
      "FIELD31": " or some other media typeLanding Page: Where the viewer of the ad will be directed to if they click on the adSize: how big the advertising will be. This can be abstracted to represent how much \"inventory\" the advertising will take up from the publisher. E.g.",
      "FIELD32": " their website or just the top banner.An advertiser will also need to deposit their budget into the value. In this implementation",
      "FIELD33": " we have not required the deposite to be any particular token. But publishers can require that the advertiser pay using any set of tokens",
      "FIELD34": " such as USDC.Ad Server - Google AdManagerWe leverage the capabilities of the Google AdManager Advertising Server to control for how advertising are displayed and other parameters. This functionality can be moved on-chain at a later date.We also want to demostrate that it's possible to bring Web 2 advertisers directly into Web 3",
      "FIELD35": " allowing Web 2 advertisers to buy ads using the tools they already know to reach new audiences and formats.dApp front-end - FirebaseThis is an reference implementation of the kinds of ads that can be displayed and how the economic value and be accounted for to NFT holders.The problem is how to fairly distribute advertising space and revenue to NFT holders in a fair way. We want to avoid cases where single NFT holders can \"hold up\" other NFT holders from receiving advertising revenue by setting a high minimal bid amount.In this implementation",
      "FIELD36": " via a Hilbert Curve",
      "FIELD37": " any set of contiguous NFT holders can support showing advertisements",
      "FIELD38": " without regard for their minting order. This implemention also ensures a certain level of \"density\" to optimize revenue generation for each NFT holder.Protocol operator - Cloud FunctionWe use cloud functions to observe on-chain events and make API calls to the ad server to insert \"orders\". Advertisers can start",
      "FIELD39": " pause",
      "FIELD40": " and stop their campaigns via smart contracts onchain and the cloud function will sync the state to the offchain ad server.This also acts as a bridge between traditional ad exchanges and on-chain ad serving",
      "FIELD41": " allowing Web 2 advertisers (and their budgets) to be spend on-chain.",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 184,
    hackathon: "ETHGlobal Tokyo",
    title: "ManekiNeko",
    more: "https://ethglobal.com/showcase/manekineko-h31iy",
    demo: "",
    repo: "https://github.com/AishaLin/2023-eth-tokyo-hackathon",
    video: "",
    winner: "🌍 Uniswap Foundation — Ecosystem Track ",
    short: "A gamification and visualization tool to make defi more fun!",
    description: "Motivation:In the past",
      "FIELD11": " Defi primarily focused on financial gains and losses",
      "FIELD12": " and users were primarily concerned with their financial performance. However",
      "FIELD13": " our aim is to transform Defi into a platform that fosters empathy and healing by extending beyond quantitative measures.For newcomers",
      "FIELD14": " Defi can be daunting and complicated",
      "FIELD15": " particularly when real money is involved. Our project seeks to create an intuitive tool that simplifies Defi operations and makes them enjoyable for users. Through visualization",
      "FIELD16": " we offer users clear and comprehensive information about their position",
      "FIELD17": " reducing their anxiety and pressure.Incorporating gamification into Defi can increase user engagement",
      "FIELD18": " drive liquidity",
      "FIELD19": " and expand the platform's user base. Our ultimate goal is to create a more empathetic and healing Defi ecosystem that caters to a broader community of users.Concept:Our project aims to create a tool that connects users to Uniswap v3 in a gamified manner. Our innovative concept transforms the process of adding liquidity into an enjoyable activity",
      "FIELD20": " similar to feeding a cat. Instead of adding tokens",
      "FIELD21": " users will feed their virtual cat with food and water",
      "FIELD22": " which are essential for its growth. As users' liquidity increases",
      "FIELD23": " their virtual cat will grow larger",
      "FIELD24": " providing them with a clear visualization of their position.This gamification of the liquidity-adding process serves as a powerful incentive for users to add more liquidity. By providing an enjoyable and intuitive experience",
      "FIELD25": " our tool aims to attract a broader community of users to the Uniswap v3 platform. Overall",
      "FIELD26": " our project seeks to simplify and enhance the Defi experience for users while promoting greater engagement with the Uniswap v3 ecosystem.Features:Create your kitten by adding liquidity to Uniswap.Feed water and food to the kitten by adding more liquidity.1-Click to generate the NFT of the kitten. You can have a growth diary of the kitten.Utilize the NFT for further usage with the token protocols you provided.Roadmap:Our project has the potential to extend into various areas",
      "FIELD27": " and our roadmap for the upcoming phases is as follows:We aim to develop a generative NFT system that enhances the liquidity-adding process. By adding liquidity in different tokens",
      "FIELD28": " users will randomly generate unique cats with distinctive features. Each cat will be unique to the user who creates it",
      "FIELD29": " adding a layer of personalization and exclusivity to the Defi experience.Our project seeks to collaborate with protocols that lack liquidity on Uniswap. By utilizing our kitten NFT as a certificate of providing liquidity",
      "FIELD30": " liquidity providers will serve as the market makers for the protocol tokens. Incentives such as yield-boosting",
      "FIELD31": " transaction fee discounts",
      "FIELD32": " or even airdrops may be offered to kitten NFT holders. These incentives are intended to encourage greater engagement and investment in the protocol tokens",
      "FIELD33": " further enhancing liquidity and expanding the Defi ecosystem. Our project utilizes Ethers.js to connect to Uniswap",
      "FIELD34": " enabling efficient and secure integration with Metamask. To provide liquidity-related information",
      "FIELD35": " we leverage the Uniswap v3 SDK. Our frontend is built using React and Create-React-App",
      "FIELD36": " ensuring a user-friendly and intuitive interface. By utilizing these cutting-edge technologies",
      "FIELD37": " our project aims to simplify and streamline the Defi experience",
      "FIELD38": " while also attracting a broader range of users to the platform.",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 185,
    hackathon: "ETHGlobal Tokyo",
    title: "JuryDAO",
    more: "https://ethglobal.com/showcase/jurydao-8gz4i",
    demo: "https://jury-dao-web.vercel.app/",
    repo: "https://github.com/catze-labs/jury-dao-info/",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "A DAO-driven security system for online gaming that uses blockchain technology to promote fairness and discourage cheating.",
    description: "JuryDAO is a DAO-driven security system that aims to create a secure and fair online gaming environment by utilizing blockchain technology. It employs a consensus-based approach where jurors",
      "FIELD11": " who are selected from the community",
      "FIELD12": " review and vote on reported cases of cheating or unfair behavior in online games. The DAO's smart contracts handle part of the dispute resolution process",
      "FIELD13": " and the outcome is enforced on the blockchain",
      "FIELD14": " making it transparent and tamper-proof. By leveraging the power of blockchain",
      "FIELD15": " JuryDAO aims to discourage cheating",
      "FIELD16": " promote fairness",
      "FIELD17": " and improve the overall gaming experience for players. JuryDAO is built using cutting-edge technologies",
      "FIELD18": " leveraging decentralized protocols and smart contracts on the EVM blockchain. It utilizes user participation and token collateral to create a transparent and accountable dispute resolution process. The system encourages fair play and discourages cheating in online games by holding users financially responsible for their actions.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 186,
    hackathon: "ETHGlobal Tokyo",
    title: "Glimpz",
    more: "https://ethglobal.com/showcase/glimpz-a9vyo",
    demo: "https://glimpz.vercel.app/",
    repo: "https://github.com/Dangoz/ETHTokyo",
    video: "",
    winner: "🔟 Lens — Top 10 ",
    short: "Glimpz",
    description: " is a Web3 social network built for sharing and monetizing generative ai content. It enables and encourages users to take a glimpse👀 of their curiosity",
      "FIELD11": " ideas and inspirations through unlocking and reviewing prompts.",
      "FIELD12": "There're lots of generative ai tools being developed such as Midjourney",
      "FIELD13": " Dall-E or the many stable diffusion models",
      "FIELD14": " as well as new incoming ones such as Adobe Firefly. This can mean the industrialization of images and massive amount of content being produced. Nevertheless",
      "FIELD15": " when it comes to the distribution",
      "FIELD16": " user interaction and monetization of those content. Users/Creators are turning to the existing Web2 applications for sharing & posting.Therefore",
      "FIELD17": " leveraging blockchain primitives might open up some new experiences or new methods of monetization for such content. For example",
      "FIELD18": " in the case of Lens",
      "FIELD19": " we can create posts with token gated prompt where the image is always visible",
      "FIELD20": " but the prompt (content or description) is encrypted by Lit protocol and will only be decrypted for users who have collected the post (perhaps with a small fee). Finally",
      "FIELD21": " with this feature as a starting point",
      "FIELD22": " maybe more relevant feature for generative ai content can be brainstormed",
      "FIELD23": " such as prompt search or image search among Lens protocol content using vector database",
      "FIELD24": " gamification or competition for incentivzing posting content. An application layer social network powered by Lens Protocol as its backend.The generative ai images and post metadata are stored on Arweave.Lit protocol is leverage for the encryption and decryption of an image post's prompt",
      "FIELD25": " which enables creators to monetize and users to discover ideas.Next.js & Typescript are used to code the application with deployment on Vercel.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 187,
    hackathon: "ETHGlobal Tokyo",
    title: "zkBadge",
    more: "https://ethglobal.com/showcase/zkbadge-mr4gi",
    demo: "https://zk-badge.vercel.app/",
    repo: "https://github.com/web3-BC/zkBadge",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Onboarding user's off-chain/on-chain reputations  to web3 world by granting SBTs (Soul Bound Tokens) after on-chain zero-knowledge proof verification based on DIDs.",
    description: "Our mission is onboarding user's off-chain/on-chain reputations  to web3 world. PolygonId enables on-chain zero-knowledge proof verification based on DIDs",
      "FIELD11": " so  users can prove that they meet certain conditions without revealing the details of the data contained in their credentials. In this product",
      "FIELD12": " we visualizes the user's reputation by granting a SBT (Soul Bound Token) after on-chain verifications.All DApps can further extend their functionalities by checking if users have SBTs that prove certain conditions. See below for what you can do with zkBadges.only people over 18 can buy ETHright to vote depends on where you livevoting power decisioned based on GitHub commitmentschange  token airdrop amount depending on the influence of the SNS accountAlso",
      "FIELD13": " on-chain ZKP verification is computationally expensive",
      "FIELD14": " so doing it in solidity requires a lot of gas cost. However",
      "FIELD15": " issued zkBadges continue to function as proofs",
      "FIELD16": " so users can omit wasteful gas fees and cumbersome proof submissions. This project uses Polygon ID for the issuance and validation of provable private credentials",
      "FIELD17": " enabling users to produce a ZKP for their personal information",
      "FIELD18": " which grants them eligibility for SBT without disclosing the data. By linking your wallet to our user interface",
      "FIELD19": " the system gives SBT related to the credentials that issued by each issuer",
      "FIELD20": " validation of credentials within the Polygon ID is required to permit the wallet to acquire SBT. We deployed the contracts on the Mumbai ",
      "FIELD21": " and the user interface is developed utilizing NextJS.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 188,
    hackathon: "ETHGlobal Tokyo",
    title: "Penguin Network",
    more: "https://ethglobal.com/showcase/penguin-network-jhkvu",
    demo: "",
    repo: "https://github.com/Penguin-Network-ETHGlobal-Tokyo/Penguin-Network",
    video: "",
    winner: "📜 Scroll — Just Deploy ⛓ Polygon — Best Cross-Chain Hack 🏊‍♂️ Polygon — Pool Prize 4️⃣ Linea — Best Use ",
    short: "L1 bond aggregator to give an secured network into Ethereum ecosystem and use this bond for decentralized trusless cross-chain arbitrary messaging.",
    description: "This protocol brings relayers into the ecosystem for cross-chain trustless messaging",
      "FIELD11": " by letting them deposit the bond at Ethereum layer 1. Relayers will take the risk of slash",
      "FIELD12": " but they can earn commission fees by being responsible for cross-chain communication. Relayers can also earn yield from AAVE protocol by supplying assets with a bond that lock on layer1. Slash is executed using the blockhash of each layer2 stored in Ethereum layer 1",
      "FIELD13": " so relayers can take on arbitrary messaging between any layer2s. Currently",
      "FIELD14": " arbitrary inter-chain communication is performed primarily by sequencers in the chain itself",
      "FIELD15": " but our protocol brings more relayers for this tasks and leads more decentralized",
      "FIELD16": " faster and cheaper communication",
      "FIELD17": " since this protocol does not perform verification as long as there is no problem. In the future",
      "FIELD18": " we can also use native L1ToL2Communication methods implemented on each layer2s to bringe about relayers that perform cross-chain communication over collateral on arbitrary assets locked on any layer2s. We deployed this protocol on Polygon Mumbai",
      "FIELD19": " Scroll Testnet",
      "FIELD20": " Polygon zkEVM",
      "FIELD21": " Linea",
      "FIELD22": " and Taiko. Once slashing happened",
      "FIELD23": " we use native bridge methods that is implemented on each L2s to send slash data and execute compensation for users.Also",
      "FIELD24": " we used AAVE's supply methods to give relayers to deposit their bond into AAVE pool and earn yields.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 189,
    hackathon: "ETHGlobal Tokyo",
    title: "EchoKitty",
    more: "https://ethglobal.com/showcase/echokitty-77ysy",
    demo: "https://echokitty.finance/",
    repo: "https://github.com/echokitty/protocol",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "EchoKitty is a multi-chain copy trading protocol",
    description: " which introduces a permission-less way to mimic the trading strategies of any on-chain wallet. It ensures real-time execution with an ultra efficient botnet as well as trust-less depositing and swapping of funds.",
      "FIELD11": "This EchoKitty project is a trustless and permissionless protocol that allows users to copy trade any other wallet address. Copy trading",
      "FIELD12": " being popular in traditional finance",
      "FIELD13": " is not a new phenomenon but it has yet to garner significant traction in crypto. Currently existing projects limit users to only copy trading a small",
      "FIELD14": " curated group of wallets. EchoKitty addresses these limitations and allows ANY wallet address",
      "FIELD15": " on integrated networks or chains",
      "FIELD16": " to be copy traded. In order to achieve this EchoKitty utilizes extensive filters which users can set on their copy trade positions. These filters ensure that only the right transactions trigger a copy trade and also help protect the copied user from taking advantage of the copier. After selecting a wallet to copy and adding filters",
      "FIELD17": " a user can then set an allowance for how much of their current balance should be traded in the event a copy trade is triggered. Once these steps are completed the user will now be automatically copy trading their selected wallet address when triggered. Copy traders on EchoKitty can view their open positions",
      "FIELD18": " along with their transaction history and PnL.EchoKitty avoids over productization and enables users to take advantage of their on-chain knowledge. EchoKitty doesn't provide users with the best addresses to copy trade. Rather",
      "FIELD19": " we leave this up to the user while giving them the proper tools and filtering to create their own",
      "FIELD20": " personalized",
      "FIELD21": " copy trading positions. EchoKitty achieves permission-less copy trading by combining three key elements:Four smart contracts supporting mainnet",
      "FIELD22": " gnosis and polygon network for holding funds and executing the copy trades on 1inch (which can be easily extended to any DEX)An off-chain botnet monitoring the target addresses and initiating the copy tradesA react based front-end to request target wallet’s token balances and provide an intuitive user interfaceAt the basis of the protocol are four smart contracts (1 detailed):A wallet factory contract creating a smart wallet for every user: https://polygonscan.com/address/0x88865532AB232aab74C69FEb0409A00133d053d8The resulting smart wallet contract that holds deposited funds and spins off a sub wallet for each new address that will be copied: https://polygonscan.com/address/0x458dabe0140dacda264718edc317ff4d07f6b288The sub wallet contract that receives the funds allocated to a specific target address",
      "FIELD23": " listens to the trade data provided by the botnet and executes swaps on 1inch: https://polygonscan.com/address/0x134f52bc06ea1e40552ab5d6a56a77f57e578b2cAn authorization registry which allows people to tightly control the permissions of who can execute the swaps: https://polygonscan.com/address/0xF4277421bDA6a2E1C36b827fbf9F817A8d573888The contracts were created and deployed with foundry.The off-chain botnet for real-time copy trading (2 detailed):Monitors wallets by scanning and analysing the latest blocksIdentifies trades and gathers the relevant trade detailsSends the details to the subwallet in order to executes swapsHosted on FirebaseFront-end built with React / Redux (3 detailed):useDapp was used for web3 integrationsProvides an user friendly interaction with the smart contractsFetches target wallet’s initial token balance (using Covalent API)Visualises balances",
      "FIELD24": " P&L and other addresses performance[Important - the GitHub repo link points to our smart contract repo. Use: https://github.com/echokitty to see all three; smart contracts",
      "FIELD25": " webapp and botnet repos]",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 190,
    hackathon: "ETHGlobal Tokyo",
    title: "Airdropper for GitHub Contributors",
    more: "https://ethglobal.com/showcase/airdropper-for-github-contributors-o87db",
    demo: "https://airdropper.yalez.xyz",
    repo: "https://github.com/xia-natsu/ethglobal_tokyo_disperseflow-client",
    video: "",
    winner: "",
    short: "Airdropper for Github contributors is a SuperFluid-based dApp that simplifies reward distribution for open-source developers. With 2 UIs for admins & developers",
    description: " it ensures fairness",
      "FIELD11": " transparency & incentivizes more contributions.",
      "FIELD12": "The Airdropper for Github contributors is a decentralized application (dApp) that streamlines the reward distribution process for Github developers who contribute to open-source projects. The dApp is built using SuperFluid",
      "FIELD13": " which enables real-time",
      "FIELD14": " seamless",
      "FIELD15": " and frictionless payments.The Airdropper for Github contributors consists of two user interfaces: one for developers and one for admins. The developer interface allows Github developers to register and link their Github accounts with their wallet addresses. Once their accounts are linked",
      "FIELD16": " developers become eligible to receive rewards for their contributions. The admin interface is for the Airdropper",
      "FIELD17": " who can distribute rewards to pre-registered accounts. The Airdropper can view the contributions made by developers and distribute rewards accordingly.One of the key benefits of the Airdropper for Github contributors is that it ensures transparency and fairness in the distribution of rewards. Developers can view their contributions and rewards in real-time",
      "FIELD18": " while the Airdropper can distribute rewards based on the contributions made by each developer. This helps to incentivize developers to contribute more to open-source projects",
      "FIELD19": " which ultimately benefits the community.In summary",
      "FIELD20": " the Airdropper for Github contributors is a powerful tool for streamlining the reward distribution process for Github developers who contribute to open-source projects. By simplifying the payment process",
      "FIELD21": " providing transparency and fairness",
      "FIELD22": " and leveraging SuperFluid technology",
      "FIELD23": " the Airdropper helps to incentivize and reward developers for their contributions to the open-source community. Technologically",
      "FIELD24": " Airdropper for Github contributors is built upon:Frontend: The user interface is developed using JavaScript and HTML",
      "FIELD25": " delivering a responsive",
      "FIELD26": " user-friendly experience.Smart Contracts: AFGC utilizes Solidity for creating secure",
      "FIELD27": " efficient",
      "FIELD28": " and transparent smart contracts to manage the reward distribution process.Superfluid Integration: Superfluid technology is harnessed to facilitate instantaneous and continuous token airdrops",
      "FIELD29": " ensuring timely compensation for developer contributions.Local Testing: The project employs scaffold-eth",
      "FIELD30": " a popular Ethereum development framework",
      "FIELD31": " to streamline local testing and accelerate the development process.E2E Testing and Demo: AFGC utilizes the Mumbai testnet faucet for end-to-end testing and demonstrating the platform's functionality before deployment.",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 191,
    hackathon: "ETHGlobal Tokyo",
    title: "BrainWallet2.0",
    more: "https://ethglobal.com/showcase/brainwallet2-0-ipbq4",
    demo: "https://www.canva.com/design/DAFgLHl8v0Y/Pdiwv2SFOe3ppa6SGmvvLA/view?utm_content=DAFgLHl8v0Y&utm_campaign=designshare&utm_medium=link&utm_source=publishsharelink",
    repo: "https://github.com/YYX630/brainwallet",
    video: "",
    winner: "",
    short: "In an age when seed phrases are routinely being phished from unsuspecting users or getting lost outright and forgotten",
    description: " the necessity for a seedless self-custodial wallet is becoming apparent. By improving upon the unknown Brain Wallet concept",
      "FIELD11": " we aim to bring Web3 to everyone.",
      "FIELD12": "The goal of BrainWallet2.0 is to improve upon the poorly known \"brain wallet\" concept",
      "FIELD13": " which has the potential of being the most secure form of storage for one's blockchain based assets when used correctly. However",
      "FIELD14": " in order to accomplish this",
      "FIELD15": " user education is of the utmost importance. Despite this being the case",
      "FIELD16": " it's also an opportunity for improved UX",
      "FIELD17": " which was also one of our main goals",
      "FIELD18": " as poor UX happens to be the chief reason for many potential users being turned-off from Web3's many benefits. The other improvement of this brain wallet concept is also the ability to participate in smart contracts. This project was heavily based on MetaMask's source code and aimed to be a simplification of its features and functionality. Despite that being our main technological focus",
      "FIELD19": " we also relied heavily on a new algorithm devised by one of our team members that utilized the Scrypt Hash function to force \"slowness\" into our security protocol.",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 192,
    hackathon: "ETHGlobal Tokyo",
    title: "Tanuki",
    more: "https://ethglobal.com/showcase/tanuki-s8ew9",
    demo: "https://eth-tokyo-23-k13265zsi-konradmgnat-gmailcom.vercel.app",
    repo: "https://github.com/AlexCheema/eth-tokyo-23",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 🥉 Mantle — Build Use 🏆 ETHGlobal Tokyo Finalist ",
    short: "Tanuki is a trustless wallet scoring protocol. It uses ZKP’s to trustlessly read historical on-chain activity to calculate wallet scores. Wallet scores are modular enabling use cases like paymasters with loyalty-based subsidies and lending protocols with variable rates.",
    description: "Many protocols require a scoring metric for wallets interacting with them. Examples include 1) credit score protocols",
      "FIELD11": " which offer different terms to users based on their scores",
      "FIELD12": " 2) NFT pricing models that consider the wallets' past interactions with the NFT to accurately estimate price",
      "FIELD13": " and 3) paymasters that determine the amount of gas fee reimbursement for each user. Currently",
      "FIELD14": " these methods are performed off-chain",
      "FIELD15": " resulting in centralized",
      "FIELD16": " less transparent",
      "FIELD17": " and trust-dependent systems.Tanuki offers a solution to these problems by utilizing Axiom",
      "FIELD18": " a ZK coprocessor",
      "FIELD19": " to read and aggregate historical on-chain data in a trustless manner. This enables each protocol to compute relevant metrics fairly and transparently",
      "FIELD20": " fostering trustless interactions. Tanuki provides infrastructure code for seamless integration into protocols.While Tanuki's approach is broadly applicable",
      "FIELD21": " we demonstrate its effectiveness through two use cases. First",
      "FIELD22": " we explore paymasters which typically promise users to pay for or subsidize their gas fees without on-chain enforcement. Second",
      "FIELD23": " we showcase a lending protocol with custom loan terms",
      "FIELD24": " offering variable terms based on wallet scores. By leveraging Tanuki's solution",
      "FIELD25": " both use cases benefit from enhanced transparency",
      "FIELD26": " fairness",
      "FIELD27": " and trustless operations. The guiding principle in building Tanuki was to have the wallet scoring done in a trustless and decentralized way. For this reason we chose to use Axiom",
      "FIELD28": " a ZK coprocessor",
      "FIELD29": " to support flexible aggregations of historical on-chain data to derive a score in a trustless way and expose this via a smart contract. The score itself is just a uint256 and protocols can choose how to interpret this score e.g. a service offering gas subsidies may choose to interpret this as the percentage of the gas spent to subsidize.We wrote a simple interface in Solidity called IScoreProvider which is the interface for the smart contract that protocols interface with when integrating with Tanuki. This interface has a single function viewScore which takes a wallet address and returns a score for that wallet address (defaulting to 0 for uninitialized addresses).For the circuits that calculate the wallet scores",
      "FIELD30": " we use axiom's libraries over halo2",
      "FIELD31": " a high-performance zk-SNARK proof system written in Rust.Since Tanuki is an almost fully on-chain protocol (with the exception of the ZK coprocessor which runs off-chain)",
      "FIELD32": " our tech stack is actually quite simple – no complicated centralized infra to run – once deployed it runs in a fully-managed way on-chain with 100% uptime.",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 193,
    hackathon: "ETHGlobal Tokyo",
    title: "engagement ring　contract",
    more: "https://ethglobal.com/showcase/engagement-ring-contract-xq7g8",
    demo: "",
    repo: "https://github.com/yaaman18/marriage_contract",
    video: "",
    winner: "",
    short: "I created a dapp that allows you to submit a marriage certificate to a meta-state without having to register the marriage certificate with the real state. This allows people from countries where same-sex marriage is not recognized to register their marriages in the meta-state.",
    description: "Currently",
      "FIELD11": " there is no uniform system of marriage and its certification in all countries of the world. Some countries do not allow same-sex marriages",
      "FIELD12": " and some countries do not allow married couples to register different surnames. For those who are dissatisfied with such marriage systems",
      "FIELD13": " I have created a system that allows them to choose their own form of marriage",
      "FIELD14": " even if it is only a formality.The goal of this project is to create a DAO dedicated to marriage procedures",
      "FIELD15": " which will be managed by the participants",
      "FIELD16": " thereby eliminating the dissatisfaction with the marriage system.The DAO is a meta-state",
      "FIELD17": " so in reality",
      "FIELD18": " citizens are subject to the laws of the state to which they belong. The software will be built with smart contracts using solidity. The software will allow for marriage contracts independent of the country of affiliation and the division of property using smart contracts. The proof of using that smart contract will then be engraved on a physical ring. This allows for highly secure personal information management.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 194,
    hackathon: "ETHGlobal Tokyo",
    title: "4esee",
    more: "https://ethglobal.com/showcase/4esee-xu1be",
    demo: "",
    repo: "https://github.com/KStasi/4esee-core",
    video: "",
    winner: "🏊 Mina — Pool Prize ",
    short: "Prediction platform for future events built on Mina using SnarkyJS",
    description: "When we learned that Mina will be a sponsor",
      "FIELD11": " the first thought we had was: \"Wow",
      "FIELD12": " chain without DeFi! We had to bring one here\"",
      "FIELD13": " but then inspiration changed to the common sense and all these stories about TornadoCash",
      "FIELD14": " Zk money and other unlucky projects come to mind.So",
      "FIELD15": " after some considerations",
      "FIELD16": " our final idea is somewhere in-between our lovely decentralized finance and... games. We tried to create the platform where users could make bets on any future event (sports",
      "FIELD17": " election results",
      "FIELD18": " price movements etc) and all of this privately hiding the tendencies until reveal. The project is written in TypeScript using SnarkyJS",
      "FIELD19": " tests are written using jest framework. It consists of 3 zkApps: BettingEvent",
      "FIELD20": " Token and Oracle.The project is written in TypeScript using SnarkyJS",
      "FIELD21": " tests are written using jest framework. It consists of 3 zkApps: BettingEvent",
      "FIELD22": " Token and Oracle.BettingEvent is the main contract that represents the Event on which users make predictions whether it will happen or it will not. The user selects the side (will happen/will not)",
      "FIELD23": " size of their bet and executes bet. The bets are accepted until some time called start. There is a specific time after which event status can be revealed. Reveal can be called by anyone.Oracle is the contract responsible for processing the results of event from some trusted party.Once results are known",
      "FIELD24": " winners can claim their rewards. The reward comes from the assets lost by other participants.The contracts were deployed to Mina testnet:{EVENT_CONTRACT: 'B62qr5tZ18UMMwecc9YqBDPvGDoGhHSiJXSe2d3HBVLUBrwh8ofeN4j'",
      "FIELD25": "BET_FOR_TOKEN: 'B62qrJQQqKHmpPVKCvLNvuZsKyzL1XaVFCxcNjRkGHdCYh3jTo83fFv'",
      "FIELD26": "BET_AGAINST_TOKEN: 'B62qk2VcTSdB6v67C86SvmfQnb2YqFRHxrp3Qutc2JEzZh9DvVAVBtt'",
      "FIELD27": "ORACLE_KEY: 'B62qmjEG2MVBNAfHPw9Z1rpxXaCSwnE94kVqfXX3SiudWQXpbeXE9Ai'}",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 195,
    hackathon: "ETHGlobal Tokyo",
    title: "OmniSwap",
    more: "https://ethglobal.com/showcase/omniswap-vhg0o",
    demo: "https://kiwiswap-coral.vercel.app/collections/boredapeyachtclub-51",
    repo: "https://github.com/721tools/kiwiswap",
    video: "",
    winner: "",
    short: "Revolutionizing NFT Trading with Layerzero + L2 Cross-Chain Matchmaking",
    description: "Core Concept:Mint on Ethereum",
      "FIELD11": " Trade on L2.Kiwiswap is a protocol that enables initial users to map NFT assets from Ethereum mainnet to L2. We build on two core concepts:NFT aggregator on EthereumAsset ownership protocol on L2When users use our NFT aggregator on Ethereum",
      "FIELD12": " they can choose to map their assets to L2. The projects on L2 can use our protocol to build decentralized NFT trading markets",
      "FIELD13": " lending",
      "FIELD14": " staking",
      "FIELD15": " and other businesses. Get Order data and calldata from openseaUpload Images to IPFSipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/A Contract witch can butch purchese NFT in ETH Goerli network:https://goerli.etherscan.io/address/0x03780928BF0a87614d9046684770fb1ff4813fBAWe deploy our Asset ownership protocol on Celo TestNet",
      "FIELD16": " proof:https://alfajores.celoscan.io/tx/0x5f06f80b92f646af536b50a33bd8610f94b1c1995080a4b6d6b904e57b3bb731",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 196,
    hackathon: "ETHGlobal Tokyo",
    title: "Zk3 Alpha",
    more: "https://ethglobal.com/showcase/zk3-alpha-609hp",
    demo: "https://zk3-app-zk3.vercel.app/",
    repo: "https://github.com/monemetrics/semaphore-zk3",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Create and Embed zkProofs into Lens posts",
    description: " use the proofs to moderate the govern interactions with your content.",
      "FIELD11": "Zk3 is a ZeroKnowledge proofs kit built on top of Semaphore protocol and Lens Protocol to allow users to generate ZK proofs for both web2.0 and 3.0 services.using custom Lens Reference Module we made",
      "FIELD12": " Lens is able to validate these proofs during the publishing or the post and will revert if the proofs are invalid. SemaphoreZK3 - Smart contract built as an extension for Semaphore",
      "FIELD13": " it manages the zkGroups (aka circles) and the membership of users to these groups.Zk3ReferenceModule - A Lens Reference Module that allows Lens to check the validity of the ZKProofs.Backend Listener / watcher - offchain service to keep an eye on the conditions of membership for each user.ZKDapp - browser web app to generate and validate proofs in the browser.integration with Lenster - Lenster-zk3 edition",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 197,
    hackathon: "ETHGlobal Tokyo",
    title: "Blockreview",
    more: "https://ethglobal.com/showcase/blockreview-isqqt",
    demo: "",
    repo: "https://github.com/johnnyd-eth/block-review/",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Blockreview is an on-chain review system to promote trust & transparency among the web3 community.",
    description: "Blockreview is a simple on-chain review infrastructure that indexes web3 projects across the internet and allows users to post real",
      "FIELD11": " honest reviews to educate and inform the wider community on possible scams",
      "FIELD12": " and positive or negative experiences.By leveraging smart contract data",
      "FIELD13": " we can successfully identify whether the reviewer has interacted with a specified project",
      "FIELD14": " further guaranteeing its legitimacy",
      "FIELD15": " whilst not giving away specific interaction data. This project has been pulled together using Next.js",
      "FIELD16": " Polygon",
      "FIELD17": " Web3 Onboard",
      "FIELD18": " Quiknode",
      "FIELD19": " and a whole lot of chatGPT 4. Given Max has little to no experience with smart contracts",
      "FIELD20": " chatGPT 4 wrote the majority of the smart contract code as well as the Polygon code – the code did not work out of the box",
      "FIELD21": " so after a lot of fiddling and no sleep",
      "FIELD22": " we have a working proof of concept.In an ideal world",
      "FIELD23": " we would use PolygonID to provide a tool that verifies a user's interaction with a web3 project in black or white without giving away any specific details. Other use cases may include authentication",
      "FIELD24": " reviews",
      "FIELD25": " user-only rewards and feature flagging.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 198,
    hackathon: "ETHGlobal Tokyo",
    title: "Asguard",
    more: "https://ethglobal.com/showcase/asguard-ihv05",
    demo: "",
    repo: "https://github.com/koshikraj/asguard-app",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 1️⃣ Metamask — Best SDK Usage 🅰️🅰️ Safe — Best Web2 Experience with AA ",
    short: "Asguard provides the most secure and easiest way to onboard users to DApps or Wallets and ensures that they never have to worry about losing access to their wallet in unfortunate events.",
    description: "Unlike existing non-custodial wallets",
      "FIELD11": " users don’t need to back up their wallet seed phrases while creating the account. In case of loss of access to the wallet",
      "FIELD12": " it can be self-recovered or claimed by beneficiaries at the right time without any intermediaries.The wallet users can add a recovery mechanism and beneficiary at any time. This enables the wallet to be self-recovered anytime by the creator and claimed by the beneficiary only during certain events.Wallet recovery is an important aspect of the wallet UX",
      "FIELD13": " so we focus on making this secure and convenient for the user. Vitalik has been the advocate of social recovery wallets for quite some time. But there are plenty of things to consider in social recovery to make it secure and easy to use as pointed out here: https://twitter.com/VitalikButerin/status/1636608740513263617?s=20At Asguard we are trying to provide the best recovery solution leveraging the concept of social recovery but considering other factors as well. In this hackathon",
      "FIELD14": " we are leveraging the account abstraction SDKs of Safe to create a Safe wallet for a user with basic social login authentication. Once the user has a wallet",
      "FIELD15": " they can then set the recovery mechanism with a few simple clicks and also set a secondary account or beneficiary for the wallet with additional guards like time delay. We leverage Safe modules to add these functionalities.Our initial goal is to demonstrate a seamless yet secure recovery with one of the recovery mechanisms. The initial recovery using an email is built using an OAuth server as a verifier that becomes one of the signers for the recovery. Here is how it works:The user creates a Safe walletUsers can add recovery or beneficiary email. A recovery module will be enabled for the wallet with an OAuth server signer and additional signers if needed for the recovery. The email is never stored anywhere but only the hash of the email.Additional guards like a cooling period can be added to ensure additional security for the wallet.The beneficiary or recovery email owner can verify the email by authorizing and the OAuth server will verify this.After the verification and additional guard conditions have been the ownership is transferred to the new address associated with the beneficiary.",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 199,
    hackathon: "ETHGlobal Tokyo",
    title: "Asguard",
    more: "https://ethglobal.com/showcase/asguard-ihv05",
    demo: "",
    repo: "https://github.com/koshikraj/asguard-app",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 1️⃣ Metamask — Best SDK Usage 🅰️🅰️ Safe — Best Web2 Experience with AA ",
    short: "Asguard provides the most secure and easiest way to onboard users to DApps or Wallets and ensures that they never have to worry about losing access to their wallet in unfortunate events.",
    description: "Unlike existing non-custodial wallets",
      "FIELD11": " users don’t need to back up their wallet seed phrases while creating the account. In case of loss of access to the wallet",
      "FIELD12": " it can be self-recovered or claimed by beneficiaries at the right time without any intermediaries.The wallet users can add a recovery mechanism and beneficiary at any time. This enables the wallet to be self-recovered anytime by the creator and claimed by the beneficiary only during certain events.Wallet recovery is an important aspect of the wallet UX",
      "FIELD13": " so we focus on making this secure and convenient for the user. Vitalik has been the advocate of social recovery wallets for quite some time. But there are plenty of things to consider in social recovery to make it secure and easy to use as pointed out here: https://twitter.com/VitalikButerin/status/1636608740513263617?s=20At Asguard we are trying to provide the best recovery solution leveraging the concept of social recovery but considering other factors as well. In this hackathon",
      "FIELD14": " we are leveraging the account abstraction SDKs of Safe to create a Safe wallet for a user with basic social login authentication. Once the user has a wallet",
      "FIELD15": " they can then set the recovery mechanism with a few simple clicks and also set a secondary account or beneficiary for the wallet with additional guards like time delay. We leverage Safe modules to add these functionalities.Our initial goal is to demonstrate a seamless yet secure recovery with one of the recovery mechanisms. The initial recovery using an email is built using an OAuth server as a verifier that becomes one of the signers for the recovery. Here is how it works:The user creates a Safe walletUsers can add recovery or beneficiary email. A recovery module will be enabled for the wallet with an OAuth server signer and additional signers if needed for the recovery. The email is never stored anywhere but only the hash of the email.Additional guards like a cooling period can be added to ensure additional security for the wallet.The beneficiary or recovery email owner can verify the email by authorizing and the OAuth server will verify this.After the verification and additional guard conditions have been the ownership is transferred to the new address associated with the beneficiary.",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 200,
    hackathon: "ETHGlobal Tokyo",
    title: "Fluid Sense",
    more: "https://ethglobal.com/showcase/fluid-sense-ogerd",
    demo: "",
    repo: "https://github.com/jesusperezsanchez/fluidsense",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize 🥇 Lens — Best Use 🏊‍♂️ Polygon — Pool Prize 🚀 Superfluid — Most Futuristic ",
    short: "Decentralized Advertising for Humans targeted to web2 and web3 users",
    description: "This projects creates a protocol to allow advertisers generate decentralized marketing campaigns for Humans leveraging the Worldcoin protocol. Users following a certain criteria will be allowed to receive a Superfluid stream from the advertiser as long as they fulfill the requirements defined in the campaign. The protocol is built on top of Superfluid",
      "FIELD11": " Lens and Worldcoin and will be deoployed on the Polygon chain.Lens is used to define and deploy the marketing campaigns.Superfluid is used to create the streams to reward the uses that fullfill the criteria set by the campaign.Worldcoin is used to verify that the users subscribing to the campaign are actually real humans.",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 201,
    hackathon: "ETHGlobal Tokyo",
    title: "Myna",
    more: "https://ethglobal.com/showcase/myna-uxzdd",
    demo: "",
    repo: "https://github.com/a42io/ETHGlobalTokyo2023",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🅰️🅰️ EF — Best Account Abstraction 🏆 ETHGlobal Tokyo Finalist ",
    short: "Browser wallet for Japanese residents that lets them use their government issued ID (My Number Card) as a hardware wallet.",
    description: "The goal of Myna is to provide Japanese residents with a simple and safe browser wallet solution.Whether you use a browser",
      "FIELD11": " mobile",
      "FIELD12": " or hardware wallet",
      "FIELD13": " private key management is a challenge for all web3 users across the world. Writing down your seed phrase and keeping it safe is daunting",
      "FIELD14": " even for the most sophisticated users. Hardware wallets are also relatively expensive with a steep learning curve",
      "FIELD15": " making their use unrealistic for most people",
      "FIELD16": " especially in Japan (which has the oldest population in the world).As of March 2023",
      "FIELD17": " over 64% of Japan’s residents have an IC-chip enabled government-issued ID card (My Number Card). The Myna browser wallet enables Japanese residents to use their My Number Card like a hardware wallet",
      "FIELD18": " giving them a simple and safe way to self-custody their crypto and send/receive payments with just a few taps of their card.EIP-4337 compliant contract wallets are generated for each My Number Card",
      "FIELD19": " abstracting away the wallet creation process for users",
      "FIELD20": " and enabling features such as social recovery. This will empower Japanese residents to securely transfer wallet ownership during any emergency situation. We built our project on Polygon mainnet. Details below:My Number Card:The My Number Card is a NFC-type B card and it stores a RSA keypair.The RSA public key can be extracted from the card by tapping the card to a NFC reader.The My Number Card can sign arbitrary messages with a PIN code and return signature.Wallet generation:User taps My Number Card to NFC reader.The NFC reader sends the My Number Card public key to our Browser Wallet via Web Bluetooth.The browser wallet software deterministically calculates the ERC-4337 compliant contract wallet address based on My Number Card public key",
      "FIELD21": " even before deploying the contract wallet",
      "FIELD22": " and can receive payments.Send transaction:Browser requests a signature of the transaction from the contract wallet (User Operation) to My Number Card.User enters PIN and taps My Number Card onto NFC reader to generate User Operation signature.Browser sends User Operation and its signature to Bundler.Bundler sends the transaction to execute the User Operation.ERC-4337 compliant smart contract verifies the RSA signature and executes the operation.",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 202,
    hackathon: "ETHGlobal Tokyo",
    title: "Memento",
    more: "https://ethglobal.com/showcase/memento-424hk",
    demo: "",
    repo: "https://github.com/gnosis/memento",
    video: "",
    winner: "🏦 Safe — Best Tech Implementation ",
    short: "Memento lets your loved ones recover your account without using a wallet",
    description: " a centralized guardian or paying gas. Create Mementos",
      "FIELD11": " save lives.",
      "FIELD12": "Memento is an app for recovering accounts using no wallets",
      "FIELD13": " gas and simple interfaces anyone can use. The people you love and trust the most with your secrets may not know what crypto is let alone have an account that’s ready to make transactions.Enter MementoA Memento is a string of any length.We built this as a module for the Safe",
      "FIELD14": " as it’s the most extensible smart account standard available today. In its current iteration",
      "FIELD15": " this app allows deploys a module on your Safe",
      "FIELD16": " setting a group of Mementos as recovery phrases. This pattern could be used for any smart account.How to use Memento:Start by selecting how many Mementos you want to use",
      "FIELD17": " maybe you give one to each of your parents",
      "FIELD18": " or to your two best friends.Fill each out with a note",
      "FIELD19": " could be a short reflection on what each Memento holder means to you or a memory. Touching mementos are much more likely to be kept by those you give them to.Select how many Mementos you need for a recovery to be successful.Send the transaction",
      "FIELD20": " this will also fund the mod with a small amount to pay for gas in the future",
      "FIELD21": " Memento doesn’t require any external gas providers. you pay the gas cost now for a recovery in the future",
      "FIELD22": " so your recoverers have a gas-less experience.When/if the time comes to recover your account",
      "FIELD23": " use the Memento app to create the recovery link to send to your Memento holders",
      "FIELD24": " simply choose which owner to replace and generate the link.Each Memento holder enters their Memento into the app",
      "FIELD25": " (asynchronously",
      "FIELD26": " and in any order).Once enough Mementos have been entered",
      "FIELD27": " the Safe owner will be replaced",
      "FIELD28": " and the Memento module self-destructs. This project has two core parts: the Frontend client and the EVM contract. It is built as a module on Safe",
      "FIELD29": " and leverages EIP-4337 for gas-less transactions.We used the Safe since it's the most extensible smart account protocol at the moment",
      "FIELD30": " and it's module system makes it easy to add new functionality. We built our module to be Zodiac compatible. When the module is deployed",
      "FIELD31": " the app also funds it",
      "FIELD32": " so the gas fees from the recovery process can be pulled directly from the Memento Module.The Frontend is a next.js app that can be loaded as a Safe App and a standalone app. It's built with React and Tailwind CSS.We ran into trouble finding a 4337 bundling service that worked on Gnosis Chain",
      "FIELD33": " so we built a minimal bundler to allow us to send transactions to the Entrypoint deployed there.",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 203,
    hackathon: "ETHGlobal Tokyo",
    title: "HackathonAttestation",
    more: "https://ethglobal.com/showcase/hackathonattestation-5zhge",
    demo: "https://eth-global-tokyo-chi.vercel.app/",
    repo: "https://github.com/ZaK3939/ETHGlobal_TOKYO",
    video: "",
    winner: "🏊 UMA & Across — Pool Prize ",
    short: "- Empowering Sustainable Development with Attestation-based Donations. Our hackathon proposal involves creating a product that allows post-hackathon projects to receive donations from potential future users",
    description: " based on attestations from sponsors.",
      "FIELD11": "Challenges in Hackathon-based projects. It's very tough! 😢Many projects struggle with insufficient funds.Sponsors face difficulties in monitoring and evaluating the progress of projects.Uncertainty about user adoption and engagement.In the context of post-hackathon support",
      "FIELD12": " attestation from strong investors",
      "FIELD13": " early donations from potential users",
      "FIELD14": " and strong financial incentives tied to milestones can effectively contribute to a project’s success.Attestation from Strong Investors:After a hackathon",
      "FIELD15": " securing support from reputable and experienced investors can significantly benefit a project. Such backing not only provides funding but also offers credibility and validation. Investors often have industry connections and expertise that can help guide the project toward success. Additionally",
      "FIELD16": " their endorsement may attract other investors and create a positive image for the project in the market.Early Donations from Potential Users:Receiving early donations from potential users after a hackathon can demonstrate a genuine interest in the project and validate its value proposition. It shows that people believe in the idea and are willing to support its development financially. This early support can also create a strong user base and foster community engagement",
      "FIELD17": " which may lead to invaluable feedback",
      "FIELD18": " word-of-mouth marketing",
      "FIELD19": " and user-driven growth.Strong Financial Incentives upon Reaching Milestones:Offering strong financial incentives to the project team if they reach specific milestones can help keep them motivated and focused on achieving their goals. By tying incentives to the accomplishment of milestones",
      "FIELD20": " project teams are encouraged to work diligently and efficiently",
      "FIELD21": " leading to a higher likelihood of success.So",
      "FIELD22": " we believe this could effectively work",
      "FIELD23": " we propose a seamless donation ecosystem based on attention and voting.Key FeaturesOur product benefits all parties involved...Sponsors can effectively support and monitor projectsProject owners receive the necessary funding and validation based on their performanceDonors can confidently contribute",
      "FIELD24": " knowing that their donations are tied to the achievement of milestones and can be refunded if the project does not meet expectations.This creates a win-win situation for everyone involved in the project’s development and growth.Overviewhttps://github.com/ZaK3939/ETHGlobal_TOKYO/blob/main/hackahon-overview.pngContracthttps://gnosisscan.io/address/0xb76BdAAf88679FaCb2108179f146dc77bD5CaFDb Our product uniquely combines OP Attestation",
      "FIELD25": " oSnap",
      "FIELD26": " and Gnosis Safe to create a secure and accountable system for receiving donations upon achieving specific milestones.OP Attestation: By integrating OP Attestation into the product",
      "FIELD27": " we can establish a system where sponsors can make attestations about project owners and their Ethereum addresses. This process validates the project’s credibility and ensures that only trustworthy projects can receive donations.oSnap: Our product leverages oSnap’s benefits",
      "FIELD28": " such as decentralization",
      "FIELD29": " security",
      "FIELD30": " flexibility",
      "FIELD31": " and interoperability",
      "FIELD32": " to facilitate an efficient and reliable donation system. With oSnap",
      "FIELD33": " we can create customized smart contracts tailored to each project’s needs and milestones. This ensures that donations are only released when projects achieve specific milestones",
      "FIELD34": " providing a level of accountability for project owners.Gnosis Safe: By incorporating Gnosis Safe",
      "FIELD35": " our product provides a secure decentralized custody solution for managing collective assets. This platform enables secure funds management",
      "FIELD36": " ensuring that donations are safely held until projects meet their milestones.Build on Gnosis ChainGnosis Chain stands out in the blockchain space due to its cost-effective safe usageand stable",
      "FIELD37": " dollar-pegged gas pricing. These features make it a compelling choice for our system.Detailed Flowhttps://github.com/ZaK3939/ETHGlobal_TOKYO/blob/main/flow-of-system.png",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 204,
    hackathon: "ETHGlobal Tokyo",
    title: "IDQ ｜Soul Wallet",
    more: "https://ethglobal.com/showcase/idq-soul-wallet-2ds24",
    demo: "",
    repo: "https://github.com/BobWTky2023/IDQ_Soul_Wallet",
    video: "",
    winner: "🚀 FVM — Programmable Storage Markets ",
    short: "Unique and secure IoT hardware that allows enterprise companies to customizable. Web 3 Wallet and DIDs and connects data to all.",
    description: "The Filecoin Virtual Machine unlocks boundless possibilities for innovation on the Filecoin network.Building a verifiable credentials on-chain to store sustainability claim metadata about SPs (such as soulbound tokens",
      "FIELD11": " NFTs",
      "FIELD12": " or a DID project)Tokenizing RECs (renewable energy certificates) on FVMCan be bought by SPs on an open marketplace in order to make sustainability claims about their operations・Health Well-being for all",
      "FIELD13": " \"Ikigai\"  based on a spirit of mutual benefit.　・Caregivers platform connects hyper locals so that everyone can start.・One touch",
      "FIELD14": " one tap to connect. Just call the name or Voice Input Simplify  the use of the Web3 Wallet service6 functions of Web3 Wallet",
      "FIELD15": " Create",
      "FIELD16": " Buy",
      "FIELD17": " Upload",
      "FIELD18": " MyVC",
      "FIELD19": " Verify ",
      "FIELD20": " SBT",
      "FIELD21": "VCs: verified credentialsNext-generation digital certificate issuanceVerify: verification confirmation-The Filecoin network has a large base of long-term token holders that would like to see the network grow",
      "FIELD22": " and are willing to lend their FIL to reputable and growth-oriented SPs. Payment Acceptance",
      "FIELD23": "🌟🌟Future prospects for the hardware - as Neo-bank - could include credit/DEBIT cards",
      "FIELD24": " ATMs throughout the room",
      "FIELD25": " collateralized lending",
      "FIELD26": " etc.Decentralized Data Aggregator 🌟🌟Accept popular payment methods from around the world.  example  Voice Commerce ",
      "FIELD27": "Voice Shopping Engaged CommerceloT Stay tuned",
      "FIELD28": " Safe & Simple Solution to Connect All Generations. ☀️Meet your elderlies virtually and overcome the times of distance",
      "FIELD29": " health",
      "FIELD30": " and travel restrictions. Stay in touch with your family — LQ Anytime and Anywhere",
      "FIELD31": " Video chat ＃LQAOLQ : Video chat projector / Immerse in you callhttps://youtu.be/t0Nyrr",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 205,
    hackathon: "ETHGlobal Tokyo",
    title: "ZKAFI",
    more: "https://ethglobal.com/showcase/zkafi-70e80",
    demo: "https://demo.zkafi.com",
    repo: "https://github.com/zka-fi/zkafi",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 🥷 Taiko — 🥇 ZK Zone ",
    short: "A zero-knowledge Real World Asset (RWA) lending protocol. Use Credentials and private collaterals to borrow money in web3 world.",
    description: "A Zero-Knowledge Real World Asset (RWA) lending protocol. Use Credentials to borrow money in web3 world. Strong connect from traditional finance and web3 world.This innovative project has the capability to connect with services such as insurance companies. ZKAFI offers a unique value in the form of a ZK proof certificate",
      "FIELD11": " enabling users to effortlessly borrow money from the DeFi world. The interest and pool funds are jointly provided by borrowers and banks",
      "FIELD12": " creating a mutually beneficial financing ecosystem that allows companies to extract even greater value from their transactions. There are 4 repos:Contract (Solidity): Using Solidity to complete whole lending protocol.Circuits (Circom): Using Circom to develop the on-chain verify method.Merkle-Tree (Typescript): Sparse Merkle Tree (SMT) method.Front-end (WAGMI): Use NextJS and WAGMI.Sponsor Tech:Polygon ID backend circuitsHardhat deployed EVM-Compatible ChainZK-EVMs Deployed and testedWe deployed the contract to mentle",
      "FIELD13": " scroll",
      "FIELD14": " polygon mumbai",
      "FIELD15": " gnosis",
      "FIELD16": " celo",
      "FIELD17": " taikko.Therefore we can use this certification to borrow money on anychain.We also publish a SMT in npm. Link: https://www.npmjs.com/package/zkafi-merkle-tree",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 206,
    hackathon: "ETHGlobal Tokyo",
    title: "Pay3",
    more: "https://ethglobal.com/showcase/pay3-ghp9f",
    demo: "",
    repo: "https://github.com/team-be-org/pay3",
    video: "",
    winner: "",
    short: "Pay3 is a smart contract based subscription payment system.  User can start and stop the subscription easily. Service provider can use this system only deploying contract this.",
    description: "Pay3 is a smart contract based payment system. Service provider can start subscription only deploying this contract.Users can be charged with prepaid way to NFT as their own virtual wallet and quickly stop-start subscription.They can also withdraw at any time you can control your rights.・User experienceStart-step1.Minting NFT2.Pushing Charge button(for example:over 0.01ETH)3.Pushing On buttonStop-step1.Pushing Withdraw2.Pushing Off button・ConclusionThe Single Contract configuration allows for customization",
      "FIELD11": " and a subscription system can be prepared for each service",
      "FIELD12": " making it possible to tailor operations to the characteristics of the service.we hope to promote the use of this infrastructure and reduce the number of subscription services with cumbersome cancellation procedures. ・Technical pointsBy using NFT",
      "FIELD13": " virtual wallets can be created at a lighter weight than Acount Abstraction",
      "FIELD14": " and can be deployed and used on a per-service basis. There is no need to create a new wallet.And by treating NFTs as virtual wallets",
      "FIELD15": " it is easy to transfer the right to subscribe itself to others.The Single Contract configuration allows for customization and preparation of a system of subscriptions for each service",
      "FIELD16": " enabling operations tailored to the characteristics of the service.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 207,
    hackathon: "ETHGlobal Tokyo",
    title: "OkiScan",
    more: "https://ethglobal.com/showcase/okiscan-o79ru",
    demo: "https://niceblockui.vercel.app",
    repo: "https://github.com/jackburrus/okiscan",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "A mobile-optimized Ethereum blockchain explorer with AI-assisted contract search",
    description: " prioritized Read/Write methods",
      "FIELD11": " and an on-chain watchlist.",
      "FIELD12": "OkiScan with AI-Enhanced Contract Interaction is a user-friendly",
      "FIELD13": " mobile-optimized Ethereum blockchain explorer designed to improve the way users discover",
      "FIELD14": " interact with",
      "FIELD15": " and monitor smart contracts. Leveraging the power of OpenAI",
      "FIELD16": " our platform not only allows users to search for any contract but also generates a visually appealing card complete with a custom icon",
      "FIELD17": " name",
      "FIELD18": " contract description",
      "FIELD19": " and a useful function from the contract. This intuitive layout makes it easier than ever for users to understand and engage with smart contracts.In addition",
      "FIELD20": " our solution enhances the standard Read/Write methods found on Etherscan by utilizing OpenAI to sort them in a more practical order",
      "FIELD21": " with the most likely to be used functions appearing first. Users can also add contracts to their personalized on-chain watchlist",
      "FIELD22": " which is attached to their Ethereum wallet",
      "FIELD23": " allowing for seamless tracking and interaction. By combining the convenience of a mobile interface with the power of AI-assisted contract sorting and prioritization",
      "FIELD24": " Mobile Etherscan with AI-Enhanced Contract Interaction aims to revolutionize the way users interact with the Ethereum ecosystem",
      "FIELD25": " fostering increased adoption and accessibility. This project seamlessly integrates various third-party APIs and smart contract interactions to deliver the ultimate mobile contract interaction experience. By leveraging Etherscan",
      "FIELD26": " our platform fetches the contract's source code and ABI data",
      "FIELD27": " which is then processed by an advanced OpenAI Language Model to extract valuable insights that enhance user engagement with contracts.At the heart of our solution lies a dynamic contract card that features a human-readable name",
      "FIELD28": " description",
      "FIELD29": " emoji",
      "FIELD30": " and a useful function",
      "FIELD31": " all derived from the contract's source code. Users can effortlessly add the contract to a custom on-chain watchlist connected to their address by signing a Layer 2 transaction. This offers a more personalized and accessible experience.Our platform also enables users to interact with standard Read and Write functions",
      "FIELD32": " as typically found on Etherscan",
      "FIELD33": " but with a mobile-friendly twist. Furthermore",
      "FIELD34": " these functions are intelligently sorted using OpenAI",
      "FIELD35": " ensuring that the most relevant and frequently used methods are prominently displayed at the top of the list. This innovative approach to contract interaction streamlines the process and caters to users' needs",
      "FIELD36": " making it a top choice for mobile Ethereum enthusiasts.",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 208,
    hackathon: "ETHGlobal Tokyo",
    title: "Sciemurai Donations 🥷",
    more: "https://ethglobal.com/showcase/sciemurai-donations-1qmtf",
    demo: "",
    repo: "https://github.com/metaversemoon/scimurai-donations",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 Worldcoin — Pool Prize 🏊‍♂️ Polygon — Pool Prize ",
    short: "a decentralized platform that helps scientists",
    description: " students",
      "FIELD11": " professors",
      "FIELD12": " institutions",
      "FIELD13": " philanthropists",
      "FIELD14": " and people to protect their intellectual ideas through a decentralized and transparent way using blockchain technology to document research paper journeys from start to finish.",
      "FIELD15": "Scimurai Donations is a decentralized platform that helps scientists",
      "FIELD16": " students",
      "FIELD17": " professors",
      "FIELD18": " institutions",
      "FIELD19": " philanthropists",
      "FIELD20": " and people to protect their intellectual ideas through a decentralized and transparent way using blockchain technology to document research paper journeys from start to finish.The mission of Scimurai Donations is for scientists to take ownership of their works",
      "FIELD21": " projects",
      "FIELD22": " and ideas through a representation of NFTs that they can fundraise",
      "FIELD23": " sell",
      "FIELD24": " swap",
      "FIELD25": " or rent. Each idea/research paper is represented as an NFT that holds a financial value. The way it works is by a simple process where the user shares their awesome idea within our platform",
      "FIELD26": " we generate a Non-Fungible Token",
      "FIELD27": " then the user invites people",
      "FIELD28": " mentors",
      "FIELD29": " experts",
      "FIELD30": " and investors",
      "FIELD31": " to join his/her project by offering funder benefits and incentives.We are providing users with the necessary tools and resources allowing Individuals/Institutions to fund scientists' papers to further their research and progress. This creates new opportunities for people to secure their work",
      "FIELD32": " project",
      "FIELD33": " and ideas as an NFT. As well as gathering funds",
      "FIELD34": " contributing to others",
      "FIELD35": " and donating money.What it doesAllows scientists to create proposalsAllows scientists to provide updates about their paper's status",
      "FIELD36": " progress",
      "FIELD37": " and full processAllows scientist to follow their favorite pets and receive personalized contentAllows scientists to donate erc20 tokensAllows anyone to donate stable coins and ETHAllows scientists to browse fundraisers and filter themIt gives scientists a more accurate picture of the impact we can do it togetherUsers can send or receive tips for their causeUsers can send or receive tipsFundraises are represented as NFTsEasily collect accurate information that is available to the public using blockchain technology Scimurai Donations application makes use of the following software:Mumbai Polygon Network enables our application to be a scalable platform with fast transactions. We deployed our app on the Mumbai Network.Contract Address: 0x2B4c3874FaB2ff0fF19e063De114A8BF5180ed65Scroll enables our application to be a scalable platform with almost gasless transactions. We deployed athttps://blockscout.scroll.io/address/0x6aB33cEC61BA787c0e79757A5aFDE585E1eBB440World Coin makes sure users create only one fundraising event per person and verifies that users are a human and not a botXmtp allows donators to chat with organizersSuperFluid enables stream payment for donations and rewards for our applicationIPFS NFTStorage for data storage on IPFS that generates a transaction hash to create an NFT of a photo.Solidity for the smart contract.OpenZeppelin ERC721 we use the ERC721 template for faster development of our smart contract.Hardhat for local blockchain development.React Js",
      "FIELD38": " Material-ui",
      "FIELD39": " Web3 React Js for the frontend",
      "FIELD40": " Material-UI",
      "FIELD41": " and Web3 to connect to the blockchain.",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 209,
    hackathon: "ETHGlobal Tokyo",
    title: "onChallenge",
    more: "https://ethglobal.com/showcase/onchallenge-pe5qk",
    demo: "",
    repo: "https://github.com/ETHTOKYOATN/donation-fe",
    video: "",
    winner: "🅰️🅰️ Safe — Best Web2 Experience with AA ",
    short: "Introducing a gasless and endless donation platform for web3 enthusiasts looking to make a positive impact. With our user-friendly interface",
    description: " you can donate to those in need without worrying about gas fees. Join us in sharing the wealth and making changes today.",
      "FIELD11": "This project combines a browser-based frontend and smart contract interaction to enable users to deposit their coins (tokens) and mint NFTs that prove their contribution to spreading good impact. The smart contract design involves two different parts of the smart contract: the implementation of ERC721 and DonationController.To get started",
      "FIELD12": " users can deposit their assets to the DonationController Contract and mint their Seed Goal NFT card. They can carve their goal onto the NFT",
      "FIELD13": " decide on the length of their challenge period",
      "FIELD14": " and choose address options for donation.The deposited assets will be sent directly to a certain DeFi product that has no risk of losing the number of deposited assets based on pre-established yield maximizing strategies. (We recognize that we should improve the logics regarding capital efficiency!)Users must visit the website and water their Seed Goal NFT to maintain ownership of their deposit. If they fail to conduct what they promised at the beginning",
      "FIELD15": " they will lose their ownership proportionally to the number of unattended days. (Seeds must feel thirsty!)During the challenge period",
      "FIELD16": " the seed will grow into a sprout and eventually become a bountiful tree",
      "FIELD17": " depending on how sincerely the user takes care of it and performs their challenge. The smart contract will count and record the number of times the seed is watered.Once the challenge is finished",
      "FIELD18": " the deposit will be returned to the user based on their attendance results",
      "FIELD19": " and the accrued rewards will remain in the contract forever",
      "FIELD20": " yielding interest for fund operation. We chose the Polygon network to deploy our project due to its fast block time and the abundance of useful infrastructure available on both the testnet and the mainnet.To develop the frontend",
      "FIELD21": " we used Figma",
      "FIELD22": " Node.js",
      "FIELD23": " and React",
      "FIELD24": " while the backend was substituted by smart contracts based on Solidity. Since our product deals with charities and donations",
      "FIELD25": " we aimed to minimize the bad user experience that is often associated with blockchain-based services.These include annoying multiple interaction processes and high gas fees that are almost the same as the expected reward from our product design. To address these issues",
      "FIELD26": " we utilized the Safe{Core} Account Abstraction SDKs",
      "FIELD27": " specifically the Relay Kit. Our service allows users to send transactions without incurring any fees (gas fees).Furthermore",
      "FIELD28": " since we plan to make this project decentralized and ensure its stable operation",
      "FIELD29": " a portion of the yield will be sent to a Safe account. We expect to have our assets in stable coins",
      "FIELD30": " which we will use to pay for the gas fees associated with the service operation.",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 210,
    hackathon: "ETHGlobal Tokyo",
    title: "LFGroup",
    more: "https://ethglobal.com/showcase/lfgroup-rho18",
    demo: "",
    repo: "https://github.com/AustinZhu/LFGroup",
    video: "",
    winner: "",
    short: "LensTalk is a smart chat tool based on Lens relationships",
    description: " it allows users to interact with each other through chat based on Lens.",
      "FIELD11": "Our project allows users to log in and create chats through their Lens profile. Users can engage in encrypted peer-to-peer chats or create group chats. In group chats",
      "FIELD12": " the group owner can add members to the chat through the user's Lens handle. Owners can remove members from group chat. This project is built upon several key technologies and protocols that work together to create an effective messaging system. The Push Protocol is utilized for group messaging",
      "FIELD13": " ensuring that the system is both responsive and reliable in real-time communication. Additionally",
      "FIELD14": " the Lens API is leveraged to retrieve user profile data",
      "FIELD15": " providing valuable insights into user behavior and preferences that allow for a more personalized messaging experience.The frontend of the system is implemented using React and Next.js",
      "FIELD16": " which provide a powerful set of tools for building dynamic and engaging user interfaces. Although initial tests were conducted using XMTP with Lit Protocol",
      "FIELD17": " it was found that these protocols did not meet the specific requirements of the project. As a result",
      "FIELD18": " the project was adapted at the last minute to use Push Protocol",
      "FIELD19": " which provides a more suitable solution for ensuring the system's robustness and scalability.Overall",
      "FIELD20": " this project serves as an example of the importance of carefully selecting the right technologies and protocols for building a messaging system that is both efficient and effective. Through the use of Push Protocol",
      "FIELD21": " Lens API",
      "FIELD22": " React",
      "FIELD23": " and Next.js",
      "FIELD24": " the messaging system is able to provide a seamless and engaging experience to users",
      "FIELD25": " tailored to their specific needs and preferences.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 211,
    hackathon: "ETHGlobal Tokyo",
    title: "DeFi Anime",
    more: "https://ethglobal.com/showcase/defi-anime-hnfxh",
    demo: "",
    repo: "https://github.com/naddison36/defi-anime",
    video: "",
    winner: "🥇 The Graph — Best use of Existing Subgraph ",
    short: "Animation of a Uniswap V3 USDC/WETH pool over different time periods",
    description: "This project animates what happened to the Uniswap V3 USDC/ETH pool with 0.3% fee over different time periods. Most DeFI analytics are static snapshots of time",
      "FIELD11": " eg pool reserve balances",
      "FIELD12": " or charts of historical prices and volumes. Using animated visuals",
      "FIELD13": " details like which accounts liquidity flows can be made from when can be shown.The workings of Uniswap's Automated Market Maker (AMM) can be clearly seen. The classic xy=k graph can be shown for each of the pool's positions. The transition between each of the pool's animations is animated.This idea can be extended to other DeFi AMMs like Curve and Balancer.It could also be made to work with a live feed of a pool. The dashboard uses Uniswap’s The Graph API to get the Uniswap V3 USDC/ETH pool data. Specifically",
      "FIELD14": " it uses two GraphQL queries to getThe starting total value locked (TVL) of USDC and ETH in the pool.Any flow of liquidity in and out of the pool. That is any Mint",
      "FIELD15": " Burn or Swap transactions between a set time period.The dashboard is made up of a number of visuals that use D3.js to animate what is happening over time. The D3.js library is a low-level tool that helps control the browser's DOM. Specifically",
      "FIELD16": " it uses Scalable Vector Graphics (SVG) objects like circles",
      "FIELD17": " lines",
      "FIELD18": " curves and text. These are built up to create animated visual components.The website uses Vite as a package manager. The project was created using the vanilla TypeScript template. For the hackathon",
      "FIELD19": " the site was just run locally on the developer's machine.Sponsored technologiesUniswapThe Graph",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 212,
    hackathon: "ETHGlobal Tokyo",
    title: "SafePanicModules",
    more: "https://ethglobal.com/showcase/safepanicmodules-a9koj",
    demo: "",
    repo: "https://github.com/onchainification/safe_panic_modules",
    video: "",
    winner: "🔟 Push — Top 10 🏊‍♂️ Polygon — Pool Prize 🫂 Gnosis Chain — Best Project on Safe 🏦 Safe — Best Tech Implementation ",
    short: "perform emergency functions on your multisig safe without needing all signers",
    description: "By enabling our Safe Panic Modules on your Safe",
      "FIELD11": " you are able to perform emergency actions on your multisig without needing all signers to sign off on it. The module needs to be enabled by all signers only once",
      "FIELD12": " after which its functions can be called and executed by a single signer.This increases the chance of a single signer being successful at mitigating emergency situations: revoking token approvals",
      "FIELD13": " withdrawing from protocols",
      "FIELD14": " prevent liquidations",
      "FIELD15": " etc. At the core of this project lies Safe Global multisig's ability to call enableModule ",
      "FIELD16": " basically extending the logic of the contract with an additional smart contract. Some examples of safe modules can be found in the official repository: https://github.com/safe-global/safe-modules",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 213,
    hackathon: "ETHGlobal Tokyo",
    title: "Mastaa",
    more: "https://ethglobal.com/showcase/mastaa-ee43f",
    demo: "",
    repo: "https://github.com/julio4/mastaa",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 Worldcoin — Pool Prize 🏊‍♂️ Polygon — Pool Prize ",
    short: "How to make new users come to your platform? Especially if they know nothing about web3? With Mastaa",
    description: " we offer a simple and modulable paymaster to help you facilitate the onboarding of new users and 100% adaptable to your needs",
      "FIELD11": " using ERC-2535 Diamonds proxy implementation.",
      "FIELD12": "Mastaa is a project around a modular paymaster.The basic principle is to allow a decentralized application (any application) to deploy a paymaster",
      "FIELD13": " which will allow it to sponsor the transaction fees of a part of its users",
      "FIELD14": " for example for new users.The way it works is quite simple: the deployed contract is a proxy (more details in \"how it's made\")",
      "FIELD15": " which uses a module to match the \"paymaster\" qualification. It is completely customizable",
      "FIELD16": " and the solution we propose allows teams to implement other modules (or remove existing ones).Before continuing further reading",
      "FIELD17": " an important information: the project demonstration can not be done in full",
      "FIELD18": " we can only deploy the contract but we have no interface to test it afterwards. Indeed",
      "FIELD19": " even if we think that our smart-contract is functional (for the Worldcoin module",
      "FIELD20": " we can’t say because we have no way to test it)",
      "FIELD21": " we didn't have enough understanding of the tools to test it (Trampoline in particular).With a bit more time",
      "FIELD22": " we probably would have made a more polished implementation. There was also an error fixed on trampoline quite late in the hackathon",
      "FIELD23": " which blocked our understanding for a while unfortunately (but we don't blame the team for that",
      "FIELD24": " we know how hard it is to maintain code and deploy features on very recent technologies).After this little disclaimer",
      "FIELD25": " we can continue :One of the first problems with the paymaster concept is sybil: imagine you are a decentralized protocol and you want to allow new web2 people not to pay their first transaction fees on your platform. You don't want someone with bad intentions to drain the cash you've made available for this",
      "FIELD26": " by spamming transactions. That's why we have developed sybil protection modules",
      "FIELD27": " which allows you to choose several ways to make sure that no one can burn all the funds.For this theme",
      "FIELD28": " we have decided",
      "FIELD29": " in the first instance",
      "FIELD30": " to offer a module using Worldcoin. Ultimately",
      "FIELD31": " it is possible to integrate many modules",
      "FIELD32": " such as a module with sismoConnect",
      "FIELD33": " with Gitcoin Passport",
      "FIELD34": " a module with Lens Protocol (based on a verified user system)",
      "FIELD35": " ...The application also allows you to choose different parameters to configure the sponsorship",
      "FIELD36": " including: whether or not to enable immutability",
      "FIELD37": " the number of transactions the protocol wishes to sponsor",
      "FIELD38": " whether or not to make the contract inspectable (this allows you to see which modules are plugged into the contract and which are not",
      "FIELD39": " but it costs a bit more gas) and the address of the owner. Each parameters is in fact a module",
      "FIELD40": " that can be added or removed",
      "FIELD41": " as desired.If they wish",
      "FIELD42": " teams can completely remove modules",
      "FIELD43": " or develop others based on our reference contract (even if there is only one function left). The contract really allows for extreme modularity",
      "FIELD44": " to be able to adapt to the needs of each protocol",
      "FIELD45": " which can choose the modules of its choice.As the modules developed by the protocols will be audited",
      "FIELD46": " this improves security",
      "FIELD47": " as everyone will have access to a list of tested and audited modules for their own projects.There are many modules that can be implemented",
      "FIELD48": " that we could not develop during the hackathon time",
      "FIELD49": " but that are very interesting and that we would like to implement (or see someone do it 👀)",
      "FIELD50": " here are two of them:Promocodes: you can deploy your customer acquisition funds closer to the end user",
      "FIELD51": " with promocodes allowing free transactions on your platform. A web2 concept",
      "FIELD52": " in web3 it can work too. Imagine all the possibilities with codes like this.The possibility to pay with other tokens than ETH (a swap feature in a way). This swap idea is not very original but here is a little twist: to reward their users",
      "FIELD53": " platforms that create tokens (governance",
      "FIELD54": " or even 👀👻 stablecoins) could reward their users by paying part of the gas fee. Mastaa is a short but not so simple story: when we arrived for the hackathon",
      "FIELD55": " we had an idea about account abstraction",
      "FIELD56": " but on the first day",
      "FIELD57": " after a (very) long discussion with the Safe team",
      "FIELD58": " we realized that it was not at the point we wanted to bring with this hackathon",
      "FIELD59": " as the idea had already been developed (and well developed).As we also had another idea with this scalable paymaster",
      "FIELD60": " we decided to develop this one",
      "FIELD61": " and we found some features along the way.As the ultimate goal is to have this paymaster used by decentralized applications",
      "FIELD62": " we decided not to make a backend for the hackathon",
      "FIELD63": " and to do all the necessary operations on-chain. We created a dashboard to allow teams to manage the paymaster once deployed",
      "FIELD64": " but since we can't test it now",
      "FIELD65": " neither can the dashboard. Eventually",
      "FIELD66": " we will be able to implement a more complete management on the smart contract",
      "FIELD67": " and everything can still work without the frontend.To enable this modularity on deployed paymasters",
      "FIELD68": " we are implementing the ERC-2535 (which standardizes scalable smart contracts after deployment",
      "FIELD69": " you can find the documentation here",
      "FIELD70": " for those who like technical stuff: https://eips.ethereum.org/EIPS/eip-2535). So we spent some time developing this contract which is the basis of our project.The technical stack is : Solidity and JavaScript (with a React framework",
      "FIELD71": " Nexth).In terms of sponsor technologies",
      "FIELD72": " Worldcoin technology fit perfectly into our project",
      "FIELD73": " and is even essential to build serious paymasters",
      "FIELD74": " because as said above",
      "FIELD75": " sybil is a big problem that is important not to overlook.Worldcoin allows",
      "FIELD76": " when users connect their World ID",
      "FIELD77": " to be sure that the user is unique",
      "FIELD78": " there is no way around that.We would have liked to build on Sismo as well",
      "FIELD79": " because Sismo does the same thing",
      "FIELD80": " with \"proof of humanity\" badges",
      "FIELD81": " but not only. It is also possible to consider a community creating a badge (a guild)",
      "FIELD82": " and paying for the gas of its users. To verify that a user belongs to a group",
      "FIELD83": " we can use sismoConnect. Since we already couldn't test the module with Worldcoin",
      "FIELD84": " we decided not to implement a Sismo module (which couldn't be tested either).We focused during this hackathon on the modularity side of the paymaster",
      "FIELD85": " but we also planned to develop a more complete application. The ecosystem around the paymasters is not mature enough and we lacked tools to properly test some of the features of our application.With the rise of account abstraction on Ethereum and L2",
      "FIELD86": " partly thanks to the ERC-4337 but also thanks to the work of many teams",
      "FIELD87": " relayers will take a growing place in the functioning of blockchains",
      "FIELD88": " and we believe that paymasters are bound to develop",
      "FIELD89": " and that they will simplify the onboarding of new users",
      "FIELD90": " while allowing communities to reward their members. We are proud to have been able to propose a very modular solution",
      "FIELD91": " because we think it is important that each protocol/community can develop its own modules according to its specific needs. Our trials to build modules",
      "FIELD92": " even if we think they are interesting (otherwise we would not have developed them)",
      "FIELD93": " are only examples of the field of possibilities offered by this solution. We deployed this solution on Polygon",
      "FIELD94": " because it can be useful on this chain too."
    },
    {
    id: 214,
    hackathon: "ETHGlobal Tokyo",
    title: "tips-works",
    more: "https://ethglobal.com/showcase/tips-works-zd2wh",
    demo: "https://drive.google.com/file/d/1VMqdMgQeyrFwE61SQyt-b7hDwmTnhQaa/view",
    repo: "https://github.com/kamome-829/tips-works",
    video: "",
    winner: "",
    short: "Tips-Work is a fully anonymous web3-based crowdsourcing platform. It allows for a world where factors like gender",
    description: " age",
      "FIELD11": " and background are fairly assessed without being visible.",
      "FIELD12": "This service maintains complete anonymity for both the requesters and the workers. A predetermined sum is automatically transferred to the worker who submits a deliverable that meets the requester's requirements through a smart contract. Additionally",
      "FIELD13": " clients can mint and view submitted deliverables individually in the order they are received. (Other submissions remain pooled.) Moreover",
      "FIELD14": " URLs and other text within the deliverables are encrypted using the client's public key",
      "FIELD15": " ensuring the content remains confidential and doesn't leak to third parties. ①Creation Step 1:Set up a development environmentInstall various packages such as Hardhat and React's Create React App to prepare for development.②Step 2:Develop the front end using React③Step 3:Craft a smart contract with SolidityTest the contract using Remix - Ethereum IDE",
      "FIELD16": " and deploy/verify it on the testnet this time around.④Step 4:Integrate the created contract with the front end",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 215,
    hackathon: "ETHGlobal Tokyo",
    title: "snarkyjs-img",
    more: "https://ethglobal.com/showcase/snarkyjs-img-xyvne",
    demo: "",
    repo: "https://github.com/socathie/snarkyjs-img",
    video: "",
    winner: "🏊 Mina — Pool Prize ",
    short: "A cutting-edge SnarkyJS library for secure image verification using zero-knowledge proofs! Preserve privacy & trust in HD images with our efficient zk-img inspired solution. Verify authenticity",
    description: " fight deepfakes!",
      "FIELD11": "snarkyjs-img is an innovative SnarkyJS library designed to empower developers with the ability to implement secure image verification using zero-knowledge proofs",
      "FIELD12": " inspired by the zk-img concept (https://medium.com/@danieldkang/zk-img-fighting-deepfakes-with-zero-knowledge-proofs-9b76c23e3789). As the world grapples with the growing threat of deepfakes and manipulated media",
      "FIELD13": " this project aims to provide a robust",
      "FIELD14": " privacy-preserving solution for verifying image authenticity.snarkyjs-img offers a standardized interface for image transformations",
      "FIELD15": " making it easy for developers to build and compose custom transformations to suit various applications. The library currently includes a robust registry of trusted transformations",
      "FIELD16": " with the potential for further expansion by the developer community.The primary goal of snarkyjs-img is to enable secure image verification while preserving the privacy of both the original and transformed images. snarkyjs-img ensures that sensitive information remains protected. This project utilizes the widely-accepted Mina zkApp CLI template as its foundation and extends its capabilities by implementing a variety of image transformation circuits in TypeScript. By doing so",
      "FIELD17": " it provides developers with a comprehensive suite of tools to seamlessly interact with and manipulate image data.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 216,
    hackathon: "ETHGlobal Tokyo",
    title: "Web322",
    more: "https://ethglobal.com/showcase/web322-y2q42",
    demo: "https://http://web322.online/",
    repo: "https://github.com/Team322/web322-sdk",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Tamper-proof Web2 data sourcing on the blockchain without relying on costly repeated API calls. Web322 allows for public verification that the call was sent to the right server",
    description: " harnessing HTTPS’s enncrypted traffic to prevent tampering from bad actors. ",
      "FIELD11": "Web322 is a new way of getting off-chain data to your dApp without risking repeated API calls. When using Large Language Models",
      "FIELD12": " for example",
      "FIELD13": " calls are priced per query",
      "FIELD14": " so using a decentralized oracle network multiplies the running cost of your dApp.Our project solves this by encrypting the TCP traffic between the API endpoint and the off-chain caller. This enables us to serve the encrypted TCP dump publically so that our users (and their end-users) can verify for themselves that the right endpoint was indeed served. For example",
      "FIELD15": " this allows anyone to check that an LLM prompt was indeed sent to ChatGPT as opposed to Anthropic Claude.They can then verify that the traffic was actually with the service they asked for",
      "FIELD16": " and that the values they received indeed correspond to what was actually exchanged.In summary",
      "FIELD17": " we solve both open verifiability of oracles and duplicated API calls for bringing Web2 data into the blockchain by harnessing cryptography and a novel",
      "FIELD18": " trustless system architecture.Here is a demo: https://youtu.be/D2FbvB9jmYI (in case the upload on this website doesn't upload in time). Web322 consists of four services - an SDK for on-chain clients",
      "FIELD19": " an off-chain worker",
      "FIELD20": " a CRUD backend",
      "FIELD21": " and a frontend for interfacing with the above. The smart contracts can be readily deployed on the Ethereum Mainnet and several leading Layer 2 chains:  Taiko",
      "FIELD22": " Polygon",
      "FIELD23": " Scroll",
      "FIELD24": " Alfajores",
      "FIELD25": " Chiado",
      "FIELD26": " and Mantle",
      "FIELD27": " as well as the Sepolia Testnet.Users can go to our website and create an account. They then generate a secret key which will be used to encrypt their API requests. The framework of choice is React",
      "FIELD28": " with Tailwind for styling.Our SDK provides templates for creating smart contracts using our service. They interact with an oracle by asking it to make API calls and receive the call outputs",
      "FIELD29": " plus a verification hash. The oracle then emits an event with this request",
      "FIELD30": " which is picked up off-chain by the worker.After this",
      "FIELD31": " the actual call is made. The worker stores on the backend a dump of the TCP traffic between it and the API endpoint. The communication is via the HTTPS protocol",
      "FIELD32": " which uses Transport Layer Security to prevent tampering from bad actors. It involves a handshake process between the worker and the endpoint for generating a secret string and encoding the traffic with this string. This prevents tampering with the traffic",
      "FIELD33": " as it is in cyphertext. For additional security",
      "FIELD34": " the traffic dump is hashed and returned to the user on the blockchain alongside the call result. For cases where an API key is used (e.g. to query Large Language Models)",
      "FIELD35": " users have the option to further encrypt the dump using their API key.The user can then check that the hash of the published dump matches the results he received",
      "FIELD36": " that the published dump indeed involved the server he wanted to communicate with",
      "FIELD37": " and that the public dump is a valid HTTPS exchange.The CRUD backend provides endpoints for communicating with the other services and stores the dumps and hashes of the responses and requests in a database. It also keeps track of registered users by interacting with the frontend.We developed our code in a GitHub org",
      "FIELD38": " where the functionalities are subdivided amonst 4 repositories",
      "FIELD39": " whose names we chose to be self-explanatory.",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 217,
    hackathon: "ETHGlobal Tokyo",
    title: "Easy NFT",
    more: "https://ethglobal.com/showcase/easy-nft-0rym3",
    demo: "",
    repo: "https://github.com/chucklam/biconomy-sdk-nft-starter",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "The easiest way to mint an NFT. No need for wallet or gas! Help bring the next million into crypto.",
    description: "The project uses Account Abstraction to enable the user to log in using social network such as Facebook and mint NFTs on Polygon Mumbai testnet without using gas. No longer does the user need a crypto wallet such as Metamask. The user also doesn't need to obtain gas to get started in crypto",
      "FIELD11": " which is often a tedious process that prevents people in emerging countries from getting onboard. I use the Biconomy SDK to build a React app using Vite. Material UI components are added to improve the UI. It uses the social login and gasless transaction features of Biconomy. A smart contract wallet is generated for the user based on social credential",
      "FIELD12": " and gas fees for creating an NFT is sponsored by the NFT creator. Alchemy API was used to retrieve and display a user's NFT minted on the Polygon Mumbai testnet.",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 218,
    hackathon: "ETHGlobal Tokyo",
    title: "DeedHub",
    more: "https://ethglobal.com/showcase/deedhub-vddad",
    demo: "",
    repo: "https://github.com/tommymsz006/deedhub",
    video: "",
    winner: "",
    short: "NFT loan marketplace and aggregator designed for advanced users and traders",
    description: "The project aims to capture various data points in the NFT market in general",
      "FIELD11": " including price points in sales market",
      "FIELD12": " NFT loan listing in other protocols ",
      "FIELD13": " and provide the required data analytics so that advanced users can risk-manage their loan positions/listing while gaining considerable income. It also helps to boost for greater liquidity and market size for NFT loans in general. It captures the data out in the market",
      "FIELD14": " including NFT loan platforms",
      "FIELD15": " market trading metrics & activities such as OpenSea",
      "FIELD16": " Blur and LooksRare",
      "FIELD17": " and other useful reference data such as rarity and third-party NFT valuation. With those",
      "FIELD18": " interesting data points can be placed together on one screen for users to compare and find the right deals that fit for them. It can also allow placing offers across multiple platforms at the same time",
      "FIELD19": " thanks to their permission smart contracts.",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 219,
    hackathon: "ETHGlobal Tokyo",
    title: "3TREE",
    more: "https://ethglobal.com/showcase/3tree-gzm9j",
    demo: "",
    repo: "https://github.com/choichoijin/3tree",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Send and receive token via SNS-id. Integrate your Identities.",
    description: "3TREE rapidly builds WEB3 identities by connecting social links and wallets. By generating bio links",
      "FIELD11": " users can quickly conduct transactions without revealing their identity through social links alone and expand their digital identity.Additionally",
      "FIELD12": " 3TREE enables users to manage their digital wallets at a UX level similar to WEB2",
      "FIELD13": " providing an integrated overview of their transaction history. Users can view detailed send and receive histories",
      "FIELD14": " monitor the status of transactions as completed",
      "FIELD15": " pending",
      "FIELD16": " or failed",
      "FIELD17": " and instantly receive assets if the transaction hasn’t been completed yet.Furthermore",
      "FIELD18": " users can choose wrapped tokens for receiving assets",
      "FIELD19": " made possible by the application of on-chain scheduler technology. This offers a gasless experience for users. By introducing a marketplace where users can utilize their in-platform pay points",
      "FIELD20": " 3TREE expands the use-cases for digital assets. By seamlessly integrating with existing WEB2 pay points",
      "FIELD21": " 3TREE contributes to the expansion of the crypto ecosystem. Our project integrates web3 and SNS identities into a user-friendly web app for accessible crypto transactions. We developed Solidity smart contracts using Hardhat",
      "FIELD22": " Ethers",
      "FIELD23": " and OpenZeppelin libraries",
      "FIELD24": " incorporating custom encryption using salt and a custom Signer for accessing escrows based on social identities. The responsive frontend was built with React and JavaScript",
      "FIELD25": " connecting to smart contracts through Web3.js and Ethers. The backend utilizes a Spring Boot framework and a MySQL database",
      "FIELD26": " deployed on AWS infrastructure including RDS",
      "FIELD27": " EC2",
      "FIELD28": " Route53",
      "FIELD29": " ALB",
      "FIELD30": " and ACM.",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 220,
    hackathon: "ETHGlobal Tokyo",
    title: "ChatGroupWallet",
    more: "https://ethglobal.com/showcase/chatgroupwallet-dvv0y",
    demo: "https://www.canva.com/design/DAFgJAm8PKY/N738Ob16uDRu7BvsxeCZ7Q/edit?utm_content=DAFgJAm8PKY&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton",
    repo: "https://github.com/maobushi/push-dapp-group-wallet-address",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Using the chat function of the push protocol",
    description: " create a group chat and then create a new wallet for the group.",
      "FIELD11": "Using the chat function of the push protocol",
      "FIELD12": " create a group chat and then create a new wallet for the group.You can skip all the tedious accounting talk",
      "FIELD13": " plus you can open a common account just by creating a group chat. And our solution incorporates additional scalability.Consider",
      "FIELD14": " for example",
      "FIELD15": " the case of toC.Add a contract that aggregates the amount paid for the wallet and refunds it so that the percentage of the amount paid and the percentage of the wallet balance are correct",
      "FIELD16": " and execute it at the time of group elimination",
      "FIELD17": " so there is no need to worry about who is refunded to whom and how much.In the toB",
      "FIELD18": " If you add a contract that requires the approval of a specific member for remittance",
      "FIELD19": " you can seamlessly structure the approval process using a chat tool. Of course",
      "FIELD20": " it can also be used for DAO.In this case",
      "FIELD21": " we created the EOAwallet as the group's wallet",
      "FIELD22": " but it is not even necessary to generate a private key if we enable the connection to the AAwallet.We can make the naïve topic of money matters a minimal and seamless process that enriches lives. That is our solution. The push protocol allows us to implement a chat function and create wallet addresses for it",
      "FIELD23": " making it possible to create wallets for each group.A group wallet was created by importing ethers.js",
      "FIELD24": " one of the Ethereum JavaScript libraries",
      "FIELD25": " generating a private key",
      "FIELD26": " and distributing it to each group chat.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 221,
    hackathon: "ETHGlobal Tokyo",
    title: "PolyDraw",
    more: "https://ethglobal.com/showcase/polydraw-h8ga9",
    demo: "https://polydraw.netlify.app/",
    repo: "https://github.com/polydraw-ethglobal/smart-contract",
    video: "",
    winner: "🆔 Polygon — Best use of Polygon ID 🏊‍♂️ Polygon — Pool Prize ",
    short: "A decentralized and transparent platform for fair product lotteries",
    description: " featuring physical items on the blockchain. Powered by Web3",
      "FIELD11": " Polygon ID",
      "FIELD12": " Chainlink VRF",
      "FIELD13": " and smart contracts. #blockchain #lottery #fairness #physicalproducts",
      "FIELD14": "Our project is a decentralized platform that offers a fair and transparent solution for product lotteries. What makes our platform unique is that it features physical items that are tracked and verified on the blockchain. Merchants who wish to list their products on our platform must go through a verification process using Polygon ID to receive a Verifiable Credential. Once verified",
      "FIELD15": " they can use the platform to host a lottery for their product. Buyers can then participate in the lottery by paying with cryptocurrency. The winner is selected using Chainlink VRF",
      "FIELD16": " which is a secure and tamper-proof random number generator. When the lottery is over",
      "FIELD17": " the winner can claim their prize by signing the transaction with their wallet to ensure they have received the item before the transaction is confirmed on the blockchain.Our platform is powered by Web3",
      "FIELD18": " which is a set of protocols and tools for building decentralized applications. We used Polygon ID to verify merchants and ensure the authenticity of their products. Chainlink VRF was used for the random selection of winners in our lotteries. Smart contracts are used to manage the flow of products",
      "FIELD19": " transactions",
      "FIELD20": " and lottery results",
      "FIELD21": " ensuring the entire process is transparent and secure.In addition",
      "FIELD22": " we believe that our platform offers a more sustainable solution for product lotteries. By leveraging the blockchain to track and verify physical items",
      "FIELD23": " we can reduce waste and minimize the environmental impact of lotteries. Overall",
      "FIELD24": " our platform offers a unique and innovative solution to the problem of unfair product lotteries",
      "FIELD25": " and we are proud of what we have accomplished so far. Our platform is built using a combination of Web3",
      "FIELD26": " Polygon ID",
      "FIELD27": " Chainlink VRF",
      "FIELD28": " and smart contracts. We used the Polygon network for its low gas fees and fast transactions. To ensure the authenticity of products",
      "FIELD29": " we used Polygon ID to generate Verifiable Credentials that are required for merchants to list their products on the platform. We leveraged Chainlink VRF to ensure the selection of winners in our lotteries is random and tamper-proof. Our smart contracts are used to manage the flow of products",
      "FIELD30": " transactions",
      "FIELD31": " and lottery results",
      "FIELD32": " ensuring the entire process is transparent and secure. As for hacky solutions",
      "FIELD33": " we used a clever mapping algorithm to ensure that the random numbers generated by Chainlink VRF are mapped to the remaining prizes in a fair and efficient way. Overall",
      "FIELD34": " we are proud of the platform we have built",
      "FIELD35": " and we believe it offers a unique and innovative solution to the problem of unfair product lotteries.",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 222,
    hackathon: "ETHGlobal Tokyo",
    title: "Dumpling Farm",
    more: "https://ethglobal.com/showcase/dumpling-farm-kdjp9",
    demo: "https://http://167.172.162.212:3000/",
    repo: "https://github.com/prnthh/dumplings",
    video: "",
    winner: "",
    short: "Democratising financial freedom by bringing web3 lending to web2 borrowers",
    description: "Dumpling FarmWhere you can farm small tasty bites of yieldThe Problem:Change narrative of such funding as “donations” act as lego blocks for market participants to build innovative digital financial marketsChange narrative of “sacrifice what you need in order to save other people / the planet” (Maslow’s pyramid)privacy of lenders and borrowersCurrent friction points:Systemic hoarding of capital by centralised bodies: governments",
      "FIELD11": " banks",
      "FIELD12": " etcLack of technological penetration in developing countriesLack of education inn 2 branches: understanding human motivation and desire to stay exclusive (via jargon and lack of incentive to share knowledge)Solution will address:Capital must earn more capital from funding such projects  --> real-world sustainable APY to lendersCapital from crypto will finance climate-positive projectsweb2 borrowers must have interface to lodge data to apply for loans and be matched to capital; bringing the next billion into web3Features of protocol:lender interface: lenders can deposit into pools that are created by the borrowers-borrower interface: they can enter data that can be used to structure the pools",
      "FIELD13": " with only strictly necessary data available to public (for example: attestations of web2 credit score that will be one of the parameters to do on-chain \"scoring\" before borrowers can be matched to loans) A borrower deploys a smart contract allowing lenders to send ERC-20-based funds into it (a pool); funds are then pulled and off-ramped into fiat to fund these companies.After a predetermined duration",
      "FIELD14": " the lenders can withdraw their funds with interest. In future",
      "FIELD15": " if the lenders withdraw before the pool completion date",
      "FIELD16": " they will incur a penalty.Longer commitment times will create higher interest rates.Innovation:UI is meant to be a 2.5 approach appealing to both defi OGs and web2 lenders.The front-end is a minimal interface for:borrowers can create a new pool that lenders can deposit funds into",
      "FIELD17": " and define timeframes and yield expectationslenders can browse through existing pools and make deposits/withdrawals from pools.The client uses the Celo ContractKit to allow lenders to deploy contracts directly from their browser.Smart contracts:Truffle + solidityContracts deployed on CeloClient app:react@celo/react-celo @celo/contractkit",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 223,
    hackathon: "ETHGlobal Tokyo",
    title: "GPTutor (🤖",
    more: "🤖)",
    demo: "https://ethglobal.com/showcase/gptutor-igkwd",
    repo: "https://docs.google.com/presentation/d/1CnM8pbYp3_PXYRpLWe4_7jx_4WL7tf4bAVb2BZCew1k/edit#slide=id.p",
    video: "https://github.com/RayHuang880301/gptutor-extension",
    winner: "",
    short: "",
    description: "A VS Code extension for smart contract development",
      "FIELD11": " including \"tutor\"",
      "FIELD12": " \"audit\" features and a efficient preprocessing system",
      "FIELD13": "GPTutor is a Visual Studio Code extension that uses OpenAI's GPT (Generative Pre-trained Transformer) models to provide users with code tutor and code audit for a better understanding of their code. It supports Solidity language",
      "FIELD14": " enabling users to get insights into code blocks and improve their coding skills.GPTutor has two product features:Code tutor:Help developers understand code content and logic in the whole smart contractCode audit:Check the smart contract code for vulnerabilities",
      "FIELD15": "and give suggestions for improvementFeatures:Get code tutor and audits using OpenAI's GPT models.Supports Solidity language for now.Hover over code blocks to display GPTutor suggestions.Non-custodial API key for GPTutor (100% Free and we don't own your key).Selected the GPT model (supported GPT-3.5",
      "FIELD16": " GPT-4). The core technologies of GPTutor include chatGPT",
      "FIELD17": " VSCode extension",
      "FIELD18": " and preprocessing programWe combined chatGPT and VSCode extensions to develop a perfect developer tool for smart contract (solidity) developers.Instead of asking chatGPT directly",
      "FIELD19": " using an extension makes the whole process more efficient for the developer",
      "FIELD20": " it allowed them to interact directly with ChatGPT during the development process.What's more exciting is our preprocessing program",
      "FIELD21": " which allows users to obtain more accurate and expected results. When the developer selects the text section he wants to ask in VSCode",
      "FIELD22": " our preprocessing system will turn it into a more efficient prompt and provide it to ChatGPT for more accurate conclusions and suggestionsThe tutor feature can perfectly and completely explain all the functions in the UniswapV3 contract. In addition",
      "FIELD23": " some extremely serious vulnerabilities (like reentrancy attacks) can even be found in the audit feature and the safety code can be given in result details",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 224,
    hackathon: "ETHGlobal Tokyo",
    title: "Mango",
    more: "https://ethglobal.com/showcase/mango-azfbe",
    demo: "https://youtu.be/sDeHjolVNLU",
    repo: "https://github.com/berkingurcan/mango-eth-tokyo-23",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏦 Safe — Best Tech Implementation ",
    short: "Identity preserved multisig wallet management & airdrops for GitHub orgs. Empower moderators & contributors with Sismo Connect & Safe. Decentralized rewards",
    description: " privacy-first! 🥭🔐 #DeFi #blockchain",
      "FIELD11": "Mango is a decentralized",
      "FIELD12": " privacy-focused platform designed to streamline financial management for GitHub organizations",
      "FIELD13": " enabling moderators to securely manage funds and distribute rewards & contributors to claim their reward. Built on Goerli for now",
      "FIELD14": " Mango leverages Sismo Connect for anonymous authentication and Safe for account abstraction and multisig wallet functionality.Moderators of the repo/organization can manage a Multisig Account Abstraction (AA) Wallet",
      "FIELD15": " initiating and approving internal transfers within the organization. Sismo Connect ensures their identities remain private while facilitating secure wallet interactions. The multisig feature provides an additional layer of security",
      "FIELD16": " requiring multiple approvals for transactions to be executed.In order to gate we use Sismo Verifier and use it in addOwner function. addOwner function is basically become a authorized contract for changing proxy and call addOwnerWithThreshold function in OwnerManager.sol. Then verified(thanks to Sismo) user becomes a multisignature signer. Also threshold can be changed optionally.Next StepsMango also introduces a seamless airdrop system for rewarding contributors. Moderators can create token airdrops and Contributors can then claim their rewards using Sismo Connect",
      "FIELD17": " ensuring their privacy is maintained throughout the process. The platform integrates with an ERC-20 token smart contract for efficient token distribution.By combining privacy",
      "FIELD18": " security",
      "FIELD19": " and convenience",
      "FIELD20": " Mango aims to revolutionize financial management and rewards distribution in the GitHub ecosystem",
      "FIELD21": " fostering a more collaborative and engaging environment for open-source projects. My stack is Next.js and Solidity. I used Safe Protocol Kit to create Multisignature Wallet",
      "FIELD22": " Safe Modules to add functionality to created Safe and used Sismo Connect for onchain zk Github verification. Basically I have Safe Account which is main account",
      "FIELD23": " SismoConnect Safe Module which benefits from Sismo onchain verifier to gate access to the account and add external functionality. Also I used Sismo Connect React package in order to provide front end functionality to use Sismo Connect. My hacky thing is adding addOwner functionality to the Sismo Connect Safe Module. It provides the main functionality of the app. It provides zk verification for becoming Multisig Wallet Signer while procuring privacy.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 225,
    hackathon: "ETHGlobal Tokyo",
    title: "Ichimatsu",
    more: "https://ethglobal.com/showcase/ichimatsu-jj5ok",
    demo: "",
    repo: "https://github.com/yukia3e/Ichimatsu",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "\"Ichimatsu\" is the first step for live music artists to explore new possibilities with web3.",
    description: "web3 can expand the possibilities of music artists' activities",
      "FIELD11": " and NFT believes it is the best first step",
      "FIELD12": " but the following issues need to be addressed before it can be used widely and easily.High UX hurdlesThe difficulty of creating and managing walletsThe hassle of buying crypto assetsPreparation of NFT imagesIchimatsu would like to provide a service that can solve these problems!AboutAccount creation as smooth as Web2's UXEasily generate NFTs to commemorate events from \"a single image file.\"Sponsoring gas transactions allows you to get started even if you don't have cryptocurrency.Origin of the name \"ichimatsu\"市松模様 (ichimatsu-moyou): A check pattern consisting of alternating squares or rectangles of two colors. Because the way continues without interruption",
      "FIELD13": " it means \"eternity and prosperity.\"一抹 (ichimatsu): It means \"just a little.\"We named the service to be such a service that \"a little Step for artists can boost their sustainable and enduring artist activities.\" I am using the following technology for this project.Libraries and technologies usedReactNext.jsZustandTailwind CSSReact Hook FormAlchemy SDKPolygonSafe{Core} Account Abstraction SDKAuth Kitweb3authRelay Kit (WIP)GelatoPinataether.jsHardhatAlchemyWe challenged Safe Relay-kit to sponsee this time",
      "FIELD14": " but were not able to catch up",
      "FIELD15": " so we would like to take on additional challenges in the future.",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 226,
    hackathon: "ETHGlobal Tokyo",
    title: "HyperCartridge",
    more: "https://ethglobal.com/showcase/hypercartridge-66mhs",
    demo: "https://ide.hypercartridge.eth.limo/",
    repo: "https://github.com/funDAOmental/hypercartridge",
    video: "",
    winner: "🥉 Gnosis Chain — Best Use ",
    short: "HyperCartridge: Mintable Collaborative Application Cartridges",
    description: " which allow a single or multiplayer app to be minted to an NFT",
      "FIELD11": " and served as a static site or via ENS.",
      "FIELD12": "HyperCartridge mints ~~collaborative~~ applications into NFT \"cartridges\"",
      "FIELD13": " which can be retrieved and run locally",
      "FIELD14": " or optionally served as a static site or via an ENS domain.Each HyperCartridge is a self-sovereign encapsulation of logic and state for an application. The first HyperCartridge is an IDE that can be used to design and mint more HyperCartridges.HyperCartridges are written using ValueScript (a dialect of TypeScript with value semantics) and can be used to make single player applications",
      "FIELD15": " ~~or linked to an edge server to make collaborative",
      "FIELD16": " multiplayer applications~~.Each HyperCartridge is comprised of the HyperCartridge kernel (the \"kernaal\")",
      "FIELD17": " application logic written in ValueScript",
      "FIELD18": " and metadata (such as the server URL). A deployment server accepts a destination address and the cartridge application logic",
      "FIELD19": " pins the application logic in IPFS and mints an NFT pointing to the application logic",
      "FIELD20": " then transfers the NFT to the users address (paying gas",
      "FIELD21": " thanks HyperCartridge!)~~An optional server allows users to deploy ValueScript for state transitions and to synchronise the state between clients to enable collaborative experience. (Not finished).~~ We started with the (perhaps hubristic) goal of building a mechanism for self-sovereign off-chain applications that inherit a similar control and risk profile to the on-chain assets that spawn them",
      "FIELD22": " by encapsulating logic and state into an NFT and using it to bootstrap collaborative client applications.We wrote the kernel (a static file written using TypeScript",
      "FIELD23": " designed to be hostable anywhere and referenced explicitly from each HyperCartridge NFT) . Next",
      "FIELD24": " a server that would enable real-time collaboration between people using the same HyperCartridge. We weren't quite able to get that part running. We deploy these to NFTs that can then be hosted as a static site.The first HyperCartridge is an IDE",
      "FIELD25": " we deployed that and a few other cartridges.A bunch more gritty details but we're out of time!",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 227,
    hackathon: "ETHGlobal Tokyo",
    title: "Moonlight",
    more: "https://ethglobal.com/showcase/moonlight-vhpgj",
    demo: "https://lenster-git-main-savdont.vercel.app",
    repo: "https://github.com/SavDont/lenster",
    video: "",
    winner: "🥈 Lens — Best Use ",
    short: "In-chat payments creating utility at the intersection of crypto and decentralized social.",
    description: "Sending and receiving crypto payments should not come with pangs of paranoia. Copying and pasting addresses is painful",
      "FIELD11": " error prone",
      "FIELD12": " and requires unintuitive UX like checking the first four & last four characters of a big hexadecimal number. After all the meticulous character matching",
      "FIELD13": " users can still lose your money by accidentally sending to the wrong address differing by only one character because they didn't quadruple check the entire address of the recipient address.It's time for a new user-friendly experience that brings daily utility to crypto. With this content type",
      "FIELD14": " we want to take a step closer to onboarding a billion users to web3 by enabling them to pay each other using crypto to split bills for dinners",
      "FIELD15": " coffee dates",
      "FIELD16": " and other purchases. Embedding payments in a chat interface leverages the shared context and trust between users",
      "FIELD17": " and makes it easy to send and receive payments without the need to worry about long hex addresses. The project uses Lens protocol for identity to wallet resolution",
      "FIELD18": " is a fork of Lenster",
      "FIELD19": " and leverages XMTP as the transport protocol.Lens profiles are NFTs that allow resolution via the NFT's owner attribute. Lenster's DM (direct messaging) interface leverages existing conversations for trust and co-ordination. Finally",
      "FIELD20": " XMTP content types allow in-chat payment metadata to be stored in an immutable fashion within the context of a conversation.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 228,
    hackathon: "ETHGlobal Tokyo",
    title: "Autopilot",
    more: "https://ethglobal.com/showcase/autopilot-gps9k",
    demo: "",
    repo: "https://github.com/abhishekvispute/autopilot",
    video: "",
    winner: "🤝 Polygon — Best Public Good with Account Abstraction 🏊‍♂️ Polygon — Pool Prize 🅰️🅰️ EF — Best Account Abstraction ",
    short: "Configure/Schedule/Automate your wallet's future actions seamlessly ",
    description: "This project builds upon account abstraction",
      "FIELD11": " enabling users to seamlessly automate future actions for their wallets.Each account consists of two distinct actors: the owner",
      "FIELD12": " who is the user themselves",
      "FIELD13": " and a bot.The owner grants the bot permission to perform a specified range of actions",
      "FIELD14": " which are executed according to a predetermined schedule and interval. By automating these tasks",
      "FIELD15": " the bot efficiently carries out the owner's desired actions without necessitating the owner's intervention moving forward.The system is non-custodial",
      "FIELD16": " as funds remain solely in your wallet. Furthermore",
      "FIELD17": " it is permissionless",
      "FIELD18": " as the bot can only perform actions explicitly permitted by the user. This project utilizes ERC4337 (Account Abstraction) and extends its contract functionality. We override the validateSignature method to accommodate signatures from both the owner and the bot",
      "FIELD19": " ensuring the signer's identity is recorded. Later",
      "FIELD20": " during the execution process",
      "FIELD21": " we permit only the authorized actions for each party according to their respective schedules while allowing the owner to perform all actions.Our client incorporates the Account Abstraction SDK",
      "FIELD22": " and we use StackUp as our bundler. The contracts have been deployed on both Görli and Polygon Mumbai networks. The rationale behind deploying on Polygon is the reduced gas costs associated with highly active bots. We believe that for intricate bot strategies",
      "FIELD23": " affordable gas prices are crucial.We implemented a somewhat hacky solution for our bot script by overriding node modules and committing the node modules to the repo.Our unique use case required account derivation from the owner's keys while obtaining signatures from the bot's keys.We had to override the getAccountAddress method within the Account Abstraction SDK to achieve this.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 229,
    hackathon: "ETHGlobal Tokyo",
    title: "Hippocratic Island",
    more: "https://ethglobal.com/showcase/hippocratic-island-c8jez",
    demo: "https://twitter.com/THUBA_DAO",
    repo: "https://github.com/THUBA-DAO/HippocraticIsland",
    video: "",
    winner: "📜 Scroll — Just Deploy 👷 Taiko — 🥉 Best Dapp ",
    short: "It is a web3 platform for patients to communicate with each other",
    description: " providing a safe and comfortable forum for those with physical and mental illnesses to share experiences and seek help.",
      "FIELD11": "It is a web3 platform for patients to communicate with each other",
      "FIELD12": " providing a safe and comfortable forum for those with physical and mental illnesses to share experiences and seek help. We also use zk technology to verify access to the forum channel",
      "FIELD13": " ensuring that only those with specific illnesses can enter the corresponding channels for communication",
      "FIELD14": " thereby maintaining a safe and good communication environment. That's why we build Hippocratic Island",
      "FIELD15": " because now we have blockchain technology and zk technology. we can provide a secure and comfortable web 3.0 communication platform for patients with physical and mental illnesses through blockchain and zero-knowledge proof technology",
      "FIELD16": " and we also use SBT to verify access.This is our process for the authentication：The patient receives the hospital's diagnosis information.The patient sends the hash value of their address and disease information",
      "FIELD17": " and proof along with the hospital's signature",
      "FIELD18": " to the smart contract.The smart contract verifies through zk whether the patient has a certain disease.After confirmation",
      "FIELD19": " the corresponding SBT is issued to the patient's address.After obtaining SBT",
      "FIELD20": " the users can enter the corresponding channel of the Hippocratic island for communication.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 230,
    hackathon: "ETHGlobal Tokyo",
    title: "towerbattle",
    more: "https://ethglobal.com/showcase/towerbattle-roter",
    demo: "",
    repo: "https://github.com/monaou/blockchain-app-sendEth",
    video: "",
    winner: "",
    short: " simple application for sending ETH on the Ethereum blockchain network",
    description: "",
      "FIELD11": "This project aims to provide a simple application for sending ETH on the Ethereum blockchain network. The application is built using Node.js and Web3.js",
      "FIELD12": " and allows users to specify the sender",
      "FIELD13": " recipient",
      "FIELD14": " and amount of ETH to be sent. The application communicates with the Ethereum network using Web3.js",
      "FIELD15": " generates the sending transaction",
      "FIELD16": " and sends it to the network.This project is intended to be a good resource for developers interested in blockchain and smart contract development",
      "FIELD17": " and to serve as an introductory project for those looking to get started with blockchain development. Contributions to the project are also welcome. This project is built using Node.js and Web3.js. Node.js is an open-source runtime environment for building server-side applications using JavaScript. Web3.js is a JavaScript library that provides APIs to facilitate communication with the Ethereum network.In this application",
      "FIELD18": " Web3.js is used to communicate with the Ethereum network. Using Web3.js",
      "FIELD19": " a transaction containing the specified sender",
      "FIELD20": " recipient",
      "FIELD21": " and amount of ETH can be generated and sent to the network.To send ETH on the Ethereum network",
      "FIELD22": " the transaction needs to be mined. This application automatically calculates the necessary fee (gas) for the network to mine the transaction and adds it to the transaction.Contributing to this project can help gain a deeper understanding of blockchain technology and smart contract development.",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 231,
    hackathon: "ETHGlobal Tokyo",
    title: "YUMEGIK",
    more: "https://ethglobal.com/showcase/yumegik-fp3bg",
    demo: "https://yumegik.on.fleek.co/",
    repo: "https://github.com/kimchan122/YUMEGIK",
    video: "",
    winner: "",
    short: "For you in the future",
    description: " and for you in the present who are contemplating whether or not to process memories such as the pictures you drew and the photos you took in the past. I suggest using a and b to store those memories instead.",
      "FIELD11": "hi! This project is 'YUMEGIK'.'YUMEGIK' was born from the combination of 'ゆめ (yume)'",
      "FIELD12": " which means dream in Japanese",
      "FIELD13": " and 'MEGIK'",
      "FIELD14": " a combination of 'MAGIC' and 'KID'.I like to draw.Over 20 years since I was 5 years old",
      "FIELD15": " I still love to draw.Even when I'm just studying in general",
      "FIELD16": " even when I stop developing for a while",
      "FIELD17": " even after entering web3",
      "FIELD18": " I continue to draw",
      "FIELD19": " at least scribbling.What I feel while painting is that I can't find more of the pictures I've painted before (as far as I can remember).Also",
      "FIELD20": " while moving this time",
      "FIELD21": " I had no choice but to leave most of the paintings I had when I was very young due to space constraints.Also",
      "FIELD22": " you can meet many people while drawing",
      "FIELD23": " and I have often seen that the number of people who draw as a hobby decreases as they get older.Rather",
      "FIELD24": " it is assumed that young students",
      "FIELD25": " usually middle school students",
      "FIELD26": " draw a lot of pictures.At that point",
      "FIELD27": " they tend to throw away their paintings simply because they are ashamed. Unfortunately",
      "FIELD28": " it is a personal choice",
      "FIELD29": " but soon it comes to the desire to see the painting again later. with regret.Based on my experience like this",
      "FIELD30": " I propose an idea to keep the paintings/photos I have drawn. Wouldn't that be possible enough in web3?Although we have proceeded with the idea of a picture for now",
      "FIELD31": " it would be nice to come up with a dapp that can expand to a wider range",
      "FIELD32": " such as text and 3d models",
      "FIELD33": " to keep memories and previous dreams intact in various ways.good luck everyone! dddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdf",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 232,
    hackathon: "ETHGlobal Tokyo",
    title: "YUMEGIK",
    more: "https://ethglobal.com/showcase/yumegik-fp3bg",
    demo: "https://yumegik.on.fleek.co/",
    repo: "https://github.com/kimchan122/YUMEGIK",
    video: "",
    winner: "",
    short: "For you in the future",
    description: " and for you in the present who are contemplating whether or not to process memories such as the pictures you drew and the photos you took in the past. I suggest using a and b to store those memories instead.",
      "FIELD11": "hi! This project is 'YUMEGIK'.'YUMEGIK' was born from the combination of 'ゆめ (yume)'",
      "FIELD12": " which means dream in Japanese",
      "FIELD13": " and 'MEGIK'",
      "FIELD14": " a combination of 'MAGIC' and 'KID'.I like to draw.Over 20 years since I was 5 years old",
      "FIELD15": " I still love to draw.Even when I'm just studying in general",
      "FIELD16": " even when I stop developing for a while",
      "FIELD17": " even after entering web3",
      "FIELD18": " I continue to draw",
      "FIELD19": " at least scribbling.What I feel while painting is that I can't find more of the pictures I've painted before (as far as I can remember).Also",
      "FIELD20": " while moving this time",
      "FIELD21": " I had no choice but to leave most of the paintings I had when I was very young due to space constraints.Also",
      "FIELD22": " you can meet many people while drawing",
      "FIELD23": " and I have often seen that the number of people who draw as a hobby decreases as they get older.Rather",
      "FIELD24": " it is assumed that young students",
      "FIELD25": " usually middle school students",
      "FIELD26": " draw a lot of pictures.At that point",
      "FIELD27": " they tend to throw away their paintings simply because they are ashamed. Unfortunately",
      "FIELD28": " it is a personal choice",
      "FIELD29": " but soon it comes to the desire to see the painting again later. with regret.Based on my experience like this",
      "FIELD30": " I propose an idea to keep the paintings/photos I have drawn. Wouldn't that be possible enough in web3?Although we have proceeded with the idea of a picture for now",
      "FIELD31": " it would be nice to come up with a dapp that can expand to a wider range",
      "FIELD32": " such as text and 3d models",
      "FIELD33": " to keep memories and previous dreams intact in various ways.good luck everyone! dddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdfdddfasdfasdf",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 233,
    hackathon: "ETHGlobal Tokyo",
    title: "Emojimon 3D",
    more: "https://ethglobal.com/showcase/emojimon-3d-7y3xp",
    demo: "",
    repo: "https://github.com/hypnoshock/emojimon-3d",
    video: "",
    winner: "",
    short: "A Unity3D frontend for a fully on-chain game. Using Unity",
    description: " we've created a 3D frontend",
      "FIELD11": " running in browser",
      "FIELD12": " for Emojimon",
      "FIELD13": " the existing 2D on-chain game provide as the example game for the MUD framework.",
      "FIELD14": "MUD is an existing",
      "FIELD15": " open source",
      "FIELD16": " on-chain game framework made by Lattice. An on-chain game means all logic and state is controlled by smart contracts.  It is being used by multiple on-chain game projects.https://github.com/latticexyz/mudEmjoimon is the example project provided by Lattice to demonstrate how to use the framework and help onboard new projects. The game represents the player as an emoji moving around am emoji based map and encountering monsters for Pokemon style battles. It supports multiple players in the same word.https://mud.dev/tutorials/emojimon/This project is about taking the existing React 2D browser game and giving it a fully 3D rendered browser frontend by integrating MUD with Unity for the first time. The game logic already existed as an open source MUD2 example rended purely in React so the feature being demonstrated as part of the hackathon is the integration of Unity3D which is rarely seen in block chain projects.MUD is frontend agnostic framework for building composable on-chain games and provides libraries for frontends built in React and",
      "FIELD17": " to a lesser extent",
      "FIELD18": " Phaser. There is no provided Unity interface.The lack of a MUD-Unity interface is a barrier to MUD",
      "FIELD19": " and on-chain games more generally",
      "FIELD20": " being adopted by many potential game development projects.This project demonstrates that its possible to create a Unity frontend for a MUD based game project. The underpinning blockchain framework is MUD2",
      "FIELD21": " an EVM compatible framework designed for making fully on-chain games where all logic and state are held on the block chain. The presentation layer for this project is Unity3D targeting WebGL. The hackathon centred around integrating Unity3D with MUD2. We are loading the Unity3D layer via a React wrapper and incorporated glue code to facilitate the communication between Unity3D and MUD.The two project team members are part of the Playmint team building a fully on-chain",
      "FIELD22": " open-source",
      "FIELD23": " game. Code named",
      "FIELD24": " DawnSeekers",
      "FIELD25": " it has a mixed Unity and React frontend built on a custom on-chain game framework called COG.https://github.com/playmint/dshttps://github.com/playmint/cogLessons learned from Playmint made it possible to execute this project in two person days but no part of DawnSeekers  code was directly used.The game is deployed to a Foundry",
      "FIELD26": " Anvil chain and has been tested running on a local instance. With not much further work to et up the deploy config it could be deployed to any EVM chain.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 234,
    hackathon: "ETHGlobal Tokyo",
    title: "Soul Bound Credentials",
    more: "https://ethglobal.com/showcase/soul-bound-credentials-nwovz",
    demo: "https://main--ethtokyo23.netlify.app/",
    repo: "https://github.com/ethtokyo23/ethtokyo23-main",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 Worldcoin — Pool Prize 💬 Push — Best Integration of Chat or AI 🏊‍♂️ Polygon — Pool Prize ",
    short: "SBT(soul bound token) verification platform that helps integrate VC(verifiable credentials) with on-chain protocols",
    description: "Verifiable Credentials (VC) are strong means of proving your identity without having to show your profile. However",
      "FIELD11": " there are cases where VCs are not so effective",
      "FIELD12": " e.g.:Credentials are not directly accessible on chain",
      "FIELD13": " and integrating with existing protocol is troublesomeThere are use cases that does not require that level of anonymity (you want to “flex” your credential)This protocol will create soul bound tokens (SBT) based on the VC. The user will access the protocol with their wallet address and verify the credentials",
      "FIELD14": " then the information will be written on a SBT that is minted to connected address. The minted SBT can be used in other protocols as means of verification which can be easily integrated",
      "FIELD15": " or it can simply be a token which you can put on your profile",
      "FIELD16": " representing your credentials. The frontend is composed of Next.js. Frontend interacts with WorldAPI",
      "FIELD17": " and after it has been appreciated",
      "FIELD18": " it will pass the credential to backend. The backend uses Express. Backend mints an SBT",
      "FIELD19": " and interacts with Push-protocol creating a chat group The SmartContract for SBT is ERC721 with transferability disabled.As an integration case with existing platform",
      "FIELD20": " we have created two examplesAn ERC-20 token that can only be minted",
      "FIELD21": " transferred",
      "FIELD22": " and sold/bought in Uniswap V3 among those who has been verified with World ID. (Good for AML!)A Push-protocol chat which can only be joined by those who has been verified by World ID. (Flex your humanity!)",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 235,
    hackathon: "ETHGlobal Tokyo",
    title: "zeim",
    more: "https://ethglobal.com/showcase/zeim-4yhq3",
    demo: "https://zeim.vercel.app/",
    repo: "https://github.com/Kanjyo-Protocol/zeim",
    video: "",
    winner: "🔟 Lens — Top 10 ",
    short: "Zeim is Etherscan for Human - Make tax preparation easier for non-techies by creating user-friendly transaction records.",
    description: "TL;DRZeim (税務",
      "FIELD11": " ぜいむ tax in Japanese) is a solution for simplifying tax preparation for NFT artists and tax accountants and others. It addresses the challenges of understanding transaction information",
      "FIELD12": " fetching token values",
      "FIELD13": " and formatting data for existing accounting software. By using Zeim",
      "FIELD14": " users can easily add NFT contract or wallet addresses",
      "FIELD15": " visualize transaction information",
      "FIELD16": " and export data to CSV files for easy integration with existing accounting software. The service is aimed at companies that have generated revenue from cryptocurrency or are expanding services using cryptocurrency.ProblemsWhen it comes to accounting and tax processing related to cryptocurrency",
      "FIELD17": " there are several challengesDifficulty in understanding transaction information: NFT artists face difficulties in understanding transaction information",
      "FIELD18": " making it challenging for them to prepare their taxes.Difficulty in fetching token values: The process of fetching token values is complex and technical",
      "FIELD19": " which is difficult for non-techies to understand.Difficulty in formatting data for existing accounting software: The data from transactions needs to be formatted to work with existing accounting software",
      "FIELD20": " which is time-consuming and can be a barrier for non-techies.SolutionsTo make tax preparation easier for non-techies",
      "FIELD21": " we offer the following user-friendly transaction record features:Easy-to-understand transaction information: Zeim provides easy-to-understand transaction information to simplify tax preparation for NFT artists and tax accountants.Token value fetching: Zeim fetches token values to make it easier for non-techies to understand.Add/edit transaction information: Zeim allows users to add/edit transaction information to ensure the accuracy of the data.CSV export for importing into accounting software: Zeim provides CSV export to enable easy integration with existing accounting software.Technology usedAirStack API: Used to fetch royalty information.Lens Protocol: Used to make the address human-readable for the user interface.In summary",
      "FIELD22": " Zeim simplifies tax preparation for NFT artists and tax accountants by providing an easy-to-use solution that addresses the key challenges faced by non-techies. By using the AirStack API and Lens Protocol",
      "FIELD23": " Zeim provides a user-friendly interface that simplifies the process of tax preparation for NFT artists and tax accountants. Technology StackNext.jsReact.jsChakra UI ReactGraphQLAirstackLENS PROTOCOLAirstack - Obtaining Transaction History DataWe used Airstack to obtain transaction history data",
      "FIELD24": " including ERC20 and NFT trade information",
      "FIELD25": " royalty fees",
      "FIELD26": " royalty fees' USDC value and NFT images. The integration of GraphQL with Airstack made it easier to work with the data.LENS PROTOCOL- Attaching Additional Information to Wallet AddressesTo attach more information to wallet addresses",
      "FIELD27": " we utilized LENS PROTOCOL. We were able to retrieve image and bio information through a GraphQL client",
      "FIELD28": " which made the transaction information more human-readable.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 236,
    hackathon: "ETHGlobal Tokyo",
    title: "Proof of Location",
    more: "https://ethglobal.com/showcase/proof-of-location-0kyyp",
    demo: "https://docs.google.com/presentation/d/1gDNjRkpq4LThjE71HdGa2BK82u0y-TiwVf2PJgLk3TE/edit?usp=sharing",
    repo: "https://github.com/rtree/tokenization-ethtokyo",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Proof of location. This protocol preserves GPS coordinates on chain",
    description: " verified Safe with a little help from your fren.",
      "FIELD11": "This project is trying to tokenize location information in real world.Historically",
      "FIELD12": " our human have used to define boundaries for security",
      "FIELD13": " ownership",
      "FIELD14": " hierarchy using location information",
      "FIELD15": " while as of today",
      "FIELD16": " we are yet to have it digitized as verified manner.Location verification",
      "FIELD17": " secured GPS coordinates are the missing piece to tokenize everything in our world.I believe this try of proof of location can be a primitive Proof of Identity without doxxing",
      "FIELD18": " If we combined below:Real world frensNFC TagBeaconBluetooth S/N ratioAGPS of mobile networkOur crypto worldVirtual world frensLensGitcoin passport Proof of Location is currently built using following:Retrieve your location from GPSAsk friends for proof using SafeStore the proved your coordinates onchainAs a stretch goal",
      "FIELD19": " I am planning to add Safe following for confirmation:NFC tag embedded in a wallBeacon information placed at the doorBluetooth signal S/N ratio from other devices",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 237,
    hackathon: "ETHGlobal Tokyo",
    title: "flap.sh",
    more: "https://ethglobal.com/showcase/flap-sh-nypdu",
    demo: "https://www.flap.sh/",
    repo: "https://github.com/flap-sh/flap-sh",
    video: "",
    winner: "⛓ Polygon — Best Cross-Chain Hack 🏊‍♂️ Polygon — Pool Prize ",
    short: "Flap.sh gives NFT collectors a second chance to buy a blue chip NFT at an extremely low price",
    description: " and it also creates an incentive for NFT traders to bridge their NFTs from L1 to L2. ",
      "FIELD11": "We are trying to solve the following two problems faced by today's NFT market:Low liquidity: The NFT market needs more buyers and sellers. Our protocol creates more \"buy orders\" in the market.No incentives to bridge NFT to Layer2s:  The gas cost on Layer2s is much lower than Ethereum. However",
      "FIELD12": " most NFT tradings still happen on Ethereum because people have no incentives to bridge their high-priced NFTs to layer2s. Our protocol creates an incentive by creating \"buy orders\"  that may have an offer price higher than the floor price on Layer 1.There are three roles in our protocol:A box minter is a layer2 user who pays to mint a box",
      "FIELD13": " which is an unrevealed NFT. After the box reveals",
      "FIELD14": " the box minter may get a blue chip NFT worthing much more than he paid or a \"penny\" NFT worthing less than he paid",
      "FIELD15": " or even ethers in return. Under the hood",
      "FIELD16": " by selling boxes to the minters",
      "FIELD17": " our protocol raises money to buy other NFTs (blue-chip ones and penny ones).A keeper (arbitrage bot) is an NFT trader who sells NFTs to our protocol. For Layer1 NFT collections",
      "FIELD18": "  the keepers must first bridge their NFTs to Layer2. The keepers are willing to do so because our protocol can offer a better price to the keepers than Layer1.  Roughly speaking",
      "FIELD19": " the better price to the keepers comes from the fact that some box minters are losing their money or paying for an opportunity.A pool creator creates pools. A pool creator shares the protocol fee generated from the pool. He must try his best to ensure all the boxes from the pool will be minted. ProtocolRolling out so many codes in a limited time without Github Copilot is impossible. Big shouts to GitHub copilot! I love it!If we don't go cross-chain",
      "FIELD20": " our idea is not difficult to implement for an experienced solidity dev. However",
      "FIELD21": " the cross-chain part adds a lot of complexities:We have built a simple NFT bridge upon the underlying polygon ZKEVM bridge. The NFT address on Layer2 is deterministic based on its layer1 contract address. ( here's how we implement it )We have built a VRF on polygon ZKEVM. It is implemented in a \"commit-reveal\" scheme: (1) a user requests a seed for an L2 app by interacting with our L1 seed provider contract. In that contract",
      "FIELD22": " we will decide the number of a future block (the target block) of which the randao reveal is the seed. The request will also be sent to the L2 app. When the L2 app receives that request",
      "FIELD23": " the seed will be committed.   (2) When the latest L1 block number exceeds the target block",
      "FIELD24": " we can supply the RLP encoding of the target block header to our L1 seed provider contract. The seed provider contract will verify the validity of the provided block header and extract the randao reveal from it. Of course",
      "FIELD25": " it will send the seed to the L2 app.   (See how we implement it ) . We use this VRF as a seed to shuffle our buyOrders(i.e reveal the box).To use the polygon ZKEVM bridge",
      "FIELD26": " you need to \"bridgeMessage\" on one chain and \"claimMessage\" on another. We don't like the two-step UX. So we build a simple script to automatically \"claimMessage.\"  But we don't have time to implement the logics to charge the user on the source chain. ( Here's how we implement it  )Although we have done a lot of work on the cross-chain part",
      "FIELD27": " we did not have time to work on the UI for the bridging part.  However",
      "FIELD28": " all the NFTs used for the demo are bridged from L1 to Polygon ZKEVM.AppLess is more.Since this is a 2C project and we only have 36hr to implement it",
      "FIELD29": " if don't have to",
      "FIELD30": " no UI framework",
      "FIELD31": " no backend",
      "FIELD32": " no database",
      "FIELD33": " no intruducing anything else out of our goal",
      "FIELD34": " make sure users can reach each important design of the project first",
      "FIELD35": " whatever it costs in the performance",
      "FIELD36": " whatever how dirty the behind logic is.From the APP side",
      "FIELD37": " I prevent myself from hacking with just skipping or deleting the logic that attracting me to dive into",
      "FIELD38": " bcz hacking the overall process intead makes me happier nowTech Management && limitedOur team is made up with 1 solidity dev + 1 rust dev that we like the rust toolchain more than the ts/js toolchains for Ethereum",
      "FIELD39": " but somehow we finally decide everything in ts/js just because it can make our development speed faster indeed.Gather everything in 1 repo",
      "FIELD40": " working seperatly first and sync at last.",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 238,
    hackathon: "ETHGlobal Tokyo",
    title: "NetworX",
    more: "https://ethglobal.com/showcase/networx-zi08g",
    demo: "https://0xbagel.com/",
    repo: "https://github.com/CUSHY-inc/ETH-Tokyo.git",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize 🔟 Lens — Top 10 ",
    short: "NetworX is Zk talent matching platform to make all hiring free from discrimination",
    description: "NetworX is the Zk talent matching platform. We use Zk proof to verify people’s authenticity without revealing their identity. This enables the hiring process to be free from discrimination such as race",
      "FIELD11": " religious",
      "FIELD12": " sex",
      "FIELD13": " and age.Issues:People easily tend to be biased by race",
      "FIELD14": " religion",
      "FIELD15": " and age when they hire other people. The research is said that Job applicants receive 50% more responses if they hide their real names.For this time",
      "FIELD16": " we decided to tackle this issue. We think that building pseudonym based professional networking service helps people to remove the biases under the recruitment process.We made :People can find potential business partners without revealing privacy.NetworX uses Zk to store privacy info. Users can reveal personal information to only trusted people.Use On-chain data for matching algorithm.Our matching algorithm uses on-chain data. People can match based on NFT interest",
      "FIELD17": " similar transaction behavior",
      "FIELD18": " and any other on-chain credential data.Bring social relationship onto blockchainNetworX collects reviews of matched relationship. These reviews are not considered any biases.As a result",
      "FIELD19": " NetworX enables all hiring free from discrimination. The following are the tools used for blockchain-related features:・Metamask：To allow users to log in with Metamask wallet.・Worldcoin：We used Worldcoin to verify as a human.・Huddle01： We’re using Huddle01 to start an instant meeting with wallet. You don't have to sign up and jump into a meeting with web3 talent.・Lens protocol：Integrate for matching algorithm. We analyze Lens protocol social relationship to improve matching algorithm.・Quicknode：We're using Quicknode to match similar interest based on NFTs data",
      "FIELD20": " and transaction behavior.・Lit protocol：We used Lit protocol to store private information such as resumes",
      "FIELD21": " sex",
      "FIELD22": " name",
      "FIELD23": " or any other info users think personal.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 239,
    hackathon: "ETHGlobal Tokyo",
    title: "DeFi Struct",
    more: "https://ethglobal.com/showcase/defi-struct-045tr",
    demo: "https://defi-struct.com/",
    repo: "https://github.com/amadeobrands/defi-struct",
    video: "",
    winner: "🥇 AAVE Grants DAO — Best Use 🥉 zkBob — Best Use ",
    short: "DeFi strategies with clear risk/reward information",
    description: " offer greater insight",
      "FIELD11": " and hold individuals who promote or develop strategies more socially accountable",
      "FIELD12": "There is a need for transparent DeFi products that provide clear risk/reward information and hold individuals who promote or develop strategies more socially accountable. To encourage people to use these strategies more publicly",
      "FIELD13": " we will implement a private withdrawal functionality.The Structured Products vertical in crypto is still nascent",
      "FIELD14": " and the underlying infrastructure has yet to be developed. The yields of structured products must become sustainable and scalable in relation to assets under management (AUM). With that said",
      "FIELD15": " the future of Structured Products appears bright",
      "FIELD16": " and we believe that protocols capable of promoting transparent and verifiable risks and returns will ultimately succeed. We have constructed a 4626 vault contract and integrated it with AAVE",
      "FIELD17": " LENS",
      "FIELD18": " 1INCH",
      "FIELD19": " zkBOB",
      "FIELD20": " and Secured Finance. For the front end",
      "FIELD21": " we utilized React",
      "FIELD22": " and we employed Vercel for seamless deployment.Our primary focus was not on developing the best financial strategies",
      "FIELD23": " but rather on creating a more generalized vault deployment that can be reused in the future if our ideas are validated during this hackathon.We are proud to acknowledge that all code and ideas were conceived at the beginning of this hackathon",
      "FIELD24": " and we are pleased with our progress thus far. We intend to continue refining our work and perfecting it. After experimenting with these strategies over the weekend",
      "FIELD25": " we recognize that a more extensive and in-depth development process and pipeline are necessary to prepare our solution for production.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 240,
    hackathon: "ETHGlobal Tokyo",
    title: "GeoMoneyStream",
    more: "https://ethglobal.com/showcase/geomoneystream-pgzqe",
    demo: "https://geomoneystream.deno.dev/",
    repo: "https://github.com/piderlab/GeoMoneyStream",
    video: "",
    winner: "",
    short: "Real-time income/revenue based on mobility geolocation information",
    description: "In this project",
      "FIELD11": " Superfluid was used to implement a prototype of mobility that realizes real-time income and outcome based on geolocation information. This is expected to be used as an incentive for specific movements in self-driving cars and community car-sharing",
      "FIELD12": " as well as for location-based entertainment. The front end was built using Deno and Fresh and deployed to Deno Deploy. This allowed us to continue a fast development experience with no build steps. Twind was used for styling. For the map component",
      "FIELD13": " a key part of the UI",
      "FIELD14": " we used leaflet.js for interactivity. Money streaming is implemented using Superfluid.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 241,
    hackathon: "ETHGlobal Tokyo",
    title: "MultiAirDropSBT",
    more: "https://ethglobal.com/showcase/multiairdropsbt-6jk7m",
    demo: "",
    repo: "https://github.com/YasuYasuonFire/ethtokyo_frontend",
    video: "",
    winner: "",
    short: "You can airdrop SBTs as ERC1155 to mulitaddress. If you are master of a event",
    description: " an event is attached to one ID.",
      "FIELD11": "This product allows you to airdrop SBTs (custom tokens) as ERC-1155 tokens to multiple addresses. ERC-1155 is a token standard on the Ethereum blockchain that supports multiple token types in a single contract",
      "FIELD12": " enabling efficient batch transfers and reducing gas costs.As the master of an event",
      "FIELD13": " you can associate each event with a unique ID. By doing so",
      "FIELD14": " you can manage and distribute different types of tokens or rewards for different events",
      "FIELD15": " all within the same contract. This functionality makes the product an ideal solution for event organizers",
      "FIELD16": " promoters",
      "FIELD17": " or projects looking to distribute various tokens or digital assets to their participants or community members in a seamless and efficient manner. This product is developed using the Ethereum blockchain and is based on the ERC-1155 token standard",
      "FIELD18": " which supports multiple token types within a single smart contract. The design allows for efficient batch transfers",
      "FIELD19": " significantly reducing gas costs compared to individual transfers.To create this product",
      "FIELD20": " developers have built a smart contract that enables event masters to associate each event with a unique ID. This allows them to manage and distribute various types of tokens or rewards for different events",
      "FIELD21": " all within the same contract. The result is a user-friendly and versatile tool",
      "FIELD22": " perfect for event organizers",
      "FIELD23": " promoters",
      "FIELD24": " and projects that aim to seamlessly and efficiently distribute tokens or digital assets to participants or community members.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 242,
    hackathon: "ETHGlobal Tokyo",
    title: "zkBookReview",
    more: "https://ethglobal.com/showcase/zkbookreview-wkbks",
    demo: "https://kyok01.github.io/zkBookReview/",
    repo: "https://github.com/kyok01/zkBookReview",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 Mina — Pool Prize ",
    short: "We address the issues of existing book e-commerce and review sites by saving reviews on blockchain to prevent censorship and using zero-knowledge proofs to identify reviews written by those who have read the book.",
    description: "[Problems]In modern times",
      "FIELD11": " openness and traceability are expected",
      "FIELD12": " and the publishing industry is no exception.However",
      "FIELD13": " existing book e-commerce and review sites face two major challenges: false comments by fake reviewers and censorship of inconvenient reviews.While publishers desire reviews that are free of fake reviews and censorship",
      "FIELD14": " allowing any user to post reviews may result in disorder and low-quality content.Therefore",
      "FIELD15": " the publishing industry struggles to promote transparency.[Solution]To address these problems",
      "FIELD16": " we propose the following solutions:By saving reviews on a public database called blockchain",
      "FIELD17": " we can ensure that no censorship has taken placeBy using zero-knowledge proofs",
      "FIELD18": " we can verify that the reviewer has actually read the book",
      "FIELD19": " ensuring the quality of the reviewAs a result",
      "FIELD20": " publishers can post high-quality and transparent reviews.[How it works]A Publisher deploy smart contracts on an EVM chainThe smart contract registers the publisher's books along with their unique IDsUsers can post review comments by executing methods of the smart contractUsers create zero-knowledge proofs by answering questions that only those who have read the book can answerWhen verified on Mina's Berkeley chain",
      "FIELD21": " the user's review post will receive an authentication mark",
      "FIELD22": " indicating that the review was posted by a person who have read the book Publishers deploy smart contracts on a Celo chainThe smart contract registers the publisher's books along with their questions into Celo and Mina chainReviewers can post review comments by executing methods of the Celo chain.Reviewers create zero-knowledge proofs by answering questions that only those who have read the book can answer on the Celo chainWhen verified on the Mina chain",
      "FIELD23": " the reviewer's review comments will receive an authentication mark",
      "FIELD24": " indicating that the review was posted by a person who has read the book",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 243,
    hackathon: "ETHGlobal Tokyo",
    title: "Recursive ZK State Channels",
    more: "https://ethglobal.com/showcase/recursive-zk-state-channels-ymke6",
    demo: "",
    repo: "https://github.com/ycryptx/recursive-zk-lightning-network",
    video: "",
    winner: "🥇 Mina — Best Use ",
    short: "A Lightning Network (state channels) built using recursive ZK-Snark Proofs",
    description: "This project implements state channels in a completely novel way: using recursive ZK-Snark proofs. Like the Bitcoin Lightning Network",
      "FIELD11": " it allows for near-instant transactions at virtually no fees. Users trade between themselves directly over a P2P network",
      "FIELD12": " and with the security of a recursive ZK-Snark Proof (😎)",
      "FIELD13": " be able to close their channel and finalize their balances whenever they want.The project runs on the Mina Network",
      "FIELD14": " but it can pretty easily run on any other chain that supports recursive ZK-Snarks using SnarkyJS.User flow:A user deposits funds to the Lightning Protocol's smart contract (any token may be used). This locks the funds for a specific period of time. As long as the funds are locked",
      "FIELD15": " the user may transact with other users of the Lightning Protocol",
      "FIELD16": " off-chain",
      "FIELD17": " by simply passing a recursive ZK-snark proof back and forth. That means no on-chain transaction is performed",
      "FIELD18": " but the user can be sure the money sent to them cannot be forfeited from them.When the user is done trading over Lightning",
      "FIELD19": " she can post her recursive proof on-chain and receive her funds on the actual blockchain. That means a million trades can be compressed into a single transaction paying only a one time fee.The ZK-Snark proof is smart enough to fail when balances reach 0 or when there's a double spend",
      "FIELD20": " so users can be confident that they can always post the proof to finalize their trades. The project is based on SnarkyJS",
      "FIELD21": " a Zk-Snarks library that converts typescript into provable circuits. It is the circuit language used by the Mina Network",
      "FIELD22": " and the smart contracts are deployed to the Berkley testnets.I greatly enjoyed the dev tooling that the Mina Team has created for spinning up ZK-Apps. I used it to create the Lightning Protocol",
      "FIELD23": " implementing two main contracts: one is a sample token contract for the mina network",
      "FIELD24": " and the other is Lightning Protocol smart contract that implements fund locking",
      "FIELD25": " proof verification",
      "FIELD26": " withdrawal",
      "FIELD27": " the various witness verification logic for verifying and setting Merkle root state",
      "FIELD28": " and the ZK-Snarks recursive proof that I created which enables this novel state channel solution.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 244,
    hackathon: "ETHGlobal Tokyo",
    title: "Emaverse",
    more: "https://ethglobal.com/showcase/emaverse-jtamf",
    demo: "https://www.spatial.io/s/Emaverse-6439963f88f69f2cc9bc91e0?share=4493336570552083857",
    repo: "https://github.com/ozizo-sugioka/Emaverse",
    video: "",
    winner: "",
    short: "This project is to increase opportunities for people to experience Ethereum and Metaverse in Japan. The theme of the project was a shrine",
    description: " a sacred place for Japanese people",
      "FIELD11": " and the culture of \"Ema (wish tags)\"and \"Intoku (secret charity)\" was developed.",
      "FIELD12": "The aim of this project is to encourage people who have no previous experience with Ethereum or Metaverse to take the first step.Both Ethereum and Metaverse have the problem that \"beginners don't get involved easily\".A common characteristic is the unusual nature.For many people",
      "FIELD13": " neither Ethereum nor Metaverse are rarely involved in their daily lives.In other words",
      "FIELD14": " a special trigger is needed to step out there.On the flip side",
      "FIELD15": " unusual times and spaces can be the gateway to those worlds.For this project",
      "FIELD16": " I considered \"shrines\" as such a special place.Shrines are familiar spaces to Japanese people",
      "FIELD17": " but they are filled with a sacred and extraordinary nature.However",
      "FIELD18": " creating a \"Meta-shrine\" and gathering people there",
      "FIELD19": " as many companies do",
      "FIELD20": " does not solve the above problem.The problem is that people do not come there.Rather",
      "FIELD21": " the breakthrough lies on the side of real shrines.Instead of using Metaverse and Ethereum to get people to come to the shrine",
      "FIELD22": " we should put them in a place where they can spread out from the shrine.Specifically",
      "FIELD23": " \"Ema (wish tags)\" used at the shrine is used as a point of contact to familiarize people with \"their own personal Metaverse space.The image is that of a virtual souvenir.Think of a frame for a commemorative photo.Since Metaverse is made of digital data",
      "FIELD24": " it is actually easy to duplicate.Take full advantage of this characteristic.The gateway to Ethereum is also planted there.In Metaverse space of this project",
      "FIELD25": " we will place links to sites where you can donate in Ethereum.It would be nice to have a form where users can choose where to donate.But why donation?It has to do with another unique custom of Japanese culture",
      "FIELD26": " \"INTOKU／陰徳：secret charity\".Japanese people prefer charities that are done in secret to those that are overtly charitable.Overt charity makes the person who does it stand out",
      "FIELD27": " but only God knows about the charity that is done in secret.It is considered more dignified to be known only to God.Also",
      "FIELD28": " both have a quid pro quo",
      "FIELD29": " but overt charity is characterized by an immediate and small payoff.On the other hand",
      "FIELD30": " charities that are done in secret are believed to have a large payoff much later.Sometimes the payback is not to oneself but to one's offspring.Because of this belief",
      "FIELD31": " Japanese people attribute their happiness to their ancestors.The link to the donation site placed in Metaverse space is the entrance to \"INTOKU／陰徳：secret charity\".It is a device for circulating good deeds",
      "FIELD32": " just like a money box in a shrine.In other words",
      "FIELD33": " if you do good deeds",
      "FIELD34": " the wishes on Ema (wish tags) will be more likely to come true.The above mechanism will also provide an opportunity for foreign tourists to experience Japanese culture in depth.When they return to their home countries",
      "FIELD35": " they will be able to talk to their family and friends with their own Metaverse space.I hope that good deeds can be circulated using the Metaverse and Ethereum. The most unique aspect of this project was not so much the \"technology\" itself",
      "FIELD36": " but the idea of utilizing the characteristics of the technology.In fact",
      "FIELD37": " I did not use a particularly large technology",
      "FIELD38": " but a combination of smaller technologies.The platform I selected for Metaverse was Spatial.I was attracted to Spatial because of its ease of manipulation and scalability of spatial decoration",
      "FIELD39": " and because it is easy to duplicate an entire space.Many Metaverse projects try to create the only luxurious space and bring lots of people there.However",
      "FIELD40": " since the Metaverse is digital data",
      "FIELD41": " its true potential lies in the ease of reproduction.It is closer to the invention of printing technology than to the creation of a masterpiece.It is more like Johannes Gutenberg than Leonardo da Vinci.This project is based on that \"familiarity with reproductions\".Since the main goal of the project is to attract beginners",
      "FIELD42": " familiarity is a very important factor.A magnificent work of art can overwhelm the viewer",
      "FIELD43": " but it can also be inaccessible.On the other hand",
      "FIELD44": " a souvenir that an individual can take home will bring smiles not only to the individual but also to those around them.Metaverse space of this project can be described as a \"virtual souvenir\".The space itself was created using Blender",
      "FIELD45": " not a Spatial template.Tatami mats and torii gates are objects unique to Japan.They do not exist in the current template.The background was created using AI (Blockade Labs).The scenery is linked to the cherry blossoms in the 3D object.In terms of using Ai",
      "FIELD46": " I used BlueWillow to draft the logo.The resulting image was traced in Illustrator.And as for translation",
      "FIELD47": " I utilized DeepL",
      "FIELD48": " and the reading was done by ondoku3.Without those services",
      "FIELD49": " the work on the explanatory materials would have been extremely difficult.One by one",
      "FIELD50": " similar services exist for each technology.However",
      "FIELD51": " depending on how they are combined",
      "FIELD52": " they can be unique.Above all",
      "FIELD53": " I think it is important to have a conception that takes advantage of the characteristics of each technology.One of the most notable technical aspects of this project is that I focused on the \"ease of replication\" of Metaverse.And in order to take advantage of this benefit",
      "FIELD54": " it is important to take advantage of the characteristics of each technology.I hope that many people will be exposed to Ethereum and Metaverse through this project.",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 245,
    hackathon: "ETHGlobal Tokyo",
    title: "0xMarket",
    more: "https://ethglobal.com/showcase/0xmarket-u0kea",
    demo: "https://demo.0xmarket.place/",
    repo: "https://github.com/TeamHeimdallr/ethglobal2023-tokyo-0xMarket",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 🥈 UMA & Across — Best Use 👯 Airstack — Best Use in Consumer Application ",
    short: "0xMarket",
    description: " an account marketplace",
      "FIELD11": " enables trading of non-tradable assets with ownership transfer using ERC-4337",
      "FIELD12": " creating new value streams for users. Trade whitelist spots or early vesting wallets and find your ideal wallet to easily adapt to the web3 ecosystem.",
      "FIELD13": "[ Addressing Data Sovereignty Challenges in Web2 and Web3 ]The sovereignty of data has always been an issue",
      "FIELD14": " especially in web2 where trading game and SNS accounts are forbidden by service terms but still creates significant market. Account holders only hold a limited license",
      "FIELD15": " and the account belongs to the company. Your account actually belongs to the web2 company! In web3",
      "FIELD16": " tradable assets like fungible and non-fungible tokens have gained some sovereignty",
      "FIELD17": " but non-tradable things still have untapped value.[ 0xMarket: Unlocking Value through Tradable Assets and Ownership Transfer ]Thanks to ERC-4337 and account abstraction",
      "FIELD18": " 0xMarket enables trading of non-tradable assets by transferring ownership. Our platform offers several benefits",
      "FIELD19": " including the creation of new value streams such as trading of whitelist spots or early-stage investor wallets. Additionally",
      "FIELD20": " it helps users quickly adapt to the ecosystem by finding their ideal wallet. For instance",
      "FIELD21": " if a user wants to play a web3 game that requires a different set of NFTs and levels to play",
      "FIELD22": " they can buy a game account to kick-start the game. This new incentive also provides original users with additional motivation to put in more effort and contribute to the game.[ Ensuring Ethical Trading and Asset Differentiation in a Decentralized Marketplace ]To prevent adversarial use cases like trading identity-related assets",
      "FIELD23": " listing accounts must burn credential-related assets before listing on our platform. Ethical concerns regarding transferring credential assets stem from the contract account itself",
      "FIELD24": " not our platform. Due to the nature of transferable ownership",
      "FIELD25": " it's crucial for the community and service providers to differentiate between assets issued to a contract address and those issued only to EOA. As a decentralized marketplace",
      "FIELD26": " we won't determine which assets can be traded; instead",
      "FIELD27": " the issuing service should make that decision. Our product is primarily composed of two parts: the contract side and the web side. For the contract side",
      "FIELD28": " we utilized Solidity and employed Hardhat for compilation",
      "FIELD29": " deployment",
      "FIELD30": " and testing. We implemented the Account Marketplace using OpenZeppelin as an open-source solution. The TradableAccount implementation involved adding a changeOwnership function to the SimpleAccount",
      "FIELD31": " originally developed for Account Abstraction by Eth-Infinitism. We ran a bundler node on Stackup to verify if the contract account created using ERC-4337 properly handles user operations.On the web side",
      "FIELD32": " we began the project using the Create React App (CRA) toolchain. We adopted Ethers JS and Wagmi.sh libraries as the blockchain core libraries. For styling",
      "FIELD33": " we used Emotion styled components",
      "FIELD34": " Tailwind CSS",
      "FIELD35": " and Twin.macro. We developed components using Storybook and implemented a mock server library called MSW to enable the demo to run without a backend. As a substitute for a database",
      "FIELD36": " we used browser local storage. We enforced consistent code style using Lint and Prettier and managed Git branch conflicts by allowing only rebase and fast-forward merges.We utilized Adobe Stock for illustrations and open-source resources like Noun Project for icons. For components",
      "FIELD37": " we were able to intensively design using design systems distributed by other people on the Figma community and pieced together to fit our needs.We utilized three sponsor technologies: UMA",
      "FIELD38": " Airstack",
      "FIELD39": " and Push Protocol. We integrated UMA's optimistic oracle to verify statements not queried by our platform",
      "FIELD40": " enabling the use of human double-checking when necessary. To query on-chain data for an account",
      "FIELD41": " we used the Airstack API. We also added the Push protocol to notify sellers when an item has been sold",
      "FIELD42": " further enhancing the user experience. These sponsor technologies significantly benefited our project by providing essential functionality and streamlined processes.",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 246,
    hackathon: "ETHGlobal Tokyo",
    title: "Wishing Pool",
    more: "https://ethglobal.com/showcase/wishing-pool-v65jb",
    demo: "https://symphonious-daifuku-22b4e8.netlify.app/",
    repo: "https://github.com/PlanckerLabs/Wishing-Pool",
    video: "",
    winner: "",
    short: "The Wishing Pool is a community infrastructure system",
    description: " where users make wishes by signing a declaration and minting a community NFT to obtain wish power. Signers can add wishes to the pool and pay wish power to bless them",
      "FIELD11": " making consensus wishes visible to more people.",
      "FIELD12": "We believe the future's new world is driven by beautiful wishes.As we live in an era of deepening global disorder",
      "FIELD13": " globalization",
      "FIELD14": " which should bring people together",
      "FIELD15": " appears fragmented. When we say \"we want to build a better world",
      "FIELD16": "\" what specific realities do these wishes point to? How can our beautiful wishes guide the construction of public goods and bring imagination into reality?Declaration SignatureWe've created a declaration",
      "FIELD17": " \"The Wishing Pool: A Trigger to the Social Callings\" representing our powerful call for a better world as the smallest entities in society. We hope to summon every citizen with social imagination to sign this declaration",
      "FIELD18": " conveying our shared attitude towards the future. This signature symbolizes our belief in building the world we hope for with our imagination and will. We'll display all signatories' souls under the declaration to influence the world together.Wishing PoolAccompanying this declaration",
      "FIELD19": " we're building a community infrastructure system called Wishing Pool",
      "FIELD20": " providing public wishing pool services for like-minded communities. It helps communities spark collective wishes from citizens. By coordinating communities",
      "FIELD21": " members",
      "FIELD22": " and wishes",
      "FIELD23": " the Wishing Pool allows citizens to openly express their desires and receive blessings for beautiful wishes",
      "FIELD24": " establishing a treasury to realize these wishes",
      "FIELD25": " and allowing shared aspirations to emerge spontaneously from the community. The Wishing Pool is a plaza where everyone can voice their social calls and harvest blessings and echoes.Mint NFT to Become a WisherIf you want to truly participate in building a wish-driven community",
      "FIELD26": " you can choose to mint the \"Wishing Pool: Summoning Society into Being\" declaration NFT - Wisher. This represents your true entry into the Wishing Pool family. When you obtain the declaration NFT",
      "FIELD27": " you also gain the influence to bless wishes—wish power. Wish power is a blessing for wishes",
      "FIELD28": " drawing more attention to wishes that resonate strongly with you and granting them higher legitimacy.Starting from Individuals and CommunitiesAs independent individuals who love this world",
      "FIELD29": " even if we can't shake deep-rooted maladies alone",
      "FIELD30": " we still retain the ability to imagine a better society. This precious imagination can guide us to like-minded people and build a comfortable environment. In Zuzalu",
      "FIELD31": " we see the possibility of a better society",
      "FIELD32": " created by individuals and communities",
      "FIELD33": " becoming a reality. We believe every citizen has a beautiful vision for the future world.The emergence of Bitcoin or the birth of the network nation narrative both stem from an individual's call in response to reality. This social call attracts more like-minded people to join",
      "FIELD34": " slowly forming their own community",
      "FIELD35": " which",
      "FIELD36": " over time",
      "FIELD37": " will gather the strength to change the world. We have developed a web-based user interface that showcases the project's declaration while integrating off-chain signature functionality and on-chain NFT minting capabilities.Upon signing the declaration",
      "FIELD38": " users can submit their wishes through the platform",
      "FIELD39": " which will then be added to a dynamically updated wish list.The process of minting the declaration NFT concurrently awards users with ERC-20 Wishing Power tokens.Users have the ability to allocate their Wishing Power tokens to specific wishes",
      "FIELD40": " effectively increasing their priority and ranking within the system.",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 247,
    hackathon: "ETHGlobal Tokyo",
    title: "ConnectCare",
    more: "https://ethglobal.com/showcase/connectcare-d52m6",
    demo: "",
    repo: "https://github.com/jkamino/connect-care",
    video: "",
    winner: "",
    short: "A donation platform for collecting funds quickly in the event of a disaster.",
    description: "Our application leverages Web3 and AI technologies to create a platform for quickly gathering donations during emergencies such as natural disasters.While donation schemes utilizing Web3 technology have existed in the past",
      "FIELD11": " they have often been difficult for inexperienced individuals to use and challenging to set up quickly. With the use of AI technology",
      "FIELD12": " our application makes it easy for people with limited experience to set up a donation website quickly. Additionally",
      "FIELD13": " the use of Web3 technology enhances the transparency of donation management.Join us in making a positive impact on the world by using our application to support those affected by disasters. This project uses Node.js + Express for the backend. The OpenAI API is used in the backend to generate titles and descriptions for donation project that match the input information.For donation management",
      "FIELD14": " Smart Contracts are used with Solidity.The frontend was created using bubble.io",
      "FIELD15": " a no-code tool that allows for the design of the frontend and the creation of data structures. Various plugins can be used to integrate with the backend",
      "FIELD16": " and to set up connections with Metamask and Smart Contracts",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 248,
    hackathon: "ETHGlobal Tokyo",
    title: "MyFinancialProject",
    more: "https://ethglobal.com/showcase/myfinancialproject-q1enx",
    demo: "",
    repo: "https://github.com/togawa0219/ETHGlobalTokyo2023",
    video: "",
    winner: "",
    short: "A next-generation financial system that automates existing financial services using blockchain technology.",
    description: "（developing now）I think that it is difficult to realize with conventional NFT (ERC721)",
      "FIELD11": " such as \"partial transfer of holding shares",
      "FIELD12": " land such as real estate",
      "FIELD13": " dividing the rights among multiple people",
      "FIELD14": " and integrating the land owned by multiple people into one\" The challenge is to provide a mechanism that utilizes blockchain technology. （developing now）I use the technology to synthesize and split NFTs to automate conventional financial services with blockchain technology.As a pattern",
      "FIELD15": " the following financial products can be represented by blockchain.Joint ownership of real estatePartial transfer of shares",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 249,
    hackathon: "ETHGlobal Tokyo",
    title: "PromptMintSite",
    more: "https://ethglobal.com/showcase/promptmintsite-va0f1",
    demo: "",
    repo: "https://github.com/toztavi/PromptMintSite",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Prompt NFT mint site that allows users can mint their original prompts through this site and earn with it.",
    description: "This project allows individuals who create prompts to easily mint NFTs on OpenSea through our site with just a click of a button",
      "FIELD11": " and generate revenue through the minted NFTs. Since prompts are text-based information",
      "FIELD12": " they can be easily copied. Therefore",
      "FIELD13": " when attempting to mint prompts through our site",
      "FIELD14": " we compare them with other prompts to determine if they are the same",
      "FIELD15": " and if the result is satisfactory",
      "FIELD16": " minting is permitted. Comparisons are made using AI for both image and text information.Furthermore",
      "FIELD17": " by converting prompts into NFTs",
      "FIELD18": " a system is in place that distributes revenue not only to the primary buyers but also to the sales made by those primary buyers. This ensures that the creators of the prompts receive appropriate profits for their inventions. We developed a smart contract compliant with ERC1155 using Remix. We utilized NFT.Storage as external storage. To enable trading on OpenSea",
      "FIELD19": " we used the Polygon test network",
      "FIELD20": " Mumbai. We also deployed on Scroll's test network",
      "FIELD21": " Scroll Alpha Testnet. There were no issues in dynamically changing the deployment destination via MetaMask.The client was built using Next.js",
      "FIELD22": " TypeScript",
      "FIELD23": " and Tailwind CSS. Asset images were created using StableDiffusion. We adopted NLP(Natural Language Processing) AI for evaluating the similarity of prompts. We devised a way to prevent the minting of similar NFTs based on the similarity of prompts. Not only the prompts but also the similarity distance between the generated images were calculated to determine similarity.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 250,
    hackathon: "ETHGlobal Tokyo",
    title: "Thrift",
    more: "https://ethglobal.com/showcase/thrift-fjbwd",
    demo: "",
    repo: "https://github.com/kenilshahh/ethtokyo",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Thrift is website based Savings application which allows user to join clubs with Random users and save money with the security of Smart Contracts. ",
    description: "Funding a smart contract in a group can be a way to save money because it allows multiple individuals or entities to contribute to the contract's initial funding or ongoing expenses",
      "FIELD11": " reducing the burden on any single contributor. This approach can be especially useful for decentralized applications (dApps) that rely on smart contracts to function and require funding to cover expenses such as gas fees",
      "FIELD12": " hosting costs",
      "FIELD13": " and developer salaries.One popular way to fund a smart contract in a group is through a crowdfunding campaign",
      "FIELD14": " where contributors pool their funds together to support a particular project or initiative. In this model",
      "FIELD15": " contributors typically receive some form of reward or incentive for their contribution",
      "FIELD16": " such as tokens",
      "FIELD17": " early access to the platform",
      "FIELD18": " or other perks.Another approach is to establish a decentralized autonomous organization (DAO)",
      "FIELD19": " which is a group of individuals or entities that come together to collectively manage a project or resource. DAOs typically operate using smart contracts and distributed decision-making mechanisms to govern how funds are allocated and decisions are made. DAOs can be used to fund smart contracts as well as manage ongoing expenses and operations.In both cases",
      "FIELD20": " the key benefit of funding a smart contract in a group is that it allows for greater participation and collaboration",
      "FIELD21": " which can help to distribute risk and reduce the costs associated with supporting a decentralized application. Additionally",
      "FIELD22": " group funding models can help to promote greater transparency and accountability",
      "FIELD23": " as contributors have a shared stake in the success of the project and are incentivized to ensure that resources are used effectively. This project is a website built with ReactJs as a framework and using Tailwind Css",
      "FIELD24": " Daisy UI components at the Front End and Smart Contracts Written in solidity. The Smart Contracts have been deployed to Scroll Alpha Testnet and Polygon zkEVM to get the benefits of Zero Knowledge RollUps",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 251,
    hackathon: "ETHGlobal Tokyo",
    title: "PolyNFT",
    more: "https://ethglobal.com/showcase/polynft-dfvt5",
    demo: "",
    repo: "https://github.com/tienshaoku/PolyNFT",
    video: "",
    winner: "",
    short: "PolyNFT is an NFT marketplace with copyright granted upon minting/registering on the platform. With copyright",
    description: " artists can register their works for derivative creations and earn customised charges. Users can also fuse multiple NFTs to advance the attributes",
      "FIELD11": " images or data.",
      "FIELD12": "NFTs have been a sought-after and trendy field in the blockchain venue",
      "FIELD13": " but their potential remains largely untapped due to limitations on copyright protection. At PolyNFT",
      "FIELD14": " we believe that the key to unlocking the full potential of NFTs is to enable copyright usage of these unique assets in the first place. That's why we're creating a platform that enables derivative works of NFTs with copyright usage attached.With PolyNFT",
      "FIELD15": " artists can easily create/ mint generic NFTs",
      "FIELD16": " register them as open for derivative works",
      "FIELD17": " and charge for each time their works are used for further creations. By doing so",
      "FIELD18": " they can expand the scope and reach of their creations",
      "FIELD19": " while still retaining control over their intellectual property.In addition",
      "FIELD20": " our platform enables the accumulation of NFT attributes",
      "FIELD21": " such as a character's strength or abilities in RPG games",
      "FIELD22": " or the fusion of multiple limited editions of NFTs. This feature is not yet standardized in the NFT world",
      "FIELD23": " and we are excited to provide a streamlined solution for NFT projects looking for collaborations.To demonstrate the fusion potential",
      "FIELD24": " we use an AI art generator StableDiffusion for users to open blind boxes with multiple NFTs as sources.We envision a future where the possibilities of derivative works of NFTs are endless",
      "FIELD25": " from levelling up users' roles in NFT games to creating fan art and social profiles that fuse different NFTs. With PolyNFT",
      "FIELD26": " we are committed to providing a platform that enables every creative possibility in the world of NFTs. Join us on this exciting journey today!We envision a broad future of derivative works of NFTs",
      "FIELD27": " whether it be NFT games levelling up users' roles",
      "FIELD28": " NFT hodlers creating fan art",
      "FIELD29": " fusing various NFT social profiles or any funkier usage we haven't known yet. With PolyNFT",
      "FIELD30": " we are committed to providing a platform that enables every creative possibility in the world of NFTs. For the blind box feature",
      "FIELD31": " we've surveyed and tried out many AI art generator projects and finally decided to adopt StableDiffusion to generate fused NFTs.For creators to register or mint generic NFTs on our platform",
      "FIELD32": " we not only register their NFTs in our smart contract",
      "FIELD33": " but also upload the NFTs to IPFS.In terms of blockchain infrastructure",
      "FIELD34": " we have selected Ethereum and Polygon due to their mature ecosystems and NFT prosperity. Currently",
      "FIELD35": " we have deployed our project on Matic for demonstration purposes.See our slides: https://docs.google.com/presentation/d/1wDtDPMCRMSUdQwMXy2wxnOQyP4YJFU179wRtuNIoOyQ/edit?usp=sharing",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 252,
    hackathon: "ETHGlobal Tokyo",
    title: "Mimiku",
    more: "https://ethglobal.com/showcase/mimiku-g0fkw",
    demo: "",
    repo: "https://github.com/jinmel/ethtokyo2023",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize 🥉 Lens — Best Use 🏊‍♂️ Polygon — Pool Prize 1️⃣ Metamask — Best SDK Usage ",
    short: "Mimiku offers a royalty-based model hub that enables IP providers to monetize their data and AI prompt engineers to generate content",
    description: " with the royalty distributed fairly between both entities. By creating a sustainable AI-generated content market",
      "FIELD11": " Mimiku encourages innovation.",
      "FIELD12": "Mimiku is a blockchain-powered platform that incentivizes fair compensation for original creators and AI prompt engineers in the AI-generated content market.As AI technology continues to advance",
      "FIELD13": " there's a huge demand for high-quality training data. And this led to uncontrolled misuse content of celebrities and creators without permission",
      "FIELD14": " and the IP providers are not getting any incentives on it. This is a big problem",
      "FIELD15": " and the fact that there aren't any laws protecting creators just makes it worse.Mimiku seeks to address this problem by providing a royalty-based model hub for original and secondary creators. The platform allows IP providers to upload their data",
      "FIELD16": " which AI prompt engineers can then use to generate content. The royalty generated by the secondary content will be distributed to both the original and secondary creators in a fair and transparent manner.By leveraging World ID",
      "FIELD17": " Mimiku provides the digital identity to the IP provider while fully protecting their privacy. Mimiku enables easy login access with Metamask using Metamask SDK. With Lens protocol",
      "FIELD18": " all transactions and royalty payments are distributed and recorded immutably on Polygon.This incentivizes both original and secondary creators to contribute to the platform",
      "FIELD19": " driving the growth of a more sustainable and ethical AI-generated content market. There are four parts to our project.Lens protocolWe have used lens protocol extensively to create an hierarchy of AI model trainer (creators) and prompt engineer. In lens terms",
      "FIELD20": " AI model holder creates a publication with an endpoint url that invokes the stable diffusion model to generate the image. The prompt engineer may generate an image with a prompt using the endpoint url of the publication",
      "FIELD21": " and create a comment referencing the original model publication. In addition to the generated image",
      "FIELD22": " the endpoint url also generates a zero knowledge proof which proves that image was indeed generated by the model that was published.In order to verify the proof that the image was actually generated using published model",
      "FIELD23": " we have written an imaginary Lens Reference module ModelCheckpointReferenceModule",
      "FIELD24": " which verifies the referencing comment or mirror.Our custom modulehttps://github.com/jinmel/ethtokyo2023/blob/main/contracts/core/contracts/core/modules/reference/ModelCheckpointReferenceModule.solUsage of Lens-react to build UI componentsLogin & Model publicationhttps://github.com/jinmel/ethtokyo2023/blob/main/my-app/src/app/components/directory/directory.component.jsxGenerating image and creating commentshttps://github.com/jinmel/ethtokyo2023/blob/main/my-app/src/app/components/PostForm/index.tsxPolygonWe have used Lens protocol and Worldcoin to deploy our contract to the Polygon testatehttps://github.com/jinmel/ethtokyo2023/blob/main/contracts/core/contracts/core/modules/reference/ModelCheckpointReferenceModule.solWorldCoinOur Lens Module uses WorldCoin SDK to verify the model publisher is an authentic human",
      "FIELD25": " to prevent non-human publishing stable diffusion modelhttps://github.com/jinmel/ethtokyo2023/blob/main/contracts/core/contracts/core/modules/reference/ModelCheckpointReferenceModule.solMetaMaskOur dApp uses metamask SDK to login to Polygon Mumbai testnethttps://github.com/jinmel/ethtokyo2023/blob/main/my-app/src/app/components/directory/directory.component.jsx",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 253,
    hackathon: "ETHGlobal Tokyo",
    title: "DeDeal",
    more: "https://ethglobal.com/showcase/dedeal-oc5ev",
    demo: "https://www.dedeal.net/",
    repo: "https://github.com/aaagamesnuun/dedeal-frontend-ethtokyo/",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize 💃🏽 Taiko — Fun Bounty  ",
    short: "DeDeal is a decentralized escrow protocol for off-chain deals without any 3rd-party Intermediaries through self-sovereign sanction. DeDeal prevents fraud by depositing into a smart contract in advance and the other party's deposit can be burned If one frauds the other.",
    description: "We have developed a decentralized escrow protocol that enables trustless off-chain deals for buying and selling real goods",
      "FIELD11": " crowdsourcing and p2p crypto fiat trades.We have a game theory background.<Problem>We know that the ability to exchange on-chain values such as NFTs and crypto trustlessly through mechanisms such as DEX and NFT marketplace is a revolution.However",
      "FIELD12": " in off-chain deals",
      "FIELD13": " there is a problem called the trade dilemma: send the goods first or pay first.Censorship and high fees by platformers such as visa and ebay are also problems.A decentralized escrow protocol based on game theory solve this problems.<Rule of DeDeal> Basic Deal Flow:1.The seller sends 1 ETH to the protocol as a deposit",
      "FIELD14": " and the protocol adds 1 ETH to the seller deposit.2.The buyer sends 1 ETH to the protocol as payment for the goods",
      "FIELD15": " and the protocol adds 1 ETH to the seller deposit.3.The seller ships the goods to the buyer.4.If the buyer does not sanction (i.e. press the sanction button) by the deadline",
      "FIELD16": " the deal is closed and the protocol sends 2 ETH in the seller deposit to the seller.If the Seller Commits Fraud:If in step 3 above",
      "FIELD17": " the seller does not send the goods to the buyer",
      "FIELD18": " the buyer has the following two options:[Option 1-1] Suck It UpJust suck it up. If the sanction button is not pressed before the deadline",
      "FIELD19": " the protocol will send 2 ETH in the seller deposit to the seller.As a result",
      "FIELD20": " the seller gets 1 ETH and the buyer loses 1 ETH.[Option 1-2] Sanction the SellerBy pressing the sanction button",
      "FIELD21": " the 2 ETH in the seller deposit is burned. However",
      "FIELD22": " in order for the buyer to press the sanction button",
      "FIELD23": " the buyer must first send 2 more ETH to the protocol as a buyer deposit. Each time the sanction button is pressed",
      "FIELD24": " the deadline will be extended by the deadline interval set before the deal was initiated.If the buyer chooses <Option 1-2>",
      "FIELD25": " the seller now has the following two options:[Option 2-1] Accept the SanctionIf the sanction button is not pressed back by the seller before the deadline",
      "FIELD26": " the protocol will send 2 ETH in the buyer deposit back to the buyer.As a result",
      "FIELD27": " the seller and the buyer will have lost 1 ETH each.[Option 2-2] Sanction the Buyer BackBy pressing the sanction button",
      "FIELD28": " the 2 ETH in the buyer deposit is burned. However",
      "FIELD29": " in order for the seller to press the sanction button",
      "FIELD30": " the seller must first send 2 more ETH to the protocol as a seller deposit.This option is chosen as a sanction against a sanction when the seller feels that the sanction by the buyer was unjustified.If the seller chooses [Option 2-2]",
      "FIELD31": " the buyer is once again given the option to choose [Option 1-1] or [Option 1-2].In this way",
      "FIELD32": " the sanctions continue indefinitely until the seller chooses [Option 1-1] or the buyer chooses [Option 2-1]",
      "FIELD33": " resulting in both players losing an amount of ETH corresponding to the number of sanctions.<Why DeDeal Works>It is important to note that there is no short-term financial benefit to sanctioning.This is called costly altruistic punishment in economic terms.It is only a risk to impose sanctions when no fraud has been committed",
      "FIELD34": " because sanctions can be imposed against sanctions.One-way fraud is a lose-win",
      "FIELD35": " but the fear of a lose-lose situation due to sanctions makes people choose win-win deals.In the real world",
      "FIELD36": " catching the criminals does not directly benefit the victim",
      "FIELD37": " but the fear of the punishment reduces crimes. The ultimatum game in economic experiments",
      "FIELD38": " the Code of Hammurabi",
      "FIELD39": " and the hostage exchange of warring feudal lords are examples of win-win relationships established through costly punishment.In situations where one can punch the other",
      "FIELD40": " one respects the other. We introduce punching into anonymous societies without police and form order.In the real world",
      "FIELD41": " centralized power such as the police force sanction on behalf of the victim.Thomas Hobbes called them Leviathan. But there is no Leviathan in the crypto world.That is why we need self-sovereign sanctions",
      "FIELD42": " as in the Middle Ages.<UseCase>DeDeal is for cross-border transactions where there is no common and reliable C2C service",
      "FIELD43": " or in countries where there is no reliable central authority.<FAQ>Q1. Can the buyer threaten to burn the deposit and extort money?Just say ”You burn",
      "FIELD44": " I burn.” Do not give in to threats and send money",
      "FIELD45": " as there is no assurance that they will release the deposit. If they think you are a chicken who can't choose low-lose",
      "FIELD46": " you would be a loser in lose-win.Q2. Sanctioned badly by the rich?Sanctions are never more than you can tolerate",
      "FIELD47": " because sanctions end when one of you accepts them. It is also difficult",
      "FIELD48": " even in the real world of law",
      "FIELD49": " to stop a madman from harming others without fear of punishment.Q3. Does DeDeal Really Work?It depends on the nature of the agents: since DeDeal is a meta-game",
      "FIELD50": " if the players always punish fraud",
      "FIELD51": " fraud is less likely to occur; if many people don't sanction to fraud",
      "FIELD52": " fraud is more likely to occur. However",
      "FIELD53": " experiments such as the Prisoner's Dilemma have shown the advantage of the tit for tat strategy",
      "FIELD54": " and when some players begin to adopt the tit for tat strategy",
      "FIELD55": " the environment as a whole tends to do so as well. In other words",
      "FIELD56": " user education",
      "FIELD57": " UX",
      "FIELD58": " and deposit ratio adjustments can lead to a fraud-free environment. Our project",
      "FIELD59": " DeDeals",
      "FIELD60": " is a decentralized escrow service built on Ethereum that handles secure transactions between buyers and sellers. It uses Solidity for smart contract creation and is deployed using zkEVM.By using zkEVM",
      "FIELD61": " our project benefits from enhanced privacy and reduced gas costs. The increased privacy afforded by zkEVM is especially important because DeDeal is a protocol for conducting transactions without the need for a third party.",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 254,
    hackathon: "ETHGlobal Tokyo",
    title: "Prompt Monsters",
    more: "https://ethglobal.com/showcase/prompt-monsters-7f13y",
    demo: "https://prompt-monsters-jp.azurewebsites.net/",
    repo: "https://github.com/XYLOCOPA3/prompt-monsters",
    video: "",
    winner: "",
    short: "Fully decentralized generative blockchain game using AI as the game engine",
    description: "We believe that BCG should be decentralized like a protocol.However",
      "FIELD11": " the current BCG is centralized with characters created by a central authority",
      "FIELD12": " and the value of NFTs is determined by their status",
      "FIELD13": " making it completely non-decentralized.Our vision is to decentralize BCG with AI at its core.AI is collective knowledge of the entire world",
      "FIELD14": " and decision-making is decentralized.We have developed AIGameFi",
      "FIELD15": " a DAO-like game centered around AI",
      "FIELD16": " by NFT-izing unique monsters generated generatively by GPT.All aspects of monster generation",
      "FIELD17": " status determination",
      "FIELD18": " battle results generation",
      "FIELD19": " and NFT growth results are generated by GPT without central control. We adopt a community-driven approach based on the Web3 philosophy and use CC0 standards to enable interoperability between different games by utilizing NFTs driven by users.What you do with this service is think of the character name you think is the strongest and fight with an NFT-ized character. I will provide a detailed explanation of how this project was built. First",
      "FIELD20": " the technologies used are as follows:The contract was deployed on \"Linea\".The login function was realized using the MetaMask SDK. This allows for easy user authentication on the website and integration with the wallet.We made it possible to automatically generate detailed monster information by simply inputting their characteristics. This automatic generation is achieved using GPT-3.5. As a result",
      "FIELD21": " anyone can automatically create diverse and original monsters.Monster details can be minted as NFTs (ERC721). This allows users to truly own the automatically generated monsters",
      "FIELD22": " making them their own in a true sense.NFTs are implemented fully on-chain",
      "FIELD23": " and we do not use distributed storage such as IPFS. This ensures the complete integrity and transparency of the data.For the PvP function",
      "FIELD24": " we made it possible to battle with a randomly selected monster from the minted NFTs.Victory or defeat results are automatically generated using GPT-3.5. This has resolved the issue of PvP becoming unfeasible due to a lack of players.As a particularly hacky point worth mentioning",
      "FIELD25": " using GPT-3.5 to generate monster details and victory/defeat results has made it possible to create an innovative and exciting gaming experience. Additionally",
      "FIELD26": " the full on-chain implementation of NFTs ensures data integrity and transparency. By combining these technologies",
      "FIELD27": " this project provides users with a unique entertainment experience.",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 255,
    hackathon: "ETHGlobal Tokyo",
    title: "Commit Rewarder - Open-Source DAO Tool",
    more: "https://ethglobal.com/showcase/commit-rewarder-open-source-dao-tool-jew1o",
    demo: "",
    repo: "https://github.com/hlxwell/CommitRewarder",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Our hackathon project uses Github Action and ChatGPT as the backbone to support our token reward system managed by CommitRewarder. We incentivize high-quality code contributions to open-source projects",
    description: " promoting sustainability in the crypto world.",
      "FIELD11": "Our hackathon project aims to address the challenges of maintaining open-source projects in the crypto world. While open-source projects are critical for the growth and sustainability of the industry",
      "FIELD12": " adopting code contributions from multiple developers can be time-consuming and challenging for project owners and maintainers. Additionally",
      "FIELD13": " it can be challenging for developers to follow coding standards and maintain code quality.To address these challenges",
      "FIELD14": " our team developed a novel solution that leverages token rewards managed by CommitRewarder to incentivize and reward high-quality code contributions. Our solution integrates with Github Action and ChatGPT as the backbone to support our token reward system. Developers who submit code that meets our project's coding standards can earn tokens and NFT badges",
      "FIELD15": " promoting sustainability in the crypto world.Our solution offers several benefits for open-source projects. First",
      "FIELD16": " it incentivizes developers to submit high-quality code that meets coding standards",
      "FIELD17": " helping to maintain code quality and ensure the long-term sustainability of the project. Second",
      "FIELD18": " it streamlines the code adoption process by allowing project owners and maintainers to focus on reviewing high-quality code submissions",
      "FIELD19": " saving time and resources. Finally",
      "FIELD20": " it promotes community engagement and collaboration by encouraging developers to contribute to open-source projects and earn rewards for their efforts.To implement our solution",
      "FIELD21": " we developed a Github Action that integrates with CommitRewarder to manage token rewards and NFT badges. Our solution uses ChatGPT as the backbone to provide code suggestions and feedback to developers",
      "FIELD22": " helping them to improve their code quality and meet our project's coding standards. The ChatGPT model provides a reliable and accurate method for evaluating code submissions",
      "FIELD23": " ensuring that we can maintain code quality while scaling our solution to multiple projects.Overall",
      "FIELD24": " our project aims to improve the sustainability and code quality of open-source projects in the crypto world. By incentivizing and rewarding high-quality code contributions",
      "FIELD25": " we can create a more engaged and collaborative community of developers working together to build innovative and sustainable open-source projects. To implement our solution",
      "FIELD26": " we developed a Github Action that integrates with CommitRewarder to manage token rewards and NFT badges. Our solution uses ChatGPT as the backbone to provide code suggestions and feedback to developers",
      "FIELD27": " helping them to improve their code quality and meet our project's coding standards. The ChatGPT model provides a reliable and accurate method for evaluating code submissions",
      "FIELD28": " ensuring that we can maintain code quality while scaling our solution to multiple projects.We also built a website as the contributor portal so display all the NFT and Tokens the user get from Open-Source crypto project.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 256,
    hackathon: "ETHGlobal Tokyo",
    title: "INT MUSCLE",
    more: "https://ethglobal.com/showcase/int-muscle-crhj6",
    demo: "https://intmuscle-tezu.vercel.app/muscle/",
    repo: "https://github.com/DaisukeMIYASHITA/intmuscle",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize ",
    short: "This  is a web app that allows you to get a healthy body while having fun in the prediction market. In addition to the subjects",
    description: " two other parties",
      "FIELD11": " an observers and a cheers with different incentives",
      "FIELD12": " are introduced and asked to place a multiplier on the prediction market.",
      "FIELD13": "First",
      "FIELD14": " subjects enter information about themselves",
      "FIELD15": " their current weight",
      "FIELD16": " and how many pounds they want to be by when.Next",
      "FIELD17": " the user of this prediction market will stake his/her success or failure in improving his/her weight through the subject's profile and previous on-chain activity.Note that each user is unique as they are managed by their World ID.Those who bet on success first earn the right to cheer the subject. They will act as a cheers to help the subject better reach his or her ideal weight. So they are called the cheers.Second",
      "FIELD18": " those who bet on failure prevent subjects from cheating.The assumption is that subjects have an incentive to achieve the right weight",
      "FIELD19": " which is accelerated by the cheers. Therefore",
      "FIELD20": " the person who dials to fail behaves as an observers. So they are called the observers. First of all",
      "FIELD21": " I made this project on next.js.And these are what I use to build this project.・INTMAX: INTMAX is used to unlink personal and weight information. It is also used to evaluate an individual's lifestyle and financial habits based on their transaction to make decisions in the Prediction market.・World Coin: World Coin is used to prove that you are the only individual.This prevents the subjects from entering the expectation market themselves.・Push Protocol: PUSH Protocol is used by participants in the prediction Market to cheer on subjects and help subjects get closer to their proper weight.・huddle01: huddle01 is designed to prevent subjects fraud. Subjects are measured while live streaming at any given time by Participants. Random gesture instructions are given so that cheating is impossible and also there is no incentives to do so.And this project realizes interoperability by deploying contract on Scroll aipha test net!",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 257,
    hackathon: "ETHGlobal Tokyo",
    title: "Vibe",
    more: "https://ethglobal.com/showcase/vibe-o61ob",
    demo: "",
    repo: "https://github.com/PDiTO/vibe",
    video: "",
    winner: "🥈 ApeCoin — Best Contribution 🏊‍♂️ Polygon — Pool Prize ",
    short: "Vibe is a fully on-chain social participation protocol that helps you enhance events",
    description: " and capture their memories",
      "FIELD11": "Vibe is web-based frontend application",
      "FIELD12": " that leverages blockchain technology to enhance the experience of both in person and remote events. Once users mint a profile",
      "FIELD13": " they can then be invited to participate in events and share memories with their wider communities.Event organisers can incentivise user behaviour",
      "FIELD14": " offer rewards and customise the staging of the memories based on these",
      "FIELD15": " which are captured on-chain in a sharable fashion.In the longer term",
      "FIELD16": " Vibe will allow organisers to gamify every aspect of social events",
      "FIELD17": "  and champion those who contribute the most",
      "FIELD18": " letting them capture that moment in a permanent on-chain memory. The backend is built completely in solidity",
      "FIELD19": " with no intermediary services. We used hardhat as the dev tool. We choose to communication with the chain directly",
      "FIELD20": " and do not use any indexing services.The frontend is built in React",
      "FIELD21": " using WAGMI for communication with the RPC. We use Phaser",
      "FIELD22": " a game engine to manage the 'photo' scene for the app",
      "FIELD23": " given the need to render potentially hundreds of sprites at once.We have many ideas of how we can add sponsor tech into our",
      "FIELD24": " particularly on the social side. Integration with Lens and Push Protocol make a lot of sense.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 258,
    hackathon: "ETHGlobal Tokyo",
    title: "AyAy",
    more: "https://ethglobal.com/showcase/ayay-64zt9",
    demo: "",
    repo: "https://github.com/iharuya/ayay",
    video: "",
    winner: "🤝 Polygon — Best Public Good with Account Abstraction 🏊‍♂️ Polygon — Pool Prize ",
    short: "AyAy is ERC-4337 account abstraction wallet transforming daily payments. Experience offline transactions securely with your Face ID. Convenience",
    description: " security",
      "FIELD11": " and innovation combined! ",
      "FIELD12": "AyAy Project: Revolutionizing Daily Payments on Blockchains 🌐We have created an innovative account abstraction wallet (ERC-4337 compliant) designed to make daily payments seamless and secure. Inspired by the ease of use of Japan's widely popular PayPay app",
      "FIELD13": " AyAy aims to provide an unparalleled payment experience with over millions of downloads.We have 2 iOS apps:AyAy consumer. This is generally installed by the paying user.AyAy business. This is installed by the store or other entity receiving payment.With AyAy",
      "FIELD14": " payers can now enjoy offline payments",
      "FIELD15": " making transactions more accessible and convenient than ever before. Utilizing AA contracts",
      "FIELD16": " business entities only sponsor gas if the payment is for their services",
      "FIELD17": " while wallet withdrawal limits are set to avoid significant losses.Both apps communicate with bluetooth each other. However",
      "FIELD18": " your signing key remains safely within the consumer app",
      "FIELD19": " ensuring the utmost securityUnlock a new level of payment approval with the integration of Face ID technology",
      "FIELD20": " adding an extra layer of authentication for a seamless and secure transaction experience. Embrace the future of daily payments with AyAy - where convenience",
      "FIELD21": " security",
      "FIELD22": " and innovation come together. AyAy Project employs customized AA contracts: AyAyWallet & AyAyPaymaster for efficient transactions.Merchants easily deploy their AyAyReceiver (The target of AyAyWallet.pay()) and AyAyPaymaster via BUNZZ.The project features a native app developed in Swift",
      "FIELD23": " using Multipeer Connectivity framework. It executes JavaScript (Apple's JavaScriptCore) under the hood especially for signing user operations with private keys with ethers.js.An API server (Nextjs) supports handling abstract accounts and user operations.",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 259,
    hackathon: "ETHGlobal Tokyo",
    title: "Atomicflow",
    more: "https://ethglobal.com/showcase/atomicflow-s9nwc",
    demo: "https://atomicflow-ui.vercel.app/tmpllm",
    repo: "https://github.com/de-dapp-lab/atomicflow-contract",
    video: "",
    winner: "📜 Scroll — Just Deploy 🥈 Intmax — Best Use ",
    short: "Subscription protocol using INTMAX and Scroll. It enables flexible Dapps subscriptions powered by ZKP.",
    description: "The originality is high-frequency",
      "FIELD11": " low-cost",
      "FIELD12": " flexible subscriptions can be easily implemented.It works as follows.Reciever connects wallet and creates a subscription plan on the dashboard.Reciever provides flexibility to change billing frequency",
      "FIELD13": " fees",
      "FIELD14": " and Tokens",
      "FIELD15": " even once created subscription plans. (c.f. “Bulk transfer”)Payer connects wallet and freely select a plan on the dashboard.Payer and Reciever can list and analyze Payer's billing status on their own dashboards. We'll walk through the above description and cover the technologies used at each interaction with Atomicflow.organizations and businesses operating Dapps-based protocols should create a subscription plan in Atomicflow. When creating a subscription plan",
      "FIELD16": " select a template",
      "FIELD17": " customize it",
      "FIELD18": " and submit it. Once submitted",
      "FIELD19": " the Smart Contract on Scroll will be called to store the subscription information entered.Organizations and businesses can use the React SDK to embed a modal on their website that displays subscription information",
      "FIELD20": " terms of use",
      "FIELD21": " and a button to start using the service.Organizations and businesses can use the Solidity SDK to use modifiers to grant access based on whether or not the address accessing the contract has the necessary authorization and whether or not the user is still paying for the service.When a user starts using the service from the website",
      "FIELD22": " an Intmax address is issued to the user as a deposit account. The user deposits or transfers the corresponding token to the Intmax address",
      "FIELD23": " and the deposited Intmax token is communicated to the Intmax Aggregator",
      "FIELD24": " which generates a proof of zkp for transfer at regular intervals by the Operator.If the Intmax transfer fails",
      "FIELD25": " the Smart Contract on Scroll will be notified that the subscription payment status has been temporarily suspended. By updating the status only in case of failure",
      "FIELD26": " the Atomicflow protocol is able to operate the Protocol sustainably because it can reduce gas costs.",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 260,
    hackathon: "ETHGlobal Tokyo",
    title: "Harberger Nouns",
    more: "https://ethglobal.com/showcase/harberger-nouns-do14c",
    demo: "",
    repo: "https://github.com/funkyenough/HarbergerNouns",
    video: "",
    winner: "",
    short: "A Nouns fork based on Harberger Taxation Model for public goods funding. As far as we know",
    description: " nothing of this sort has been done yet.",
      "FIELD11": "This is a Nouns Fork based on Harberger Tax Model.Under the Harberger Tax system",
      "FIELD12": " property owners are required to self-assess the value of their assets and pay taxes based on that value. However",
      "FIELD13": " the tax rate is set at a low percentage",
      "FIELD14": " typically around 1 or 2 percent",
      "FIELD15": " which is not enough to discourage property ownership or investment. Additionally",
      "FIELD16": " property owners are allowed to set the price they are willing to sell their property for.A path of a tax is not only toward ownd treasury",
      "FIELD17": " but matching pools for quadractic fundings",
      "FIELD18": " results oracle for retroactive public goods funding",
      "FIELD19": " grants DAOs like a Aave Grants DAO",
      "FIELD20": " other Noulish DAOs like a Lil Nouns or Public Nouns",
      "FIELD21": " and other DAOs. We realize positive sum design for public goods funding. Our protocol produce positive externality to other treasury. We just met up at Toranomon Hills",
      "FIELD22": " and decided that this is actually going to be a thing.Under the Harberger Tax system",
      "FIELD23": " property owners are required to self-assess the value of their assets and pay taxes based on that value. However",
      "FIELD24": " the tax rate is set at a low percentage",
      "FIELD25": " typically around 1 or 2 percent",
      "FIELD26": " which is not enough to discourage property ownership or investment. Additionally",
      "FIELD27": " property owners are allowed to set the price they are willing to sell their property for.And then",
      "FIELD28": " as a tax system",
      "FIELD29": " we adapt Superfluid. Tax is not payed at it's snapshot",
      "FIELD30": " but always keeps been payed by using Superfluid. Taxes go not only to owned treasury",
      "FIELD31": " but also matching pools for quadractic fundings",
      "FIELD32": " results oracle for retroactive public goods funding",
      "FIELD33": " grants DAOs",
      "FIELD34": " other Noulish DAOs",
      "FIELD35": " and other DAOs.The rest will be added later.",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 261,
    hackathon: "ETHGlobal Tokyo",
    title: "Consolidation of DAO Forum opinions using GPT",
    more: "https://ethglobal.com/showcase/consolidation-of-dao-forum-opinions-using-gpt-twwws",
    demo: "",
    repo: "https://github.com/taichiroendo/GPT-DAO-Summarizer",
    video: "",
    winner: "",
    short: "Chrome extension that uses GPT to concisely summarize the large volume and complexity of discussions in DAO's forums.",
    description: "There's a lot of discussion going on at DAO every day. On the other hand",
      "FIELD11": " one of the reasons for the wide variety and depth of the topics of debate is the low turnout. Professional delegates are also struggling. Therefore",
      "FIELD12": " we will create a tool to easily summarize the discussions in the forum by utilizing GPT",
      "FIELD13": " an LLM developed by OpenAI. First",
      "FIELD14": " create a Chrome extension that retrieves the source code of the page you are viewing. Extract only the content text from the source code.Next",
      "FIELD15": " create a prompt for GPT",
      "FIELD16": " an LLM developed by OpenAI. This text should be summarized in terms of summary",
      "FIELD17": " pro and con opinions.Connect to GPT's API and display the results in the extension's POPUP.Although we were able to implement the individual functions",
      "FIELD18": " the integration did not work and we were ultimately unable to display the results in POPUP.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 262,
    hackathon: "ETHGlobal Tokyo",
    title: "GoshuinSoul",
    more: "https://ethglobal.com/showcase/goshuinsoul-xm0r6",
    demo: "https://goshuinsoul.vercel.app/",
    repo: "https://github.com/eltontay/goshuinsoul",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "GoshuinSoul: your Soul-bound Goshuin digital passport. Secure and immortalise your shrine and temple visits with Polygon ID and support local communities!",
    description: "GoshuinSoul is a self-sovereign",
      "FIELD11": " shrine-gating and soul-bound token issuer that is powered by Polygon ID on SettleMint's Polygon Mumbai TestNet network. GoshuinSoul uses the EIP-5192 standard which is the minimal soul-bound nft standard as visiting shrines is a sacred tradition and should not be traded. GoshuinSoul also uses Polygon ID to issue off-chain KYC claims to users to mint their soul-bound tokens with ZK proofs that they have visited the shrines or temples. This not only improves security and privacy but it also promotes Japanese cultures by supporting the local communities around these Japanese shrines through the injection of utilities to the Soul-bound tokens issued. Under the hood",
      "FIELD12": " GoshuinSoul uses SettleMint for the deployment of Polygon Mumbai TestNet",
      "FIELD13": " EIP-5192 smart contract",
      "FIELD14": " Subgraphs by the Graph Protocol",
      "FIELD15": " Hasura for the creation of GraphQL API to Postgres Database and Private Key creation. Sponsor technologies :Polygon - Polygon ID and Polygon Mumbai TestNetDeployed Polygon Issuer Node on AWS cloud with Docker connecting to SettleMint's Mumbai TestNet RPC endpoint. This allows GoshuinSoul to explore customisable KYC process and the creation of ZK proofs.Deployed an EIP-5192 smart contract on the Polygon Mumbai TestNet to create an app specific chain that is focused on the Japanese culture",
      "FIELD16": " preventing high activity and ensuring dedicated throughput with better performance.The GraphCreation of subgraphs from the Graph protocol to have real-time fast on-chain queriesOthersWeb3Auth to provide a seamless and familiar login feature for both web2 and web3 usersStripe integration to provide fiat payment options if users are not willing to pay with cryptoIntegrated DAI",
      "FIELD17": " USDC",
      "FIELD18": " USDT and WrappedETH crypto payment options for users willing to pay with cryptoPipelineGeolocation QR code which ensures that users who are within close proximity to the location are able to scan the QR codeDAOs for local communities around Shrines/TemplesUtilities injected into Soul-bound token holders such as free Mochi!Customisable and unique Goushuin token",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 263,
    hackathon: "ETHGlobal Tokyo",
    title: "Cryptalk",
    more: "https://ethglobal.com/showcase/cryptalk-822kh",
    demo: "https://cryptalk.ai",
    repo: "https://github.com/JeremyTheintz/cryptalk",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 1️⃣ Metamask — Best SDK Usage 🦄 1inch — 🥈 Best use of Fusion ",
    short: "Cryptalk: A User-friendly crypto swaps via intuitive conversational interface. #ETHTokyo2023 #Cryptalk",
    description: "Cryptalk is an innovative and user-centric platform",
      "FIELD11": " developed as part of the ETHTokyo 2023 hackathon",
      "FIELD12": " that simplifies the process of cryptocurrency swaps through the power of natural language processing. By leveraging the Dialogflow platform",
      "FIELD13": " Cryptalk creates an intuitive and engaging conversational interface that effectively extracts swap-related information from users",
      "FIELD14": " streamlining the swap process and ensuring a seamless experience. The core of Cryptalk is its conversational interface",
      "FIELD15": " powered by Google's Dialogflow",
      "FIELD16": " which employs NLP to understand user inputs and extract swap-related information. Dialogflow's integration with our frontend ensures smooth communication between the user and the system through a chat UI.Cryptalk users are empowered by MetaMaskSDK",
      "FIELD17": " which enables seamless wallet management and ensures a secure environment for handling their assets. By integrating with the 1inch DEX Aggregator API",
      "FIELD18": " users can execute transactions efficiently",
      "FIELD19": " benefiting from optimized rates and a wide range of supported tokens. This combination of technologies provides an unparalleled experience for executing cryptocurrency swaps with ease and confidence.",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 264,
    hackathon: "ETHGlobal Tokyo",
    title: "BorrowFi",
    more: "https://ethglobal.com/showcase/borrowfi-ore25",
    demo: "",
    repo: "https://github.com/massun-onibakuchi/huff-standard4borrow",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize 🥉 AAVE Grants DAO — Best Use ",
    short: "BorrowFi is an aggregator that lets you borrow at the best rates possible",
    description: "Many lending protocols in the DeFi ecosystem share common features (they all have rates",
      "FIELD11": " and involve collateralization and liquidation)",
      "FIELD12": " and yet there is no standard that is used.We proposed a new EIP-6882 standard to address this issue and created an aggregator dapp that finds the best rates from the integrated pool. This enables users to leverage different protocols without having to search for the best rates and will massively improve the experience of borrowing assets from DeFi. We first created a new standard that can be used to wrap lending/borrowing protocols to normalize their contract methods.Then we used this to wrap around existing lending pools like Aave V3 and Curve.Finally",
      "FIELD13": " with our aggregator contract",
      "FIELD14": " our dapp could query for the best rates and trigger calls to borrow at those rates.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 265,
    hackathon: "ETHGlobal Tokyo",
    title: "BorrowFi",
    more: "https://ethglobal.com/showcase/borrowfi-ore25",
    demo: "",
    repo: "https://github.com/massun-onibakuchi/huff-standard4borrow",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize 🥉 AAVE Grants DAO — Best Use ",
    short: "BorrowFi is an aggregator that lets you borrow at the best rates possible",
    description: "Many lending protocols in the DeFi ecosystem share common features (they all have rates",
      "FIELD11": " and involve collateralization and liquidation)",
      "FIELD12": " and yet there is no standard that is used.We proposed a new EIP-6882 standard to address this issue and created an aggregator dapp that finds the best rates from the integrated pool. This enables users to leverage different protocols without having to search for the best rates and will massively improve the experience of borrowing assets from DeFi. We first created a new standard that can be used to wrap lending/borrowing protocols to normalize their contract methods.Then we used this to wrap around existing lending pools like Aave V3 and Curve.Finally",
      "FIELD13": " with our aggregator contract",
      "FIELD14": " our dapp could query for the best rates and trigger calls to borrow at those rates.",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 266,
    hackathon: "ETHGlobal Tokyo",
    title: "ZKfightsAI",
    more: "https://ethglobal.com/showcase/zkfightsai-f8mk5",
    demo: "",
    repo: "https://github.com/wyattbenno777/zkpfightai",
    video: "",
    winner: "",
    short: "ZKP_FIGHT_AI is a project designed to help users distinguish genuine human-created digital content from AI-generated fakes. We use a novel zero-knowledge proof signing method to do this.",
    description: "Tokyo Hackathon: ZKP_FIGHT_AI:The aim of this project is to help users distinguish between genuine human-created digital content and AI-generated fakes. We will achieve this by leveraging a new ZKECDSA scheme called Spartan-ecdsa.This approach allows devices with private keys to sign within a group of public keys without revealing sensitive information. For the ETHGlobal Tokyo hackathon",
      "FIELD11": " we will use the 'control of ETH address' method for a better user experience",
      "FIELD12": " despite its slower response time. Users can show that they are apart of a group",
      "FIELD13": " while maintaining the privacy of their address. Outside the scope of fighting AI",
      "FIELD14": " this tech can be used for NFT trading or other transactions where exposing a public address is undesirable.For example",
      "FIELD15": " we could sign from an address to show that we possess a specific NFT without revealing our underlying public address. Or we could demonstrate that we have access to an account with over $10",
      "FIELD16": "000 USD in value",
      "FIELD17": " without exposing the trading history or account balance associated with that address.Both BTC and ETH utilize ECDSA signatures",
      "FIELD18": " which offers numerous benefits in terms of usage and tooling.Motivation:AI has the ability to process content from audio sources and convincingly replicate human voices. This can lead to impersonation",
      "FIELD19": " misinformation",
      "FIELD20": " or worse",
      "FIELD21": " across a variety of media formats. Our challenge is to establish the authenticity of content and determine whether it is AI-generated or not. Find more motivation in this Twitter thread.How it works:Spartan-ecdsa is the fastest open-source method to verify secp256k1 ECDSA signatures in zero-knowledge.Users can visit ZKPfightAI and post a link to their media. They can sign using either a private key or their ETH address via MetaMask or another tool. A proof is generated",
      "FIELD22": " which can be verified by anyone using their browser. Content owners can provide a \"human-authenticated ZKBadge\" and URL. Users can then confirm that the content they are viewing has been verified.Hardware devices",
      "FIELD23": " such as cameras and phones",
      "FIELD24": " could have private keys uploaded to them. Since we do not want to expose any single key in the group of device keys",
      "FIELD25": " we would use this ZKECDSA method. There is an interesting video on ZKP for misinformation prevention on YouTube.Blockchain:Hosting proofs and verifying them on-chain is a trustless way for anyone to confirm the source of information. As artificial intelligence becomes more advanced",
      "FIELD26": " blockchain with ZKP will play a significant role in preventing deep-fakes and misinformation. ZKP that run fast on user and resource-constrained devices will play a prominent role in protecting against fakes. I used Next.js for the app server with React and Tailwind.css for the user interface. Ethereum accounts with Metamask is one signing method. I left an option open for users who have private key access to sign with ZKECDSA directly; this is important for hardware devices. Circom is used for the internal workings of the zero-knowledge proofs circuits with Snarkjs.One core module that is used is @personaelabs/spartan-ecdsa. This module uses a zero-knowledge proof system called Spartan. It is modified to increase performance on user and resource constrained device. Signing with private keys is still quicker than signing with an ETH address. The reason for this is hashing is a slow operation in ZK systems. Public address need to be put through a Keccak hash to be converted to an Ethereum address.This work is the first public repo demonstrating this tech in a user app. Since it is open source anyone can now get up and running with their own use-case. Investigations have been done over the course of the hackathon to speed up the Kekkak hash proof and wrap the proof into another proof (recursion); to make the final proof smaller and explored recursion/folding. We can do this with a schemes like Polygon's Plonky2",
      "FIELD27": " Groth16",
      "FIELD28": " Nova",
      "FIELD29": " or any other scheme that outputs small proofs..  Some of this work is slightly out of the scope of the limited time-constraints here. I was able to make something that works 100%",
      "FIELD30": " and is really fast!",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 267,
    hackathon: "ETHGlobal Tokyo",
    title: "FanThree",
    more: "https://ethglobal.com/showcase/fatthree-wt0jz",
    demo: "https://fanthree.vercel.app/",
    repo: "https://github.com/barubora3/fanthree",
    video: "",
    winner: "🤝 Livepeer — Best Collaboration Hack 🛠 Bunzz — Best Functionality ",
    short: "FanThree is a video-specific service that supports creators with ongoing support from fans. Web3 service similar to Patreon and the famous Fantia",
    description: "FANBOX in Japan.  Features include second-by-second payment by encryption and videos that can only be viewed by subscribers.",
      "FIELD11": "For CreatorsCreators can submit videos with only a wallet connection and simple profile settings.When posting a video",
      "FIELD12": " creators can choose whether to make it public or limited public",
      "FIELD13": " in addition to a title and other information.If the video is made limited public",
      "FIELD14": " it can only be viewed by fans who have paid a subscription fee to the creator or have a specific NFT (e.g.",
      "FIELD15": " membership NFT).Creators can specify how much they want to pay per month and the subscription address of a specific NFT from My Page.If you want to create a membership NFT",
      "FIELD16": " you can easily deploy ERC1155 contracts.For FansOpen the explorer page to see a list of creatorsWhen you find a creator you are interested in",
      "FIELD17": " click on the creator to open the details page.You can view the creator's profile and public videos.If the creator has a subscription",
      "FIELD18": " you can purchase it.For now",
      "FIELD19": " we use fDAIx as payment since we are in a test state.Unlike traditional crypto payments",
      "FIELD20": " once you start a subscription",
      "FIELD21": " the balance is automatically transferredThere is no need to generate a transaction and pay for gas every time!Of course",
      "FIELD22": " you can also stop your subscription on the same page.Don't forget to set your notifications once you subscribe!You will be notified when new videos from the creators you follow are uploaded! ■LivepeerUsed for creator video uploads and video publishing settingsIn the case of limited publication",
      "FIELD23": " authentication is done with jwt tokens based on the examples in the documentation.■SuperFluidI use SuperToken to createFlow in order to provide regular support to creators.To determine whether or not a user is subscribed",
      "FIELD24": " the flowRate is obtained using the fan's address and creator's address as keys",
      "FIELD25": " and is checked if it is higher than the value set by the creator.(We are also interested in the Early Access subscription feature that was released just recently.).■Push ProtocolUsed to notify fans of creators' video uploadsFans can use the app",
      "FIELD26": " the Chrome Extension",
      "FIELD27": " or click the bell icon in the web app to check it out.I used @pushprotocol/restapi and @pushprotocol/uiweb■BunzzUsed to implement the ability for creators to deploy membership tokens.I used the MultiToken (ERC1155) template.I was worried that I would not be able to deploy the functionality using Bunzz in time because I started developing it very late",
      "FIELD28": " but the sdk is very simple and I was able to deploy it easily without any confusion.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 268,
    hackathon: "ETHGlobal Tokyo",
    title: "safedealtokyo",
    more: "https://ethglobal.com/showcase/safedealtokyo-myy2k",
    demo: "https://safedeal.vercel.app/",
    repo: "https://github.com/safedealtokyo/safedeal",
    video: "",
    winner: "🔟 Push — Top 10 ",
    short: "CtoC's future depends on secure methods like smart contracts. Safe Deal",
    description: " a Web3 service",
      "FIELD11": " offers guarantees without high margins",
      "FIELD12": " replacing businesses' role in verifying identity and payment in CtoC",
      "FIELD13": " cutting costs.",
      "FIELD14": "The future of CtoC will rely on mechanisms like smart contracts for safety and security. Safe Deal is a new solution designed for CtoC trading",
      "FIELD15": " addressing concerns of both requesting and receiving parties by offering guarantees similar to traditional intermediaries. This Web3 service aims to replace the role businesses once played in ensuring identity and compensation in CtoC transactions.  Additionally",
      "FIELD16": " reducing the currently high fees associated with CtoC trading in Japan is a priority",
      "FIELD17": " as this will make the market more accessible and competitive for all participants. Following are our project base.Safe Protocol Kit Used to create multi-signature contract wallets. Guarantees the payment of rewards by depositing them from the requester at the beginning of the transaction.Push Protocol A push notification and chat service based on wallet addresses. Push notifications are used when there are changes in the work process. Chat is used for daily communication between clients and workers.Huddle01 An online meeting service similar to Zoom. Used to facilitate smoother communication compared to text-only communication. Although wallet authentication can be used for token authentication",
      "FIELD18": " we do not use token authentication in this case",
      "FIELD19": " as it is only available on the mainnet.ThirdWeb Used for NFT contract generation and wallet authentication.Database Used to manage information that needs to be changed.",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 269,
    hackathon: "ETHGlobal Tokyo",
    title: "Dex on Taiko",
    more: "https://ethglobal.com/showcase/dex-on-taiko-wqqsu",
    demo: "https://drumswap.netlify.app/",
    repo: "https://github.com/DarkMiclos/DrumSwap",
    video: "",
    winner: "",
    short: "The first community developed decentralized exchange on Taiko",
    description: "We created a project to demonstrate the power of a fully decentralized ZK-Rollup system that's equivalent to Ethereum. This technology reduces gas fees and is compatible with existing Defi solutions. Our team",
      "FIELD11": " consisting of members from different backgrounds and languages",
      "FIELD12": " built a complete AMM and user interface in less than 2 days. Taiko's EVM compatible ZK-Rollup technology holds great potential for the future. After attending a workshop at Taiko",
      "FIELD13": " we were impressed by the potential of EVM-compatible ZK-Rollup technology and its ability to enhance Defi concepts. To showcase its potential",
      "FIELD14": " our diverse team",
      "FIELD15": " meeting for the first time at our first hackathon",
      "FIELD16": " embarked on creating an automated market maker (AMM) based on a well-known Defi concept. We leveraged UniswapV2 contracts",
      "FIELD17": " optimized them to run on Taiko",
      "FIELD18": " and constructed a customized user interface from scratch",
      "FIELD19": " using React and Typescript.",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 270,
    hackathon: "ETHGlobal Tokyo",
    title: "Prediction based Quadratic Funding Protocol",
    more: "https://ethglobal.com/showcase/prediction-based-quadratic-funding-protocol-vrasm",
    demo: "https://ethtokyo-ppgf.vercel.app/",
    repo: "https://github.com/tnkshuuhei/ethtokyo_ppgf",
    video: "",
    winner: "🥇 Curvegrid — Best use of MultiBaas 🏊 UMA & Across — Pool Prize ",
    short: "Prediction based Quadratic Funding Protocol for public good projects",
    description: "Prediction based Quadratic Funding Protocol is a decentralized funding protocol that allows users to create and fund projects and receive funding continuously from the community.By using Prediction Market",
      "FIELD11": " users can predict whether the project will achieve certain KPIs or Milestones or not.Additionally the public goods projects can get grants from grant pool and protocol will distribute grants by following Quadratic Funding Formula based on amounts of prediction.Only if the project achieves the KPI or Milestone",
      "FIELD12": " the project will receive the grants.This protocol enables:users to contribute potential serious public goods projectprojects to get rewarded continuously and encourage their communitysponsors to optimize their opportunity and contribution for public good or OSS projects Sponsors depositing their sponsorship funding to our poolProject owner create a project in our platformProjects are reviewed and given allocation based on quadratic funding formula.After projects are given allocation",
      "FIELD13": " they can start trigger a funding stream for their project for some portion (50% for example) of the funding can are matched on.In case any issues arises during the progress of the project",
      "FIELD14": " anyone can raise the issue by creating proposal in Snapshot.org (integrated with UMA oSnap) to stop the stream of the fund to that project",
      "FIELD15": " so no more money wasted on the project. If enough people votes on this proposal",
      "FIELD16": " a transaction to stop the stream of the fund can be performed.If everthing goes well and the projects can meet all of his promise (no proposal against them)",
      "FIELD17": " in the of the period they can claim the rest of the funding from the contract.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 271,
    hackathon: "ETHGlobal Tokyo",
    title: "PPSwap",
    more: "https://ethglobal.com/showcase/ppswap-84ikz",
    demo: "https://docs.google.com/presentation/d/1sJgNUok1ER8gCl7H0rwB1N-8Q2R9XUfFjmEnKjPewvk/edit#slide=id.p",
    repo: "https://github.com/jseam2/ppswap-contracts",
    video: "",
    winner: "🎨 Quantstamp — Most Creative Solution  🏆 Worldcoin — Honorable Mentions 🏊‍♂️ Polygon — Pool Prize ",
    short: "A compliant ZK AMM that allows for shielded withdrawals",
    description: " deposits",
      "FIELD11": " transfers",
      "FIELD12": " and swaps",
      "FIELD13": "PP Swap (Privacy Preserving Swap) is a ZK AMM that extends upon the Tornado Nova contracts allowing users to swap between two tokens anonymously. Each pools offers the option of including reputation and identity mechanisms like Lens and WorldCoin to perform reputation gating to provide more accountability. The contract uses circom",
      "FIELD14": " solidity",
      "FIELD15": " react",
      "FIELD16": " sweat",
      "FIELD17": " tears",
      "FIELD18": " miladies",
      "FIELD19": " brain damage.The main challenge an innovation is introducing more stateful elements to the circom circuit to enable AMM functionalities.WorldCoin is still largely developmental",
      "FIELD20": " but the team has been really helpful",
      "FIELD21": " without them the reputational elements of the project wouldn't have been possible.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 272,
    hackathon: "ETHGlobal Tokyo",
    title: "zkMoku",
    more: "https://ethglobal.com/showcase/zkmoku-5rtdr",
    demo: "https://zkmoku.mizuki.co/",
    repo: "https://github.com/MizukiSonoko/zkMoku",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Secret White List app using Zero Knowledge Set Membership. We prove only belonging",
    description: "Provides an SBT that allows user to prove that user has certain attributes without having to show certain specific things.For example",
      "FIELD11": " you can prove that you voted but not which way you voted",
      "FIELD12": " or you can prove that you like fruit but keep secret which fruit you like.Others are included in the whitelist but do not reveal who they are",
      "FIELD13": " so you can check your rights while maintaining your privacy. This ZkMoku consists of three components.The first is the webfront end. This simply communicates with the server to use ZkSM and with Polygon Chain to handle Contracts.It consists ofReact / Nextjs / Ether.js / SIWE / Wagmi  etc.It communicate with Go server using gRPC/Protobuf with Connect-Go.The second is Solidity.It is a simple ERC721 based class.However",
      "FIELD14": " Json of Metadata is managed by OnChain.I managed contract using HardHat.The last is a Go server to run zkp SetMembership",
      "FIELD15": " which is the core of this project.The core of this project is a technology called Zero Knowledge Proof for Set Membership.https://eprint.iacr.org/2019/1255.pdfThis is a technology that can prove membership",
      "FIELD16": " but keeps any of the members secret.This allows for various use cases such as being on a whitelist but not knowing which one you are.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 273,
    hackathon: "ETHGlobal Tokyo",
    title: "dKeeper",
    more: "https://ethglobal.com/showcase/dkeeper-3ma7r",
    demo: "",
    repo: "https://github.com/motxx/dKeeper",
    video: "",
    winner: "🥇 Lit — Best Use ",
    short: "dApp access control by using signature created by Lit Protocol.",
    description: "A framework of access control in a dApp that utilizes signatures created by Lit Protocol. This allows for real-time access control to dApps",
      "FIELD11": " meaning that if a user has a designated role on a Discord channel",
      "FIELD12": " lit protocol will check the role in real-time",
      "FIELD13": " and grant them permission to execute the dApp. Today we will be presenting the results of our hackathon. This time we came up with a use case for Lit's \"Proof\". Specifically",
      "FIELD14": " we can use Lit as a Verifier for ZK and as an Access Control Manager for dApp. Recently",
      "FIELD15": " ZK has been used in Identity-related fields",
      "FIELD16": " but there are still many issues to be solved in on-chain verification.Therefore",
      "FIELD17": " I have developed \"ZK Airdropper\" as a sample program. This program proposes a mechanism to perform an Airdrop for Japanese ETHTokyo participants.The procedure is as followsRegister your credentials in a smart contract.Match the qualification identifier to the CID of the IPFS in the Lit Actions.Make the contract executable when multiple qualifications are met.In this case",
      "FIELD18": " only the minimum necessary information will be disclosed to ensure privacy.Qualification can be obtained based on data on VC or web services. For example",
      "FIELD19": " assume that the government issues a W3C compliant VC as proof of Japanese nationality and that Holder has a YouTube video promoting ETHTokyo with over 10",
      "FIELD20": "000 views.To verify these within Lit Actions",
      "FIELD21": " we use a ZKP-compliant BBS BLS signature for the VC and execute the Node.js code from within Lit using a library provided by MATTR. In this case",
      "FIELD22": " we ran Node.js within Lambda and called it from Lit Actions",
      "FIELD23": " but we believe that Lit's ability to import external packages will make it possible to run Lit Actions alone.Next",
      "FIELD24": " we will verify the YouTube video",
      "FIELD25": " using the YouTube Data API to get the number of views",
      "FIELD26": " and the contributor can be verified by posting the wallet's signature in the description field. and implemented IP restrictions on the nodes in the Lit Actions. In this way",
      "FIELD27": " real-time information from non-VC web services can also be used to qualify for airdrops.Future work could involve users generating one-time access tokens via OAuth and passing them to the Lit Node. Such a mechanism would improve security and privacy.In summary",
      "FIELD28": " we proposed a use case for Lit's \"Proof\" feature in this hackathon and developed a sample program called ZK Airdropper.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 274,
    hackathon: "ETHGlobal Tokyo",
    title: "MangaNFTService",
    more: "https://ethglobal.com/showcase/manganftservice-g6fna",
    demo: "",
    repo: "https://github.com/hime0123/EthGlobal",
    video: "",
    winner: "",
    short: "Upload PDFs on our platform to convert to epub & upload to storage servers/IPFS. Create collections w/ erc721. Buy",
    description: " sell",
      "FIELD11": " rent",
      "FIELD12": " browse. Full access for NFT holders; sample pages for others.",
      "FIELD13": "On our platform",
      "FIELD14": " you can upload a PDF to convert it to epub data and upload it to storage servers and IPFS. Additionally",
      "FIELD15": " you can create collections (contracts) using erc721. Enjoy the ability to buy",
      "FIELD16": " sell",
      "FIELD17": " rent",
      "FIELD18": " and browse content. Full access to all pages is granted exclusively to NFT holders",
      "FIELD19": " while others can preview sample pages before purchasing an NFT. Although experienced engineers can decipher a significant amount of information from blockchain data",
      "FIELD20": " we've implemented a unique feature for our manga NFTs. By embedding an encryption program into the contract",
      "FIELD21": " we've ensured that only holders can view the full content",
      "FIELD22": " keeping all pages secure and private.",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 275,
    hackathon: "ETHGlobal Tokyo",
    title: "NexaCrowd: Case#1 Save Jpn Milk Crisis",
    more: "https://ethglobal.com/showcase/nexacrowd-case-1-save-jpn-milk-crisis-jeuig",
    demo: "",
    repo: "https://github.com/Mis311/nexacrowd-save-the-milk",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "We built a web3 crowdfunding/sourcing to help small to medium local businesses and individuals who need both funding and help from talent pool. We initially focused on Japanese Milk Farmers who are currently enduring historical economical crisis.",
    description: "Case Study: In recent years",
      "FIELD11": " Japanese milk farmers have faced numerous challenges such as volatile milk prices",
      "FIELD12": " increasing production costs due to the war and covid crisis",
      "FIELD13": " and the pressure from the government to increase the supply that happned pre-covid. As a result",
      "FIELD14": " since schools were closed and milks were not consumed",
      "FIELD15": " many small to medium-sized dairy farmers are struggling to maintain their operations and support their families. 1/3 of milk farmers in Hokkaido has shut down their businesses. The ones that are alive",
      "FIELD16": " the situation is still doomed---the government decided to offer $1000 (15 man yen) for farmers to kill their milk cows in order to decrease the supply. Tons of milks are being disposed yet government also has their own business",
      "FIELD17": " which is diplomatic import business. They do not want to fully depend on domestic milk supply. Government",
      "FIELD18": " consumers",
      "FIELD19": " everyone has a bit of responsibility but no one is here to save farmers and cows.The Web3 Crowdfunding Solution:Web3 crowdfunding offers a promising alternative to help milk farmers overcome their financial challenges. By leveraging blockchain technology and decentralized finance (DeFi) platforms",
      "FIELD20": " crowdfunding campaigns can be created to raise funds for these struggling farmers",
      "FIELD21": " as well as launching new project such as exporting",
      "FIELD22": " and find all the necessary stakeholders in order to execute.Some benefits of using Web3 crowdfunding for milk farmers include:Direct support: Donors can contribute directly to the farmers they want to support",
      "FIELD23": " eliminating intermediaries and ensuring that the funds reach the intended recipients.Global reach: Web3 crowdfunding campaigns can attract donors from around the world",
      "FIELD24": " providing a larger pool of potential supporters and increasing the chances of a successful campaign.Transparency and trust: Blockchain technology ensures that all transactions are transparent",
      "FIELD25": " secure",
      "FIELD26": " and easily traceable",
      "FIELD27": " allowing donors to see exactly how their contributions are being used.Speed and efficiency: Funds raised through Web3 crowdfunding campaigns can be transferred quickly and securely",
      "FIELD28": " allowing farmers to access the financial support they need without waiting for government assistance. Right now at this moment",
      "FIELD29": " milk farmers are quitting their jobs. On Twitter you can meet farmers selling all their cows and exiting their business every month",
      "FIELD30": " every week. The problem cannot go through beurocratic structure",
      "FIELD31": " it needs an immediate help.Token rewards: As an added incentive",
      "FIELD32": " farmers can offer unique tokens or non-fungible tokens (NFTs) to donors as a form of reward",
      "FIELD33": " further encouraging support for their cause. This is an advantage of our everything-marketplace",
      "FIELD34": " that they can consult",
      "FIELD35": " choose solutions",
      "FIELD36": " fundraise",
      "FIELD37": " recruit",
      "FIELD38": " generate NFTs and sell.We have made stimulative frontend with smart contract that can be associated with NFTs and will enhance more sales for the users who are going to use our platform. Namely",
      "FIELD39": " we built functions and pages:-Crowdfunding project Mockup-Marketplace : NFTs and Jobs-Case study story-Wallet-Create Project Page-NFT product pageIn conclusion",
      "FIELD40": " Web3 crowdfunding offers a modern and efficient solution to help milk farmers navigate the challenges they face. By harnessing the power of blockchain technology and decentralized finance platforms",
      "FIELD41": " we do what the government cannot/will not do. This is the philosophy of web3",
      "FIELD42": " and NexaCrowd represents it. This project is built using React(Nextjs)",
      "FIELD43": " and Tailwind. Metamask API was called and activated upon click. chatGPT API is being stored and ready to be unlocked (it is now simulated as hardcode)For generating QR codes",
      "FIELD44": " the project uses the 'qrcode.react' package",
      "FIELD45": " which will allow user to purchase product from associated convinience store and get NFT sticker (samples were created and printed out).We stored NFTs on IPFS",
      "FIELD46": " data on thegraph",
      "FIELD47": " and using polygon.",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 276,
    hackathon: "ETHGlobal Tokyo",
    title: "MilEyes",
    more: "https://ethglobal.com/showcase/mileyes-4j0hw",
    demo: "https://www.loom.com/share/d4e16b8d6bb14479857707ad1bb785bd",
    repo: "https://github.com/Asuka694/MilEyes",
    video: "",
    winner: "",
    short: "Project aims is to elaborate a Decentralized token curated registries (TCR) database by users for users about sustainability information of worldwide products and services to bring real change through responsible consumerism.",
    description: "Overall:By utilizing the TCR method for product and service information",
      "FIELD11": " we aim to create an unprecedented database that is decentralized",
      "FIELD12": " independent from companies  information",
      "FIELD13": " highly transparent",
      "FIELD14": " and systematically eliminates arbitrariness and ensures legitimacy.Problem:The problem it solves is that consumers do not know what is truly sustainable when they purchase goods and services.Solution and Technologies:By providing a personal sustainability management application on which the database is decentralized and transparent by using token curated registries. Any users can check on how sustainability is measured.What's next forBy creating this database and providing consumers with information on their consumption through their household accounts",
      "FIELD15": " we aim to provide consumers with a social value standard other than the monetary value standard of products and services. Tell us about how you built this project; the nitty-gritty details.Our project aims to solve the problem that consumers do not know which product is sustainable. To solve that problem",
      "FIELD16": " we wanted to elaborate a decentralized sustainable data and metrics system that is to be linked to consumer housekeeping applications. We unfortunately did not have the time to create the metrics which require expertise skills but a basic idea of how the database will be accumulated..We adopted the token curated registries (TCR) approach to make the sustainability database decentralized",
      "FIELD17": " transparent and neutral as possible. The registries work as below steps:User A enters information about a product X",
      "FIELD18": " while depositing some token on itAnother User B enters a different information about product X also depositing money",
      "FIELD19": " that is in part conflicted with User A.An User can only vote consecutively to his/her idea by paying a deposit that increase exponentiallySo that is why it is better to convince and put on your side other people in order to push your information to be adopted by the databaseThe deposit will be returned to the winner based on the contribution to the database stored in a decentralized manner.We",
      "FIELD20": " again",
      "FIELD21": " did not have the time to discuss concrete token economics to effectively incentivize consumers",
      "FIELD22": " but the revenue model from which the money flow is clear.Based on the Customer Data Platform business model we will aggregate real-life consumption and preferences of consumers to be provided to companies. The data will help them to have a better marketing and persona of their users and add value to their product",
      "FIELD23": " especially in a time where sustainability is as important as never before.Again",
      "FIELD24": " it is important that users are sovereign of their data and they can choose either to get money by providing data or not.What technologies did you use? How are they pieced together?Since our project is related to ReFi",
      "FIELD25": " we have used only Celo’s technologies to implement our idea. As its website mentions: “Celo is the carbon-negative",
      "FIELD26": " mobile-first",
      "FIELD27": " EVM-compatible blockchain ecosystem leading a thriving new digital economy for all.” Our idea contributes to the ReFi domain from a consumer perspective and therefore having a carbon-negative chain is utmost important in terms of accountability towards our idea. Moreover",
      "FIELD28": " our product is an application that is conceived to be on mobile-phone fitting exactly with the principle of Celo’s mobile-first. Lastly",
      "FIELD29": " throughout consumption we aim to create a new digital economy and bring a new form of capitalism that is sustainable",
      "FIELD30": " responsible and accountable from far-located refugee children to people representing our far future on whom we are going to leave our Earth.If you used any sponsor technologies",
      "FIELD31": " how did it benefit your project?Celo is the most refi-centric blockchain present in this ETHGlobal Tokyo hackathon. By using Celo",
      "FIELD32": " we make a clear interpretation of our project to align with ReFi values as so far proposed such as Toucan",
      "FIELD33": " Kolektivo",
      "FIELD34": " etc… Furthermore",
      "FIELD35": " we are seeking Celo’s incubation",
      "FIELD36": " hackathon and support eco-system that could fit with our product to make it scale. As already mentioned in the technologies used this time",
      "FIELD37": " Celo was the protocol that fit the most to our TCR idea in terms of scalability and light mobile application link.Did you do anything particularly hacky that's notable and worth mentioning?We have tried to create a system where involved consumers do not necessarily need to have an understanding of Web3 and related concepts. The minimal action required by the user is to create a wallet and to connect it with the offered APIs. By doing so",
      "FIELD38": " the user can have access to on-chain data where real-time sustainability assessment is updated through the TCR. We believe it could help to ease the entry cost of non-crypto native peoples and could contribute to the mass adoption of blockchain technologies",
      "FIELD39": " or at least its first step: creating a wallet.",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 277,
    hackathon: "ETHGlobal Tokyo",
    title: "Gighub",
    more: "https://ethglobal.com/showcase/gighub-z1xax",
    demo: "https://front-git-main-ethdokyo-gighub.vercel.app/pool",
    repo: "https://github.com/ethtokyo-gighub/gighub",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 💱 Celo — Payments",
    short: " DeFi",
    description: " Stablecoins ",
      "FIELD11": "GigHub is financial wellness platform that offers payday loan service to people work in Web3. We support employ benefits by letting them to borrow against their next paycheck.",
      "FIELD12": "Gig Hub is a financial wellness platform that offers Pay day loan Services to people work in web3 world. We support employee benefits by letting them to borrow against their next paycheck.We are here to provide employee benefits to web3 workers that are on par with those offered by web2 companies",
      "FIELD13": " ensuring that everyone in web3 can enjoy the same level of security and stability in their work.Project Features:There are three parties in our platform: Employer",
      "FIELD14": " Employee (who receives a salary stream from the employer)",
      "FIELD15": " and Lender (an outside party who lends to the borrower).Any workers whitelisted by their employer can offer a payday loan against their future income on Gighub.When Gighub deploys the contract on Superfluid",
      "FIELD16": " we will instruct the employer to begin sending 100% of the borrower's salary into our contract",
      "FIELD17": " where we have inserted logic that will daily send 100% of the incoming flow to Gighub.LPs earn interest based on the staking ratio of the pool.We used:Superfluid streaming a salary",
      "FIELD18": " which hedges against the risk of employers failing to make payments.Polygon & Taiko: Polygon and Taiko as an L2 scaling solutions that can support frequent transactions for borrowing",
      "FIELD19": " liquidity providing",
      "FIELD20": " and NFT minting.Celo: deployed on Celo to stream salariesGnosis: deployed to expand to multiple chains and better integrate with the SAFE wallet.ApecoinDAO: used $APE as a loan currency The NFT",
      "FIELD21": " Lending",
      "FIELD22": " and StoragePool functions were created using OpenZeppelin's code written in Solidity. These functions communicate with each other through calls between smart contracts. We have built a simple loan process for borrowers",
      "FIELD23": " a certificate for DAOs",
      "FIELD24": " and a contract for claiming interest for LPs.All these contracts are enabled on ethers.js and deployed through Hardhat. Additionally",
      "FIELD25": " we utilized Superfluid to stream money and ensure repayment from DAOs.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 278,
    hackathon: "ETHGlobal Tokyo",
    title: "inviteAPE",
    more: "https://ethglobal.com/showcase/inviteape-f4i0e",
    demo: "https://inviteape.xyz",
    repo: "https://github.com/ethglobal-inviteape/inviteape",
    video: "",
    winner: "🥇 ApeCoin — Best Integration ",
    short: "NFT Utility Generator for BAYC with temporarily delegatable on-chain user right.",
    description: "We created a NFT Utility Deligation Protocol which allows BAYC NFT owners to delegate certain utilities to others that they would not use themselves. This is done by making it easy for anyone to add utilities to BAYC but allowing only the current BAYC owners to manage its utilities on-chain individually using the new EIP that we also wrote on this ETH-Tokyo hackathon. Whole process is completely decentralized and permissionless.Also we have integrated the Lens protocol considering the needs of stakeholders interested in expanding the NFT community and those who wish to engage with NFTs.< How this benefits Participants >@. BAYC Owner- Able to generate profit by delegating specific utilities to others that they’ll never use themselves.- Original BAYC NFT itself remains completely untouched even if delegate utilities thanks to new EIP.@. Utility User- Able to experience the specific utility of BAYC without buying one.@. Utility Creator (Event Host)- Able to invite BAYC holders to their events / platforms very easily.@. BAYC Community- The higher the community value",
      "FIELD11": " the higher the barrier. But if you make it more accessible by ‘inviteAPE’",
      "FIELD12": " more people will experience the benefits temporarily and it will immediately benefit the BAYC community. It's like a high-end car becomes much more desirable by offering a test drive. inviteAPE App  <-- Click to experience demo There are three parts to our project.First",
      "FIELD13": " we sought a simple method for enhancing the utility of NFTs. We discovered a way to increase their utility without transferring the original NFT. With this in mind",
      "FIELD14": " we researched the process of writing an EIP",
      "FIELD15": " aiming to develop a successful one. Although there is still much work to be done",
      "FIELD16": " we have completed the First Draft: https://hackmd.io/@HxaSeEhDRX2AOjXinPg2dw/rJ6Yr_ufn During this process",
      "FIELD17": " we realized that even if we increase the number of NFT utility",
      "FIELD18": " a single user will never be able to extract and utilize all the utilities of NFTs",
      "FIELD19": " so we created the NFT Utility Delegation Protocol to solve this problem and allow multiple users to delegate the utilities of a single NFT. To do this",
      "FIELD20": "We heavily referenced the Seaport Solidity code. Through this code",
      "FIELD21": " we learned a lot about various signature algorithms and efficient smart contract operations.Analyzed the solidity code of NFT rental marketplaces including reNFT.This gave us a clue as to how the utility can be transferred to another party without the original NFT itself being transferred to another party. Based on these two studies",
      "FIELD22": " we were able to write the smart contract code for a sustainable and functioning NFT Utility Delegation Protocol.Lastly",
      "FIELD23": " we experimented with a new library called Wagmi",
      "FIELD24": " which offers a range of convenient hooks to simplify interactions with the blockchain. We can build on this to make interacting with contracts more convenient.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 279,
    hackathon: "ETHGlobal Tokyo",
    title: "Justmint",
    more: "https://ethglobal.com/showcase/justmint-tiuio",
    demo: "https://justmint.yoursnft.me",
    repo: "https://github.com/Justmint-ETHTokyo/justmint",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Justmint is a SaaS tool that provides web3 loyalty service like Starbucks Odyssey for consumer goods companies",
    description: "[ Problem ]There’s no system to provide appropriate rewards to brand’s fanWhile many customers are passionate about spending money on a specific brand both online and offline",
      "FIELD11": " they often don't receive fair benefits in proportion to their contributions.There’s no interoperability in current coupon systemWhat If you only have a coupon from McDonald’s but wants to eat at BurgerKing",
      "FIELD12": " you can sell the McDonald’s coupon and buy a Burger King coupon?[ Solution ]We provide an NFT coupon solution that enables interoperability with Web 2.0 coupon systems. Users can receive benefit NFTs generated based on their purchase history",
      "FIELD13": " both online and offline. Also can sell&buy them in an interoperable marketplace.[ Functions ]Embedded Non-custodial wallet and paymastersOur target users are those who have no prior experience with Web3",
      "FIELD14": " so we integrated features such as non-custodial wallet that is generated during the first social login process and gas fee delegation through ERC-4337 paymasters module into our service.*Why we also support EOA and CA?: There was a method to have a central EOA verify UserOperation for wallet generation",
      "FIELD15": " but we believed that it would compromise decentralization. Therefore",
      "FIELD16": " we included EOA generation process but introduced an additional AA to enable fee delegation.For those who do not have coins immediately available",
      "FIELD17": " we will activate the ERC-4337 paymasters module to have someone else pay on their behalf.Issue dynamic NFT and accumulate benefitsIntegrate them and collect all the benefits in a one NFTTransfer to metamask with fee delegation and engage in secondary trading In this project",
      "FIELD18": " we implemented a contract wallet using ERC-4337.NFT deploying",
      "FIELD19": " minting",
      "FIELD20": " and transfer to external wallets are possible on the EVM-based chain",
      "FIELD21": " and the gas fee is paid through the account abstraction paymaster. We also used React and Express to design the frontend and backend in typescript for connect web2 and blockchain.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 280,
    hackathon: "ETHGlobal Tokyo",
    title: "SUSHI Career",
    more: "https://ethglobal.com/showcase/sushi-career-gxgjp",
    demo: "https://sushicareer-frontend.vercel.app/",
    repo: "https://github.com/Weonik-Sim/sushicareer-solidity",
    video: "",
    winner: "📜 Scroll — Just Deploy ",
    short: "Send OSUSHI to your co-workers to say thank you!　This is a Web3 Service that can be easily used by web2 users",
    description: "Web3 service for Web2 users!Send SUSHI to say Thank you for your co-workers!SUSHI Career is a tool to send \"Thank you\" via slack within your company. (Peer bonus)We use Slack instead of Discord so that Web2 users in the company can get used to Web3.In addition",
      "FIELD11": " we use ZK-olleup to send OSUSHI to each other without worrying about the cost of Gas.SUSHI Career is not just a \"Thank you\" tool.Users can show the public how much you appreciate others and how much you are appreciated by others.Companies can show that your company is an attractive company with active communication by publishing SUSHI Transactions.In other words",
      "FIELD12": " this service can be used as an HRService.SUSHI Career is a tool that allows both job seekers and companies to show everyone what they have to offer that cannot be expressed in a resume! The goal was to be able to quantitatively measure the user's Transaction and the user's ability to communicate internally.The contract was created from scratch in Solidity",
      "FIELD13": " and the front side was implemented using Nextjs.Since Slack is more familiar to Web2 users than Discord",
      "FIELD14": " we made a connection with Slack.Slack -> GoogleSpreadSheet -> NextJS API -> Contract(On-Chain) was built in this order.Slack uses Webhook",
      "FIELD15": " Spreadsheet uses GAS to transfer data to the API",
      "FIELD16": " and On-Chain puts the data on top of it.Since frequent sushi exchanges in On-Chain would put a GAS burden on users",
      "FIELD17": " we deployed the system on the Scroll testnet to drastically reduce the GAS cost.",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 281,
    hackathon: "ETHGlobal Tokyo",
    title: "Metascope",
    more: " for Data NFTs",
    demo: "https://ethglobal.com/showcase/metascope-for-data-nfts-ocx4j",
    repo: "",
    video: "https://github.com/meta-scope/metascope",
    winner: "",
    short: "🥉 Curvegrid — Best use of MultiBaas ",
    description: "Metascope is a dApp that analyzes and displays the metadata of Data NFTs. It lists properties",
      "FIELD11": " detects standard NFT types like Uniswap V3",
      "FIELD12": " Superfluid",
      "FIELD13": " OceanProtocol",
      "FIELD14": " etc. and renders a linked image. The dApp parses metadata content and makes it human readable in a UI.",
      "FIELD15": "Metascope is a dApp to read and render the metadata of Data NFTs. The dApp accepts an address of an NFT as input and returns its metadata in human readable form.On Etherscan it’s a laborious process requiring 6 steps. Some values are off-chain",
      "FIELD16": " involving an http request. Because the data is intended for machines it’s obscure for humans to read.Data NFTs have custom metadata fields",
      "FIELD17": " often unique to their type (e.g. Uniswap V3",
      "FIELD18": " Superfluid",
      "FIELD19": " Ocean Protocol",
      "FIELD20": " token gating",
      "FIELD21": " etc.). NFT types with a known schema are recognized and their custom fields are rendered. Dates and  hexadecimal values are converted to a human readable format.Metascope also handles PFP NFTs",
      "FIELD22": " which are normally viewed on NFT markets like OpenSea",
      "FIELD23": " Rarible",
      "FIELD24": " etc. It displays traits",
      "FIELD25": " plus makes other metadata that is ignored by those sites visible.For unknown NFTs Metascope lists the metadata elements and facilitates deeper inspection.Metascope uses APIs such as AirStack for retrieving the standard indexed metadata",
      "FIELD26": " falling back to Etherscan for unknown fields.In a future version Metascope will allow users to examine all NFTs at an address. The listing and any metadata containing hyperlinks will be filtered for scams and spam. Metascope is a dApp that retrieves and renders the metadata of Data NFTs. It displays their properties",
      "FIELD27": " recognizes standard NFT types like Uniswap V3",
      "FIELD28": " Superfluid",
      "FIELD29": " OceanProtocol",
      "FIELD30": " etc.",
      "FIELD31": " converts encoded elements",
      "FIELD32": " and shows any linked images. The dApp parses the metadata content and lists it in a friendly UI.This project uses Django",
      "FIELD33": " the AirStack API",
      "FIELD34": " and custom queries to render Data NFT metadata human readable.",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 282,
    hackathon: "ETHGlobal Tokyo",
    title: "NFT Trait Pricing (Pawn Shop)",
    more: "https://ethglobal.com/showcase/nft-trait-pricing-pawn-shop-4xjd2",
    demo: "https://nft-traits-pricing.vercel.app",
    repo: "https://github.com/DaleR-Harrison/eth-global-nft-traits-pricing",
    video: "",
    winner: "",
    short: "Pricing oracle for NFT collections with pricing individual traits On-Chain! This allows to create custom NFT Pawn Shops and price NFTs based on rarity with ability to proof and verify the data.",
    description: "We've used hacking-scripts to scrape specific collection data of most popular NFT collections to create pricing templates for different traits of NFT tokens.Then",
      "FIELD11": " by utilizing merkle-trees approach we are storing this data inside oracle smart-contract with ability to verify the input based on tokenId and collectionAddress for specific NFTs.By using ChainLink oracle price feed for collections as a base to get the floor price (https://docs.chain.link/data-feeds/nft-floor-price/addresses) we apply specific percentage for the NFT token trait to keep the pricing value relative to the floor price data and cap it with maximum possible pricing.This allows us to create custom PawnShop contract with Solidity to call more powerful Traits Oracle and apply a price for different NFT tokens based on their rarity and traits for each token that can be verified on-chain!As a Demo we've created a contract that allows to borrow funds with NFTs based on the rarity of some traits that shop owner sets relative to floor price. User can repay the loan later on retrieving their NFTs. We are scraping initial collection data from Alchemy API and storing this all in data folder. This allows us to have data on all tokens and their traits.Then we parse this data to create unique pricing template for each NFT collection allowing the pricing oracle master (or NFTPawn shop owner) to price specific traits.After traits are price via providing relative percent (%) to the collection floor price and maximum value shop would accept we generate merkle-tree and store merkle-root in the Oracle contract. This then is applied on top of floor-price that is guaranteed by ChainLink floor price oracle. This way our traits oracle to price NFT tokens relative to the floor price based on each tokens individual trait (if it was priced)As a result we've used create-react-dapp to produce short demo for allowing users take loans using their NFTs as collateral and utilize ability to price some NFTs higher than the floor price (or below) depending on preference of the shop owner.The pricing template before merkle-tree gets generates is also uploaded to IPFS for reference of input data and onChain verification",
      "FIELD12": "",
      "FIELD13": "",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 283,
    hackathon: "ETHGlobal Tokyo",
    title: "MBNV ( Most Beautiful NFT Viewer )",
    more: "https://ethglobal.com/showcase/mbnv-most-beautiful-nft-viewer-0zc8c",
    demo: "",
    repo: "https://github.com/ness-inc-jp/EthGlobalTokyo-MBNV",
    video: "",
    winner: "",
    short: "What NFTs do you possess and how do you see them? The real experience of owning an NFT is provided through the iOS app.",
    description: "This project is an iOS app that \"allows you to appreciate your own NFTs in the most beautiful way\"",
      "FIELD11": " just as the title states.Where do you check the NFT you have now?I think most people check with OpenSea.This is not a good UX",
      "FIELD12": " right?Do you really experience it like having your own NFT?MBNV is the solution to this problem.User comes to this app and logs in using the metamask SDK.Based on the user's WalletAddress obtained there",
      "FIELD13": " Airstack's TokenBalancesAPI displays a list of NFTs held by the user.Not only can you display a list of NFT",
      "FIELD14": " but you can also categorize your favorite photos in detail",
      "FIELD15": " just like the photo folders on your cell mobile that you usually use.It also includes effect(experience) unique to iOS",
      "FIELD16": " increasing the desire to have one's own NFT.See the demo video for more details.We usually provide a service called \"Spread\" to distribute polygonal NFTs to our quest achievers.When Airstack can officially display polygon NFTs in the future",
      "FIELD17": " this MBNV experience will be further enhanced. For this project",
      "FIELD18": " we created an iOS app using Swift to provide a better ownership experience.The technology utilized this time was MetaMaskSDK to obtain the user's Wallet information",
      "FIELD19": " and based on the WalletAddress",
      "FIELD20": " Airstack's TokenBalancesAPI was used to obtain the NFT and related information held by the WalletAPI.You can list the NFTs you own here.We chose Airstack because it offers a larger number of schemers than conventional ones and because it is GraphQL",
      "FIELD21": " which allows us to retrieve complex data.One particularly difficult point was the connection between Swift and GraphQL.By clearing this area",
      "FIELD22": " we were able to smoothly express Graph information in swift.However",
      "FIELD23": " GraphQL and Swift were not very compatible",
      "FIELD24": " and there were still some issues",
      "FIELD25": " such as the inability to reflect the type of NFT attributes.",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 284,
    hackathon: "ETHGlobal Tokyo",
    title: "IP License NFT platform",
    more: "https://ethglobal.com/showcase/ip-license-nft-platform-u6cdi",
    demo: "https://ip-license-nft-mint-app.vercel.app/",
    repo: "https://github.com/hakua-13/IP-License-NFT-Mint-App",
    video: "",
    winner: "",
    short: "IP content license NFT. The purchaser can use the IP for a certain period of time.",
    description: "After minting the IP license NFT",
      "FIELD11": " ETH can be deposited for permissionless use of the IP",
      "FIELD12": " and the deposited ETH can be confiscated if the IP is used in a detrimental manner.The decision to confiscate is made at the discretion of the IP owner",
      "FIELD13": " but if the deposit is confiscated based on an unclear decision",
      "FIELD14": " the merit of doing so is low because the trustworthiness of the IP will be lowered. Deposit function created based on ERC721.The front end was created using React.Push protocol is used to notify when NFT is minted",
      "FIELD15": " when the deposit is unlocked",
      "FIELD16": " etc.The person who opted-in to the channel can check from the push protocol notification to see if the appropriate mint or deposit has been unlocked.It is less likely that an improper transaction will take place.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 285,
    hackathon: "ETHGlobal Tokyo",
    title: "🌊Waveprotocol",
    more: "https://ethglobal.com/showcase/waveprotocol-73zzz",
    demo: "https://ethglobaltokyo-frontend.vercel.app/",
    repo: "https://github.com/akindo-io/ethglobaltokyo",
    video: "",
    winner: "🏊 UMA & Across — Pool Prize ",
    short: "Hackathon protocols to create ongoing",
    description: " long-term connections with hackers who contribute to the project",
      "FIELD11": "Hackathons are the best way to create a developer community for a project",
      "FIELD12": " but there are still challenges.However",
      "FIELD13": " there is still a challenge: It is difficult to establish an ongoing relationship with developers after a hackathon.The AKINDO protocol is based on the concept of an ongoing hackathon",
      "FIELD14": " where projects are evaluated and prizes are distributed after a certain period of time.A hackathon is represented as a Wave",
      "FIELD15": " which can last for a week",
      "FIELD16": " a day",
      "FIELD17": " 12 hours",
      "FIELD18": " etc.",
      "FIELD19": " as determined by the organizers. After the first Wave",
      "FIELD20": " Wave 2 begins",
      "FIELD21": " which runs automatically until it is stopped.Once the Wave Hackathon is turned on",
      "FIELD22": " it runs automatically and is a sucker for developers. We used the UMA protocol from Safe's zodiac to implement this protocol.We also use Snapshot to evaluate submissions to hackathons. We utilize UMA as the oracle for converting the voting information to this Snapshot into an on-chain Transaction.We implemented a custom extension because it was not possible to inject voting results into the contract with the existing Snapshot. We added a button that allows injection of voting results if there is a uint[] argument in the transaction submitted to UMA.The snapshot repository (branch: feature/inject_votes) can be found at:https://github.com/akindo-io/snapshotTest environment:http://54.250.78.147/#/Example proposalhttp://54.250.78.147/#/akindotest.eth/proposal/0x6548cf07e3c8afc7af5b9c15149e7ec00955061f7e99b818e31060d7a9fc05a4Transactions approved through UMA will be distributed to hackers according to the percentage of prior votes. This distribution of Transactions will utilize a proprietary contract.First",
      "FIELD23": " off-chain voting data is oracleed to the on-chain data",
      "FIELD24": " second",
      "FIELD25": " it is automatically distributed through a unique contract",
      "FIELD26": " and third",
      "FIELD27": " the Wave is automated and continuous",
      "FIELD28": " so the hackathon is continuous. We used our own technology.",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 286,
    hackathon: "ETHGlobal Tokyo",
    title: "Qi ",
    more: "https://ethglobal.com/showcase/qi-2oagg",
    demo: "",
    repo: "https://github.com/da-bao-jian/qi",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🤖 Taiko — 🥇 Catch MEEEEEEEEEV! ",
    short: "Qi is a transaction auction platform that reduces transaction cost for transactions. The cost reduction comes from three places 1. MEV redistribution 2. transaction exeuction 3. and gas fees",
    description: "Users constantly overpay for block space these days. The expensive amount comes in three different formsMEVpoor transaction executiongas feesThe solution space currently is fragmented with well-designed protocols",
      "FIELD11": " yet they don't address the issue holistically. Qi provides a solution that address all of above.Qi is a transaction auction platform that allows users to auction off the right to execute their transactions to solvers",
      "FIELD12": " third-party specialized agents that compete for providing the lowest cost of block space for users. Solvers are sophisticated network participants who could be MEV searchers",
      "FIELD13": " or Cow Protocol-like solvers",
      "FIELD14": " who solve optimization problems to increase users' utility functions.Through the auction",
      "FIELD15": " Qi is providing a transaction cost maximization and value leakage minimization solution that achieve these design goals:permissionless access - this applies to solvers and users;programmable privacy - users can selectively shield their transactionstrust minimization - an auctioneer is a smart contract so no risk of manipulationmeritocracy based - the auction is purely based on who's capable to provide the best utility to each individual userThis is how it works:-users sign off messages that represent their transactional intent using the erc1271 compatible signature scheme. User can selectively shield their message to prevent solvers from stealing MEV. However",
      "FIELD16": " this could also increase the difficulty for solvers to include the transaction. So there's a element of game theoretic dynamic between user and solver here;-messages are stored at an off-chain server that has a WebSocket opened to solvers;-solvers will monitor database updates continuously to look for new messages being added;-the auction will run by epochs",
      "FIELD17": " and each epoch lasts 24 seconds(2 blocks);-at the beginning of each epoch",
      "FIELD18": " Qi takes a snapshot of all the existing messages in the server",
      "FIELD19": " and will only include those messages in the current auction. New messages will be included in a queue for the next auction-during the auction",
      "FIELD20": " solvers will bid for batched of transactions. If two batches contain completely different transactions",
      "FIELD21": " then they won't compete with one another. However",
      "FIELD22": " if two batches include conflicting transactions",
      "FIELD23": " the auction selection algorithm will determine who has the right to include conflicting transactions.The auction selection algorithm is a utility function that takes all three factors(MEV rebate",
      "FIELD24": " price execution",
      "FIELD25": " and gas fee subsidization) into consideration given a solver's bid. A solver will not win the right of execution simply because he/she provides a better price for each individual user in the batch. If the execution price is negatively impacted by solver's ordering or arbitrage transaction to a point where the slippage is worst than the bid",
      "FIELD26": " a solver might not win the auction against a lower bid batch but provides better transaction execution;-since some user messages might be private",
      "FIELD27": " we'll provide a simulation API to return the simulated outcome of a batch. Then",
      "FIELD28": " they'll change the batch logic a little bit and submit it for simulation again. In this sense",
      "FIELD29": " solvers are constantly performing \"proof of work\" to try to find the best combination and order of transaction possible.-The solvers will be able to see each other batches' simulated outcomes and transactions included in the batch",
      "FIELD30": " but the bids will be sealed until the auction is complete. This will create an incomplete information game among solvers.-The auction is eventually settled on-chain through a dedicated smart contract. So no centralized auctioneer could manipulate the auction outcome;-messages that are not included by any of the batches will go into the next auction. The user will set an expiry time for the message and what to do when it expires. When a message expires",
      "FIELD31": " will route it through 1inch Fusion to provide the best possible transaction outcome. Qi uses the ERC1271 signature scheme to collect user messages. Then put it into a Postgres database. A WebSocket connection is established to feed the data stream to a group of solvers. Solver will submit a bid through the Auction.sol smart contract. The bid is determined based on a utility function. Not collected bid will be sent to 1inch.1inch Fusion provides the best order execution solution in the game. When a user message is not signed",
      "FIELD32": " it will be routed to 1inch Fusion directly for executionQi will also have a vertical integration with MetaMask and 4337 wallets. The integration with MetaMask is done through Snap. And because Qi uses 1271 signature scheme",
      "FIELD33": " it's compatible with all 4337 wallets. Later",
      "FIELD34": " we will implement a customized Paymaster contract for users to auction off their transactions and receive bids for their transactions directly.Superfluid supports a nice feature to stream payout to a designated address. Qi supports this feature to prevent the solver from griefing the auction payoff process.",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 287,
    hackathon: "ETHGlobal Tokyo",
    title: "Jokio - Open Market for Web3 Games",
    more: "https://ethglobal.com/showcase/jokio-open-market-for-web3-games-yg65w",
    demo: "https://jokio.pages.dev",
    repo: "https://github.com/playerx/jokio",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Open Market for Web3 Games - Decentralised AppStores owned by communities",
    description: "We are building an open market for Web3 games to empower game developers and communities by providing all necessary tooling for publishing and profiting from the games they create and play. We believe that the open market will revolutionize the gaming industry by creating new opportunities",
      "FIELD11": " and new exciting jobs.For example",
      "FIELD12": " community members will become game testers and publishers",
      "FIELD13": " and earn money by playing different games (like a childhood dream come true). An open market will make the gaming industry a more equitable",
      "FIELD14": " sustainable",
      "FIELD15": " and open ecosystem for game developers",
      "FIELD16": " communities",
      "FIELD17": " and players alike.Web3 is about collaboration and ownership and that’s exactly what we aim to achieve by building this project.The solution we built for today is an incentive system between the following three parties: game developers",
      "FIELD18": " communities as publishers",
      "FIELD19": " and players. All incentives are written in smart contract and deployed on blockchain. It has a network effect and everyone is motivated to keep the system up and running",
      "FIELD20": " and all parties will benefit from it (except for large corporations 😀) Our focus is on incentives smart contract. Angular is used for the front-end and Solidity for writing smart contracts. We use MetaMask for authentication. Push Protocol for sending notifications once new game is created or published. The Graph for reading data from the blockchain. We have a special feature for ApeCoin owners.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 288,
    hackathon: "ETHGlobal Tokyo",
    title: "FUGA",
    more: "https://ethglobal.com/showcase/fuga-cn3cs",
    demo: "",
    repo: "https://www.github.com/wonj1012/fuga-eth",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "FUGA",
    description: " the Federated User-Generated Avatar",
      "FIELD11": " unites Blockchain and Federated Learning",
      "FIELD12": " crafting AI chatbots for individuals. Users contribute to AI training",
      "FIELD13": " earn rewards",
      "FIELD14": " and shape policies",
      "FIELD15": " securing data privacy",
      "FIELD16": " ownership",
      "FIELD17": " and fair rewards in a sustainable AI ecosystem.",
      "FIELD18": "FUGA",
      "FIELD19": " the Federated User-Generated Avatar (AI)",
      "FIELD20": " is a groundbreaking solution powered by Blockchain and Federated Learning that is set to redefine the realm of Artificial Intelligence (AI). By leveraging the vast amounts of data generated by everyday users",
      "FIELD21": " AI has grown increasingly intelligent. Nonetheless",
      "FIELD22": " these contributors often lack control over the AI models' policies and receive no recognition for their invaluable data contributions. FUGA addresses this disparity by incorporating Federated Learning and Blockchain technologies",
      "FIELD23": " fostering a sustainable AI training ecosystem that enables individuals to participate directly in the AI model training process",
      "FIELD24": " obtain rewards for their data contributions",
      "FIELD25": " and even influence the model's policies.Federated Learning is a decentralized approach to AI model training that allows multiple clients to collaborate on model development while preserving data privacy. By keeping data on local devices",
      "FIELD26": " Federated Learning enables models to learn from shared insights without exposing the raw data",
      "FIELD27": " thereby enhancing privacy and security.At its core",
      "FIELD28": " FUGA aims to create AI chatbots that capture and represent the unique attributes of specific communities. Through efficient filtering and processing of vast data",
      "FIELD29": " robust privacy protection",
      "FIELD30": " and assurance of rightful ownership and fair compensation",
      "FIELD31": " FUGA lays the foundation for a more equitable and thriving Decentralized AI-driven future. We utilized a decentralized federated learning structure for AI training. Clients (nodes) exchange trained models with each other",
      "FIELD32": " aggregate and evaluate them. By repeating this process",
      "FIELD33": " overall performance improvement is achieved",
      "FIELD34": " and models optimized for individual data are produced. We also deployed a contract on the Polygon testnet",
      "FIELD35": " which allows a smart contract to act as the controller without the need for a centralized aggregator. Furthermore",
      "FIELD36": " trained models are converted into NFTs and rewarded based on the degree of contribution through the smart contract. Consequently",
      "FIELD37": " data providers can maintain their data privacy while receiving rightful ownership and fair compensation for their data.",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 289,
    hackathon: "ETHGlobal Tokyo",
    title: "Octoplorer - block query made easy",
    more: "https://ethglobal.com/showcase/octoplorer-block-query-made-easy-pdgmt",
    demo: "https://docs.google.com/presentation/d/1PbiUOzlKVB7FomlmyNA5c82ZmYIczTUyBVE5gr6LoYc/edit#slide=id.g22dfca0265a_0_50",
    repo: "https://github.com/lamtrinh259/ETHGlobal_Tokyo_hackathon",
    video: "",
    winner: "👩🏽‍💻 Push — Best UX 🏆 ETHGlobal Tokyo Finalist ",
    short: "Octoplorer is an AI-powered blockchain explorer (for Ethereum and Polygon) that makes querying blockchain data as easy as typing in natural language. Get human-readable answers in formats like tables",
    description: " images",
      "FIELD11": " and graphs",
      "FIELD12": " so you can obtain any data you need for your Web3 journey.",
      "FIELD13": "For many Web3 users",
      "FIELD14": " we are certain that many people have heard the phrase \"the data is on the blockchain",
      "FIELD15": " so everybody can see it.\" But how many have actually tried to do it",
      "FIELD16": " and then realized how difficult it is to query the data on the blockchain when it is more than just 1 transaction? We have created the solution for that problem: We make querying data on the blockchain (for now Ethereum and Polygon mainnets) easy using AI-powered natural language understanding and a friendly user interface for Web3 technology.Members of our teams have various potential use cases for this web app:Obtain NFT images owned by a certain entity. This could be aIn terms of number of follower",
      "FIELD17": " get the Lens handles for the top 5 most popular ids.Obtain the aggregate statistics on certain NFT collections on popular marketplaces (for now Opensea and Rarible)Obtain data for recent transactions within the past 7 days for a certain walletFor an Ethereum Name Service name (for example",
      "FIELD18": " \"dwr.eth\")",
      "FIELD19": " we can get the Farcaster name",
      "FIELD20": " Farcaster account details",
      "FIELD21": " connected address",
      "FIELD22": " and all token balances and imagesAs of project submission deadline",
      "FIELD23": " please keep in mind that we cannot address all of the above-mentioned use cases due to time limitation. With our best effort",
      "FIELD24": " we have been able to make querying the blockchain both an easy-to-understand and enjoyable experience through some simple use cases. User can also send the query's result to any recipient with a Polygon address through simple push messaging.Basically",
      "FIELD25": " the more protocols and data that we plug in",
      "FIELD26": " the more possibilities will open up for us to query.We also think that this simple yet user-friendly web app would help to onboard the next million new people into web3 while empowering data geeks with the information they need for their web3 journey.*Side notes and trivia: for those that may be wondering where the name Octoplorer came from",
      "FIELD27": " it is a combination of the words \"octopus\" and \"explorer\". I (Lam) chose octopus as the representative animal because:🐙 Octopus is fast",
      "FIELD28": " it can swim up to 25 miles per hour. That is faster than Michael Phelps!An octopus can multitask well due to its large nerve cluster. It has something like a \"minibrain\" at the base of each arm to independently control its movement. That's why it can grab multiple blockchain transactions simultaneously! For the ideation stage",
      "FIELD29": " Lam literally drew the wireframe of the website on paper. Then Andrey used Figma to draft up a mock layout of the website along with the Octoplorer logo. For the blockchain data",
      "FIELD30": " we are thankful for the support of the sponsors Airstack and Lens Protocol. Thanks to Airstack's powerful up-to-the-minute API",
      "FIELD31": " we could query blockchain data on both Ethereum and Polygon mainnet. For Lens Protocol (on Polygon)",
      "FIELD32": " we can also query many Lens-related identities such as handles",
      "FIELD33": " id",
      "FIELD34": " number of followers. For the natural-language query",
      "FIELD35": " we use OpenAI's ChatGPT 3.5 \"text-davinci-003\" model",
      "FIELD36": " enhanced by the langchain (open-source) library to empower the AI even further. When a user writes a query on the front-end",
      "FIELD37": " we have an large-language-model (LLM) agent that would decide whether that is a Len-related query or an Airstack-related query. After the LLM agent decides the model",
      "FIELD38": " then the query would be routed to the right ChatGPT model to interpret the query and write the appropriate GraphQL code. From there",
      "FIELD39": " the GraphQL code would then be passed to the right API endpoint (Airstack or Lens) to obtain the data necessary. After the data is obtained",
      "FIELD40": " we will then display the results back to the user in an easy-to-understand format",
      "FIELD41": " including tables",
      "FIELD42": " images",
      "FIELD43": " and/or graphs. For the front-end",
      "FIELD44": " we used Next.js Tailwind and React. We have also integrated web3 wallet sign-in (including Metamask) using \"wagmi\" and rainbow kit libraries. Thanks to the sponsor Push",
      "FIELD45": " we have also enabled a messaging service that allows users to send the results of their queries to any recipient on Ethereum mainnet without leaving the application. Since any LLM is non-deterministic by the nature of the model and GraphQL code for a specific protocol is strictly conformant to that protocol's unique schema",
      "FIELD46": " we did some hacky and creative things in order for some of the queries to work consistently. Please feel free to ask us about this if you are curious. :)",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 290,
    hackathon: "ETHGlobal Tokyo",
    title: "Consesus Score",
    more: "https://ethglobal.com/showcase/consesus-score-ns7kz",
    demo: "https://consensus-score-sugaim.vercel.app/",
    repo: "https://github.com/Consensus-Score/Consensus-Score",
    video: "",
    winner: "",
    short: " \"Consensus score\" refers to the average score of how much people trust you",
    description: " and you can have a way of indicating how much trust you have without revealing your score to others. ",
      "FIELD11": "\"Consensus Score\" allows individuals to hold a score that represents how much others trust them",
      "FIELD12": " which can help establish a new trust system. This score is kept using zero-knowledge proofs",
      "FIELD13": " meaning that the score itself cannot be revealed to anyone other than the score holder. Validators can input an account address to verify how highly someone is rated",
      "FIELD14": " but the actual score is not displayed. Instead",
      "FIELD15": " Consensus Score displays how many stars someone has based on their level of trust according to others",
      "FIELD16": " achieved through the use of zero-knowledge proofs. Our project utilizes zero-knowledge proofs to enable score holders to prove they are trustworthy while maintaining privacy",
      "FIELD17": " and validators can use the blockchain to know that the score cannot be tampered with",
      "FIELD18": " allowing them to determine whether someone is trustworthy or not based on their score. In our project",
      "FIELD19": " we mainly use Homomorphic Encryption and zkSNARK. In the Consensus Score",
      "FIELD20": " when sender A inputs a score M",
      "FIELD21": " it is encrypted with the public key of receiver B. The encrypted score E(m",
      "FIELD22": " pkB) is then processed with Homomorphic Encryption. The encrypted score is added to the original score E(n",
      "FIELD23": " pkB). E(m",
      "FIELD24": " pkB) + E(n",
      "FIELD25": " pkB) = E(x",
      "FIELD26": " pk) is the result of this calculation. Once the calculation is completed",
      "FIELD27": " we check whether the sender is registered in the whitelist. If they are registered",
      "FIELD28": " we record the calculation result on the blockchain. When the score owner visits their MyPage or a verifier verifies the score",
      "FIELD29": " proof generation and verification begin on Circom. Encrypted total score and encrypted number of evaluators are input to public input on Circom. Average score calculation is performed on Circom",
      "FIELD30": " and the output is the average score and the rate. Circom proves the correctness of the input by inputting the total score still encrypted",
      "FIELD31": " and also proves the correctness of the average score calculation and the execution.",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 291,
    hackathon: "ETHGlobal Tokyo",
    title: "Pok3mon - An Onchain PvP battle game ",
    more: "https://ethglobal.com/showcase/pok3mon-an-onchain-pvp-battle-game-bjuiz",
    demo: "https://ethtokyo-onchain-game.vercel.app/",
    repo: "https://github.com/yamapyblack/ethtokyo-onchain-game",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize ",
    short: "Onchain PvP Battler powered by cross chain messaging and commitment & reveal scheme",
    description: "Our project takes the fun and excitement of Pokemon and infuses it with the power of NFT assets to create a one-of-a-kind gaming experience. But we didn't stop there. We wanted to ensure that the game was fair and equal for all players",
      "FIELD11": " so we developed a unique approach using cryptography combined with Commitment and Reveal Scheme.To make the experience even more unique",
      "FIELD12": " we analyzed each player's personal Web3 NFT collection and generated a set of \"Poke3mons\" tailored specifically to them. This means that every player will have a completely unique set of creatures to operate and use in battle that comes with own attributes",
      "FIELD13": " emulating the success seen in the original game.Furthermore we didn't let the limitations of the Ethereum blockchain hold us back. We undestood that onchain games were immensely expensive. So we utilized cross chain message relayers to bridge the game onto a separate chain",
      "FIELD14": " allowing us to take advantage of the growing potential of Layers 2s and any further developments in the future.So join us on this adventure to catch 'em all and become the ultimate Poke3mon master! For the commitment and reveal scheme we utilized a combination of logic and computational technique to achieve what we wanted. The logic was such",
      "FIELD15": " the users has to both go through a \"commit\" and a \" reveal\" stage in which they both had to commit an encrypted answer into the smart contract during a time period. The order of it did not matter because the information was encrypted so the owner would know but could not be edited.That one once both users committed their decisions we could ask them to reveal their answer each (this is needed because it is encrypted) in order to determine the winner.This proved to be successful despite slightly tedious and believe that it can be improved once layer 2 scales and we handle the transactions using account abstraction.As for our other issue of cross chain bridging",
      "FIELD16": " the original intention was to use a natural bridge or a message relayer such as Layer Zero to pass the information of the NFTs from ETH and Polygon POS to Polygon Zk or other Zk layers.However many of the methods we tried did not seem to be fully functional (including Layer Zero) making it extremely difficult to pursue this. In the end we began by developing a framework that could be easily ported over to a cross chain message relayer when it is ready in order to have a functioning demo.With the remaining time we began looking into using Hyperlane for crosschain messaging so that if we manage to deploy in time we can overcome the issue (or can do it at a later date).",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 292,
    hackathon: "ETHGlobal Tokyo",
    title: "DAOlingo",
    more: "https://ethglobal.com/showcase/daolingo-zduk5",
    demo: "https://github.com/michaeltomasik/DAOlingo-ETHGlobal-Tokyo-2023-",
    repo: "https://github.com/michaeltomasik/DAOlingo-ETHGlobal-Tokyo-2023-",
    video: "",
    winner: "🥉 Huddle01 — Best Use 🏊‍♂️ Polygon — Pool Prize 🌏 Celo — Public Goods",
    short: " Community ",
    description: "Unlock the world with DAOlingo! Our APP allows you to connect",
      "FIELD11": " learn and practice languages with ease while promoting financial inclusion. ",
      "FIELD12": "We are trying to level the global market rate of language education. Education and especially languages are a global good",
      "FIELD13": " so we want to help even the playing field by creating work opportunities that benefit people in lower income countries.With DAOlingo",
      "FIELD14": " any user has the opportunity to learn and / or practice languages. The dAPP will connect you to a native speaker of the language that you want to practice. Similarly to an uber like system",
      "FIELD15": " the user will be matched with a native speaker that is currently available and wants to take on your request.How it works:The user sets a budget on how much (per second/block/minute/hour) he / she is willing to pay for talking to a native speaker. All available native speakers will see a call to action whereby they can accept the call. Once a native speaker accepts the call",
      "FIELD16": " the clock starts to count. The native speaker is paid a rate that the student set initially. Here the novelty is that the student only pays for the amount of time he / she is actually talking to the native speaker. Once the call is ended",
      "FIELD17": " the clock stops to count and the payment transaction will be completed seamlessly.Benefits for Teachers:Native speakers (teachers) from for example Venezuela have the opportunity to create additional income streams",
      "FIELD18": " earn currencies that are protected from hyperinflation and have flexible working hours",
      "FIELD19": " which means they can work whenever they have time.Benefits for Students (Why would anyone want to use DAOlingo?):In short convenience and practicality. With DAOlingo you have24/7 access to native speakers (teachers) – so you can take up your practice no matter where you are and what you are doingYou  only pay for the time you are practicing without time commitmentYou pay in whatever crypto currency you ownBenefits compared to competition (ie. ITalki):Low fees because it is powered by cryptoFostering financial inclusion",
      "FIELD20": " as we are providing access to financial means to a group of people that do not have access to traditional banking systemsDAO aspect",
      "FIELD21": " that allows for the community to shape and determine the future of the company DAOlingo is combing a bunch of technologies out there (especially technologies from projects that are at the event). We have tried to bring the technologies ofHUDDLE01",
      "FIELD22": " SUPERFLUID on CELO mainnet.We can also provide support for the following projects and protocols:Uniswap",
      "FIELD23": " Ethereum",
      "FIELD24": " AAVE",
      "FIELD25": " Polygon",
      "FIELD26": " Taiko",
      "FIELD27": " Apecoin",
      "FIELD28": " Scroll and Superfluid all under one hood.Main Tech:CELO - deployed on mainnetSUPERFLUID - used for pay per second / blockHUDDLE01 - Using Huddle01 to connect the student and the teacher.To break it down:Form of Payment:APE (We created Super Token for APE to support the money streams of SuperFluid",
      "FIELD29": " and we can easily use it for other chains)UNIGHOAlso deployed on:Polygon",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 293,
    hackathon: "ETHGlobal Tokyo",
    title: "Try subscription model in crypto",
    more: "https://ethglobal.com/showcase/try-subscription-model-in-crypto-99xkm",
    demo: "",
    repo: "https://github.com/keocoin/eth_tokyo",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize ",
    short: "Automatic extension of subscriptions based on pre-set allowance",
    description: "The global subscription market is expected to grow from $13.2 billion in 2018 to $478.2 billion by 2025.That I want to provide crypto subscription platform for Web2 services.Users pay with cryptocurrency walletAutomatic extension of subscriptions based on pre-set allowance.The smart contract is transparent",
      "FIELD11": " allowing users to view the history of all transactions on the blockchain Allows service providers  name",
      "FIELD12": " unit price",
      "FIELD13": " and duration time. of their servicesUsers can subscribe to services by paying the required amount of tokens.Supports automatic renewals of subscriptions.Users can unsubscribe from services.Provides the ability to transfer subscription fees automatically to service providers.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 294,
    hackathon: "ETHGlobal Tokyo",
    title: "MARM(Music Assets and Rights Management)",
    more: "https://ethglobal.com/showcase/marm-music-assets-and-rights-management-67q65",
    demo: "",
    repo: "https://github.com/SONIC-DAO/mcm",
    video: "",
    winner: "3️⃣ Metamask — Best Unity Hack ",
    short: "Protocols that allow artists to proactively and freely define music copyright management",
    description: "This is a music copyright management protocol that utilizes smart contracts. Instead of the complex copyright management systems of the past",
      "FIELD11": " the efficient and transparent process of smart contracts will allow artists to more easily and proactively manage their rights and revenues for their musical works. It also aims to be flexible enough to adapt to the latest cases of music composition by AI and the use of music in the metaverse space",
      "FIELD12": " which are expected to become more common in the future. The front was created with react and next.js and the smart contract was deployed with Goerli in Ethreum. Use web3 modal and Wagumi for component headers. On the front",
      "FIELD13": " unity's webGL recognizes the user's metamask and launches the music player. It also notifies the user when he/she purchases a song using push protocol and allows the user and the owner to communicate with each other via messages.",
      "FIELD14": "",
      "FIELD15": "",
      "FIELD16": "",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 295,
    hackathon: "ETHGlobal Tokyo",
    title: "AQA Protocol",
    more: "https://ethglobal.com/showcase/aqa-protocol-b5ok4",
    demo: "https://www.canva.com/design/DAFgLxB8vQc/G7eD7UFe6pxs2Sfpdo97fg/edit",
    repo: "https://github.com/zkyuki/AQAprotocol",
    video: "",
    winner: "🔟 Lens — Top 10 🏊‍♂️ Polygon — Pool Prize 🥈 Lit — Best Use ",
    short: "A privacy data pool for personalization. We collect viewing history data from Lens apps allow users to control the access. All Lens apps",
    description: " if they have consent from users",
      "FIELD11": " can use the data for personalization. We focuses on private data while Lens Protocol does on public data. ",
      "FIELD12": "This project is used for the data hub for Lens apps' personalization. Privacy-sensitive data can be used for good personalization. Especially in a web3 social",
      "FIELD13": " such kind of data is important for UX. But almost all such data is closed in one app and web3 social is still in a early stage",
      "FIELD14": " so one app could have a few amount of data. So we overcome the dilenma between privacy and good UX. This project used Lit protocol to allow users to control access to the user's private data such as viewing history",
      "FIELD15": " click",
      "FIELD16": " sharing on Lens Protocol. Lens and Lit integrations don't support Lit action",
      "FIELD17": " so it was difficult.Also",
      "FIELD18": " it used ChatGPT to categoraize the content users viewed for personalization. chatGPT doesn't support Typescript officially",
      "FIELD19": " but Lens app uses Typescript",
      "FIELD20": " so it was difficult.",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 296,
    hackathon: "ETHGlobal Tokyo",
    title: "SnapPay",
    more: "https://ethglobal.com/showcase/snappay-wrpb9",
    demo: "",
    repo: "https://github.com/nsnull0/ethglobal-hack",
    video: "",
    winner: "",
    short: "Event ticketing systems. business owner or company or group can easily create event with the power of any evem compatible blockchain",
    description: " just deploy the pool and good to go.",
      "FIELD11": "This Project supposedly will use quicknode",
      "FIELD12": " metamask",
      "FIELD13": " push messaging",
      "FIELD14": " and compatible with any evm.Features:Organizer / company can create an event to any evm blockchaindeploy the pool first so that the group can use to create an eventcustomer / member can subscribe to join.First customer / member can subscribe and then they can check in by scanning the QR code created by the smart contract after all requirement passed.Client supposed to be on android mobile app with the help of web3jThe QR code to checkin will be generated from another project for organizer",
      "FIELD15": " so that the member who already subscribed before (paid) can checkin by snap the qr code. Alchemy -> to copy real life blockchainQuicknode to try the quick alert view to get the notification from receipt hash that triggered by smart contract.Supposed this feature will be implemented as part of mobile app.Metamask",
      "FIELD16": " try with new snap metamask.Web3j framework for android implementation to integrate with evm blockchain.",
      "FIELD17": "",
      "FIELD18": "",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 297,
    hackathon: "ETHGlobal Tokyo",
    title: "no lens no problem",
    more: "https://ethglobal.com/showcase/no-lens-no-problem-rsjcq",
    demo: "https://nolensnoproblem.vercel.app/",
    repo: "https://github.com/wojtekwtf/nolensnoproblem",
    video: "",
    winner: " 🏆 Worldcoin — Honorable Mentions ⛓ Sismo — Best On-Chain App 🔟 Lens — Top 10 🏊‍♂️ Polygon — Pool Prize ",
    short: "We let people without lens profiles to post on our profile \"nolensnoproblem.lens\". We achieve this by creating wallets for our users and paying for their txs using erc-4337. To avoid paymaster sybil attacks and spam",
    description: " we require users to verify with sismo or worldcoin.",
      "FIELD11": "Main goal of the project is to have a no-wallet",
      "FIELD12": " no-sign experience for people who want to post on lens without owning a lens profile — which are hard to get!You can go to nolensnoproblem.xyz",
      "FIELD13": " write a message",
      "FIELD14": " and have it on lenster in seconds",
      "FIELD15": " without any prior blockchain experience.To protect ourselves against sybil attacks and spam",
      "FIELD16": " we require users to either sign in with twitter (through sismo connect) or verify their personhood through worldcoin. There are 3 main components of the project:Posting the message on LensCreating the wallets for users and paying for their transactions with erc 4337Sybil protection with sismo and worldcoinTech explanation:To post a message on Lens",
      "FIELD17": " we minted a Lens account nft and sent it to our contract address. The contract has only one function",
      "FIELD18": " post()",
      "FIELD19": " which takes following parameterscontentURIsismoProofworldcoinProofcontentURI is used to create the post and sismoProof and worldcoinProof are used to verify that the transaction wasn't created by a bot. We use sismoConnect sdk and WorldID sdk to verify the transactions onchainFor a seamless and trustless experience",
      "FIELD20": " we use erc 4337 to:create a smart contract wallet for each userperform the post() transaction for them (by sending it to a 4337 userOp mempool)pay for these transactions from our custom paymasterto ensure that the paymaster is not drained by bots",
      "FIELD21": " we require submitting a valid sismo or worldcoin proofs before we pay for the transactionSismo and Worldcoin verifications are done by prompting our users to click on \"Verify with Sismo\" or \"Verify with Worldcoin\" buttons on frontend. Both apps proceed by generating zk proofs that prove respectively:being on a twitter allowlistbeing a unique humanthese zk proof can be then verified onchain to ensure that the user is not a bot",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 298,
    hackathon: "ETHGlobal Tokyo",
    title: "no lens no problem",
    more: "https://ethglobal.com/showcase/no-lens-no-problem-rsjcq",
    demo: "https://nolensnoproblem.vercel.app/",
    repo: "https://github.com/wojtekwtf/nolensnoproblem",
    video: "",
    winner: " 🏆 Worldcoin — Honorable Mentions ⛓ Sismo — Best On-Chain App 🔟 Lens — Top 10 🏊‍♂️ Polygon — Pool Prize ",
    short: "We let people without lens profiles to post on our profile \"nolensnoproblem.lens\". We achieve this by creating wallets for our users and paying for their txs using erc-4337. To avoid paymaster sybil attacks and spam",
    description: " we require users to verify with sismo or worldcoin.",
      "FIELD11": "Main goal of the project is to have a no-wallet",
      "FIELD12": " no-sign experience for people who want to post on lens without owning a lens profile — which are hard to get!You can go to nolensnoproblem.xyz",
      "FIELD13": " write a message",
      "FIELD14": " and have it on lenster in seconds",
      "FIELD15": " without any prior blockchain experience.To protect ourselves against sybil attacks and spam",
      "FIELD16": " we require users to either sign in with twitter (through sismo connect) or verify their personhood through worldcoin. There are 3 main components of the project:Posting the message on LensCreating the wallets for users and paying for their transactions with erc 4337Sybil protection with sismo and worldcoinTech explanation:To post a message on Lens",
      "FIELD17": " we minted a Lens account nft and sent it to our contract address. The contract has only one function",
      "FIELD18": " post()",
      "FIELD19": " which takes following parameterscontentURIsismoProofworldcoinProofcontentURI is used to create the post and sismoProof and worldcoinProof are used to verify that the transaction wasn't created by a bot. We use sismoConnect sdk and WorldID sdk to verify the transactions onchainFor a seamless and trustless experience",
      "FIELD20": " we use erc 4337 to:create a smart contract wallet for each userperform the post() transaction for them (by sending it to a 4337 userOp mempool)pay for these transactions from our custom paymasterto ensure that the paymaster is not drained by bots",
      "FIELD21": " we require submitting a valid sismo or worldcoin proofs before we pay for the transactionSismo and Worldcoin verifications are done by prompting our users to click on \"Verify with Sismo\" or \"Verify with Worldcoin\" buttons on frontend. Both apps proceed by generating zk proofs that prove respectively:being on a twitter allowlistbeing a unique humanthese zk proof can be then verified onchain to ensure that the user is not a bot",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 299,
    hackathon: "ETHGlobal Tokyo",
    title: "DKTP",
    more: "https://ethglobal.com/showcase/dktp-wo7jm",
    demo: "",
    repo: "https://github.com/MorimotoJun/DKTP",
    video: "",
    winner: "",
    short: "New kind of Gaming Media - Decentralized Knowledge Trading Protocol -",
    description: "Short Deck(https://docs.google.com/presentation/d/1dTyQFbMnCmoWuodnJS6-EC32OHu6wl0T17QlHj4dY48/edit?usp=sharing)This is the new kind of Gaming Media.[Vision]We’re from a gaming company and aiming to release Blockchain Game.But in today's P2E games",
      "FIELD11": " Traders are monopolizing profits by taking advantage of Gamers. So",
      "FIELD12": " Blockchain games are seen as scams for most Gamers.We’d like to use blockchain to provide incentives for Gamers playing deeply.[Problem]・Designing limited opportunities",
      "FIELD13": " called “completionist features”",
      "FIELD14": " is very important for building GameFi.・Existing game media spreads information freely",
      "FIELD15": " making rare items vulnerable to RMT and disrupting the GameFi ecosystem.・Gamers prefer acquire items through their own efforts rather than buying",
      "FIELD16": " so hints on obtaining items are more beneficial than the items themselves.・Blockchain enables true gamers to access valuable information",
      "FIELD17": " driving motivation for deeper game engagement without ecosystem disruption.[Product]To enable gamers to share and get the hints for playing deeper",
      "FIELD18": " we’ll provide a new gaming media",
      "FIELD19": " P2P marketplace for gaming articles.Gamers can freely write articles and sell them to each other.This can connect on or off chain Game data to protect this community from Traders.[Contribution for the Tokenomics]The treasury contract can provide liquidity to the DEX. So",
      "FIELD20": " the more attractive the game is the more thicker liquidity. This project using Nuxt & Laravel for building client side",
      "FIELD21": " and using Solidity",
      "FIELD22": " Mumbai Network and Lit Protocol for blockchain-end. On the Nuxt",
      "FIELD23": " we use @metamask/detect-provider module to build efficient UX for connecting wallet. And the core function of this project is access control",
      "FIELD24": " so we use Lit Protocol. And we've been building liquidity providing contract using Uniswap SDK code base.",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 300,
    hackathon: "ETHGlobal Tokyo",
    title: "Web3PortfolioWallet",
    more: "https://ethglobal.com/showcase/web3portfoliowallet-5f7bk",
    demo: "",
    repo: "https://github.com/mashharuki/Web3PortfolioWallet",
    video: "",
    winner: "🏊 The Graph — Pool Prize 🏊‍♂️ Polygon — Pool Prize ",
    short: "This portfolio wallet consolidates the information that shapes one's identity (DID",
    description: " VC",
      "FIELD11": " NFT) without the need for private key management. DID Name Service convert DID into an easy-to-understand name. Tokens and the social score are granted according to the activities.",
      "FIELD12": "This portfolio wallet consolidates the information that forms one's identity in the blockchain world",
      "FIELD13": " including DID",
      "FIELD14": " wallet address",
      "FIELD15": " Verifiable Credentials",
      "FIELD16": " and NFT.In addition",
      "FIELD17": " the wallet also allows DIDs",
      "FIELD18": " which are difficult for humans to remember",
      "FIELD19": " to be registered and managed with easy-to-understand names as a DID name service.As transactions on the blockchain increase",
      "FIELD20": " Social Identity Tokens are awarded and can be used to transfer money.The more connections you have with others",
      "FIELD21": " the more your score will grow",
      "FIELD22": " which will be converted into a score in the blockchain domain.It's a wallet where activity is structured as a portfolio.The application frees the user from the complexities of private key management and provides a portfolio wallet for the management of identity information.You can form a self-sovereign portfolio if you work while owning this wallet.The NFTs and Verifiable Credentials issued as certificates through casual exchanges become part of your identity.ChallengesWe challenge the implementation of a DID version of ENS.We challenge the implementation of an algorithm for scoring using social identity tokens. This product has four main components.Frontend (React.js",
      "FIELD23": " MUI",
      "FIELD24": " Pinata API",
      "FIELD25": " Blocto SDK)Smart Contract (Truffle",
      "FIELD26": " ERC20",
      "FIELD27": " ERC721",
      "FIELD28": " Avalanche Fuji Chain)SubGraph (@graphprotocol)API Server (AWS KMS",
      "FIELD29": " ION",
      "FIELD30": " DID",
      "FIELD31": " Verifiable Credentials",
      "FIELD32": " ethers.js",
      "FIELD33": " Express)The frontend is basically built using React.js and MUI. Access to the Web3 world is provided by the Blocto SDK",
      "FIELD34": " Subgraph",
      "FIELD35": " and API servers",
      "FIELD36": " so users don't have to worry about managing private keys.For the smart contracts",
      "FIELD37": " we used Truffle to develop them",
      "FIELD38": " with Mytoken and DNS as the main smart contracts. To use The Graph",
      "FIELD39": " we developed a way to index the data we wanted to get by issuing events.For the acquisition of the data that would be displayed on the frontend",
      "FIELD40": " we decided to use The Graph. This was the first time we created a subgraph with The Graph and we learned a lot about its usefulness.The API implements a process that requires a private key signature. The API server signs the transaction on behalf of the user and sends it to the blockchain. So the user does not have to worry about key management. The API server also implements DID generation and DID document registration functions.",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 301,
    hackathon: "ETHGlobal Tokyo",
    title: "DoppeL.ink",
    more: "https://ethglobal.com/showcase/doppel-ink-w4c7g",
    demo: "https://drive.google.com/file/d/11Krj1z7h1FvnnMS6oFONxF0cd5Ax-_i6/view?usp=sharing",
    repo: "https://github.com/eyepyon/doppel",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "Wallet that allows high-performance AI real-time voice changers to be rented on a pay-as-you-go basis or bought and sold as NFTs",
    description: "AI Voice Changer Wallet.It has a built-in AI voice changer called RVC",
      "FIELD11": " which can provide your voice using your own speech and songs as training data.It is available with pay-as-you-go billing using SuperFluid",
      "FIELD12": " or as NFT",
      "FIELD13": " which allows users to sell out of the system.Users are charged only for what they want to use",
      "FIELD14": " which is highly satisfactory. RVC Voicechange・Curvegrid・・・NFTVery clear service and easy to use!・WorldCoin・・・Login　The best way to view the world is to authenticate using the eyeballs to get a voice.・SuperFluid・・・Pay-per-useIf I set it up normally",
      "FIELD15": " the system would suffer from the gas bill",
      "FIELD16": " but it's great to be able to use it without having to think about the gas bill!・zkBob zero-knowledgeZero-Knowledge Authentication",
      "FIELD17": " which was surprisingly easy to incorporate.・Scroll zero-knowledgeZero-Knowledge Authentication",
      "FIELD18": " which was surprisingly easy to incorporate.",
      "FIELD19": "",
      "FIELD20": "",
      "FIELD21": "",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 302,
    hackathon: "ETHGlobal Tokyo",
    title: "Multiple access wallet",
    more: "https://ethglobal.com/showcase/multiple-access-wallet-ee26p",
    demo: "",
    repo: "https://github.com/dallarosa/ethglobal-clarifi",
    video: "",
    winner: "📜 Scroll — Just Deploy 🤝 Polygon — Best Public Good with Account Abstraction 🏊‍♂️ Polygon — Pool Prize 🏦 Safe — Best Tech Implementation ",
    short: "Jerry Finance",
    description: " a cutting-edge Web3 payroll service",
      "FIELD11": " unifies FIAT and crypto salary payments while offering employees flexible payment options and frictionless onboarding through non-custodial smart contract accounts created by employers.",
      "FIELD12": "Jerry Finance is a visionary platform that transforms payroll management by harnessing the power of Web3 technology. Our groundbreaking solution seamlessly integrates FIAT and crypto salary payments",
      "FIELD13": " addressing the pain points of traditional payroll systems and paving the way for a more efficient and flexible process.With Jerry Finance",
      "FIELD14": " employers can easily onboard employees into the crypto ecosystem by creating non-custodial smart contract accounts on their behalf. This frictionless onboarding process eliminates the complexities and barriers often associated with crypto adoption.Our platform empowers employees with unparalleled payment freedom",
      "FIELD15": " allowing them to choose from various payment methods such as bank transfers",
      "FIELD16": " crypto wallets",
      "FIELD17": " or streamed salaries. Moreover",
      "FIELD18": " they can select their preferred currency or tokens",
      "FIELD19": " providing a personalized payment experience.Jerry Finance is designed to be user-friendly and familiar",
      "FIELD20": " enabling employees to access their accounts using their corporate email addresses. This intuitive approach ensures a smooth transition for users",
      "FIELD21": " bridging the gap between traditional and decentralized systems.We recognize the importance of organization and efficiency in payroll management. That's why Jerry Finance features ENS company subdomains",
      "FIELD22": " streamlining employee contract accounts and payment processes. Additionally",
      "FIELD23": " our bulk scheduled payments functionality saves time and reduces gas costs",
      "FIELD24": " making payroll management more efficient and cost-effective.By revolutionizing payroll management with Web3 innovation",
      "FIELD25": " Jerry Finance fosters trust and growth in the digital era. Our platform enables businesses to adapt to the ever-evolving financial landscape",
      "FIELD26": " offering a robust",
      "FIELD27": " flexible",
      "FIELD28": " and future-proof solution. Experience the transformative power of Jerry Finance and redefine your payroll management today. Smart ContractOn the smart contract side",
      "FIELD29": " we focused on the user story for the payment recipient. Specifically",
      "FIELD30": " the recipients will use AA smart contract wallets powered by Safe Wallet so the payroll service has unified integration surface. Because AA makes wallet programmable",
      "FIELD31": " recipients retain the freedom on what they would like to do whenever payment is received. For example",
      "FIELD32": " they could hook it up with Monerium to automatically offramp it to a bank account.For this hackathon",
      "FIELD33": " we implemented an automatic swap function so that user could receive any payment in any cryptocurrency of their choice by piping the payment through UniswapV3. We implemented the Autoswap Module",
      "FIELD34": " which allows the wallet owner to set desired tokens and source tokens for swapping. The module utilizes execTransactionFromModule function provided by the Safe Wallet to bypass its own security controls and execute token swaps via the Uniswap V3 Router.UsageDeploy the AutoswapModule contract",
      "FIELD35": " providing the Uniswap V3 Router contract address as a constructor parameter.npx hardhat run scripts/deploy.ts --network polygonEnable the deployed AutoswapModule as a module in the Safe Wallet wallet.e.g. https://app.safe.global/matic:0x04A55848D38EDec988A6F2287B8E00718E14ab14/transactions/tx?id=multisig_0x04A55848D38EDec988A6F2287B8E00718E14ab14_0x5f45465a6e897267c1515b9e9dd0473dfea2b2c1be109ec1f70f4a997af937bcSet a desired token by calling setDesiredToken() from the Safe wallet.Set source tokens that are allowed to be swapped by calling setSourceToken() from the Safe wallet.e.g. https://app.safe.global/matic:0x04A55848D38EDec988A6F2287B8E00718E14ab14/transactions/tx?id=multisig_0x04A55848D38EDec988A6F2287B8E00718E14ab14_0x43fdaa9d4e9c81826a977d877ee73f159e0209f9857ad500bb68f332cfe3c590(Optional) Unset source tokens that should no longer be allowed for swapping by calling unsetSourceToken() from the Safe wallet.Whenever an allowlisted source token is received",
      "FIELD36": " anyone could swap them into desired token byExecute an autoswap by calling executeAutoswap()",
      "FIELD37": " providing the Safe address",
      "FIELD38": " token to swap",
      "FIELD39": " and the amount to swap.npx hardhat run scripts/autoswap.ts --network polygone.g. https://polygonscan.com/tx/0x2842461e19f4c84203e760b723abe91536ba5f2e8ec9075445cdc0419374c770In the context payroll service",
      "FIELD40": " the payroll administrator could push this transaction automatically as a contract with their payee. It is also easy to set up relayer / MEV incentives such that an external party will be motivated to facilitate these transactions.In fact",
      "FIELD41": " it is very much in company's interest to use this set up instead of company actively swapping the tokens before sending to payees. That is because company would have incur taxable event and additional account burden if the settlement currency hits company's book. In this setup",
      "FIELD42": " the company's payment currency first lands in user's wallet and company is simply facilitating non-custodial blockchain interactions as approved by the user.Contract OverviewSafeWallet Interface: An interface for interacting with the Safe Wallet wallet.AutoswapModule: Main contract implementing the Autoswap Module functionality.setDesiredToken(): Sets the desired token for the Safe wallet.setSourceToken(): Sets a source token to be allowed for swapping.unsetSourceToken(): Unsets a source token",
      "FIELD43": " disallowing it for swapping.executeAutoswap(): Executes the autoswap for a specified Safe",
      "FIELD44": " token",
      "FIELD45": " and amount using the Uniswap V3 Router.FrontendWe have used NuxtJS v3 with Vuetify 3 for the webdevelopment.To implement the registration/login features we have used Safe Auth Kit together with Web3Auth for the login providers.UsageEnter the  jerryfi  folder in the repository.run  yarn install  to install all the dependenciesrun  yarn dev  to run the server in your local machine",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 303,
    hackathon: "ETHGlobal Tokyo",
    title: "SubsCrypt",
    more: "https://ethglobal.com/showcase/subscrypt-v10cv",
    demo: "https://subscrypt.vercel.app",
    repo: "https://github.com/cr3atorsstudio/subscrypt",
    video: "",
    winner: "🏊 Worldcoin — Pool Prize ",
    short: "How many subscriptions are you currently signed up for?   SubsCrypt allows you to pay for all your subscriptions with ETH💰  The future of subscriptions is right here 🌍",
    description: "❶ Description:This service allows customers to easily manage subscription services as well as payments. We aim to make ETH payment one of the main payment methods in the future.❷ Current Challenges:There is a limited number of services that accept ETH as payment. Our goal is to facilitate the use of ETH for everyday transactions",
      "FIELD11": " making it simple to pay for the content and services that we typically purchase. We envision a future where people can seamlessly buy and sell products and services with ETH",
      "FIELD12": " beyond just Defi",
      "FIELD13": " NFTs",
      "FIELD14": " and similar applications.❸ Features:Manage subscriptions for web2",
      "FIELD15": " web3",
      "FIELD16": " and creators in a unified platformReal-time notification using PushProtocolThe ability to track and notify subscription renewals and payment information in real-time using SuperfluidUser authentication using Worldcoin",
      "FIELD17": " which increases security and transparency❹ Revenue Model:Assumes revenue from commissions and decentralized advertising revenue model❺ Possible Use Cases:Integration with game streaming services:By integrating SubsCrypt with gameing platforms",
      "FIELD18": "allow players to pay subscription fees using ETH to access specific games.This integration could create an entry point into the gaming industry and open up new markets.Marketplace for Creators:With SubsCrypt",
      "FIELD19": " creators can set subscription fees for their work and allow customers to access that content. Customers can pay in ETH to access their content. This facilitates monetization for creators. This can revolutionize the digital content industry by making it easier for creators to monetize their work.Donation platform for charitable organizations:Customers can use ETH to pay for access to exclusive content in the organization. Customers can use ETH to make recurring donations to the organizations they wish to support. This increases the accessibility of donations.Integration with online education services:Integrating SubsCrypt with online education services will allow customers to enroll in courses and programs using ETH. This will facilitate access to educational content by offering users various payment options worldwide",
      "FIELD20": " making it easier for them to access online education through ETH.Subscription services for healthcare data:Develop subscription services for healthcare data. Customers canaccess their health data and wellness information using ETH.❻ Future features:Notify users when the subscription period is ending soon using Push ProtocolSupport multi-chain (support whatever Superfluid supports )Add creator's sign-up page (users can start their subscription plan from our platform)Swap/Bridge functionality to get the necessary cryptocurrencies to start a subscription Superfluid: It facilitates fixed-fee transactions and recurring payments without renewing subscriptions every month. It also reduces the gas fees since only gases are required when starting and canceling the stream for users and depositing money for receivers.Worldcoin: It increases security and transparency in the app by authenticating users with a phone number or orb.Push Protocol: It adds the functionality of real-time notification. Currently",
      "FIELD21": " it notifies the users only when the stream starts or is canceled.",
      "FIELD22": "",
      "FIELD23": "",
      "FIELD24": "",
      "FIELD25": "",
      "FIELD26": "",
      "FIELD27": "",
      "FIELD28": "",
      "FIELD29": "",
      "FIELD30": "",
      "FIELD31": "",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 304,
    hackathon: "ETHGlobal Tokyo",
    title: "HyperBob",
    more: "https://ethglobal.com/showcase/hyperbob-fz6rz",
    demo: "https://app.pitch.com/app/presentation/cf0c0bf2-f13a-42b7-8098-a7bba93c4015/486ac52c-937b-4ac5-878d-5a0157f8dfb1",
    repo: "https://github.com/y-u-y-a/hyperbob",
    video: "",
    winner: "🏊‍♂️ Polygon — Pool Prize 🌀 Hyperlane — Best use of Warp Routes  🥇 zkBob — Best Use ",
    short: "HyperBob’s ERC4337-compliant wallet implements the one-click private transfer feature that allows the account to send any stablecoin anonymously. It integrates zkBOB",
    description: " an anonymous stablecoin transfer solution and Hyperlane",
      "FIELD11": " an interchain bridging and messaging protocol. ",
      "FIELD12": "The advent of the Account Abstraction and its first implementation",
      "FIELD13": " ERC4337",
      "FIELD14": " could unlock the full potential of Ethereum by bringing huge UX improvements to Ethereum L1 as it grants ethereum accounts much more flexibility and security. Since we believe that access to a privacy-preserving solution can be highly eased with AA",
      "FIELD15": " our team decided to build HyperBOB.HyperBOB is an ERC4337-compliant wallet that elegantly implements an anonymous transfer feature on Ethereum L1",
      "FIELD16": " where wallet users are able to transfer any stablecoin to another address without exposing the on-chain connection of each address. This is made possible by the combination of cutting-edge technologies",
      "FIELD17": " such as HyperLane’s customizable interchain bridge and zkBOB’s zero-knowledge solution for private token transfer. The zk solution utilized for this private transfer feature is built by zkBOB which is currently only available on Optimism and Polygon but not on Ethereum L1 as its on-chain zk-proof verification is undeniably gas-expensive. However",
      "FIELD18": " HyperBOB allows users to have access to zkBOB from L1 by integrating Hyperlane’s Warp API that helps bridge BOB from L1 to Polygon.*The current zkBOB’s fee model doesn’t have users pay gas fees on-chain but charges small fees in BOB subtracted from the deposit balance",
      "FIELD19": " which means that they subsidize the cost of on-chain transactions.Hypelane Warp API consists of two router contracts separately deployed on both local and remote chain. Our HypERC20Collateral on L1 contract serves as a pool for depositing BOB and HyperLane’s relayer sends a request to HypERC20 that mints a wrapped BOB token to the AA wallet on L2.HypERC20 itself is a token contract that is also compliant with the ERC777 standard and HyperBOB AA wallet implements ERC777receiver interface. Hence",
      "FIELD20": " when AA wallet contract receives the newly minted BOB",
      "FIELD21": " tokensReceived method on the AA contract gets triggered in which subsequent functions to deposit BOB to zkBOB contract will be executed.The function used for depositing BOB to zkBOBPool is directDeposit which allows any external contract to directly deposit BOB to a zkBOB Account with a given zkAddress. So",
      "FIELD22": " the sender",
      "FIELD23": " HyperBOB AA wallet",
      "FIELD24": " doesn’t have to interact with zkBOB app UI beforehand",
      "FIELD25": " in which usually they would have to create zkAccount first and deposit BOB to the zkBOBPool.And most importantly",
      "FIELD26": " all of the complex executions described above is done by sending one transaction while it actually contains multiple transactions in a cross-chain manner",
      "FIELD27": " such as approve",
      "FIELD28": " swap",
      "FIELD29": " bridge",
      "FIELD30": " and deposit. So from the user’s point of view",
      "FIELD31": " it’s just one click. This is enabled because of the mere fact that the Account Abstraction wallet can execute a batch call and implement arbitrary executions inside.",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 305,
    hackathon: "ETHGlobal Tokyo",
    title: "0xfin",
    more: "https://ethglobal.com/showcase/0xfin-6hck8",
    demo: "",
    repo: "https://github.com/narutomanchester/ETHTokyo2023",
    video: "",
    winner: "",
    short: "0xFin - The Everything Everywhere All in One Crypto Mobile Application.",
    description: "We are thrilled to introduce our innovative all-in-one crypto app that will revolutionize the way users invest in the cryptocurrency market. We understand that the investment process can be a daunting task for many users",
      "FIELD11": " requiring extensive research and analysis across multiple platforms. That's why we have developed 0xFin",
      "FIELD12": " the Everything Everywhere All in One Crypto App.With 0xFin",
      "FIELD13": " users can now access a personalized news feed",
      "FIELD14": " social features",
      "FIELD15": " trading signals",
      "FIELD16": " and decentralized financial tools - all in one place. Our app offers a streamlined investment experience",
      "FIELD17": " allowing users to make informed investment decisions quickly and easily.At 0xFin",
      "FIELD18": " we believe that investing in cryptocurrency should be accessible to everyone. That's why we have created an app that simplifies the investment process",
      "FIELD19": " making it easy for users to invest in their favorite tokens. We are confident that our app will set a new standard in the cryptocurrency industry",
      "FIELD20": " and we are excited to be at the forefront of this revolutionary change.Our Basic FeaturesCrypto News Aggregator: Stay up-to-date with the latest news from the world of cryptocurrency with our daily news updates.Market Analysis and Signals: Get insights from industry experts and access signals from different platforms to help you make informed investment decisions.Community Building: Build your own community and get your channel's PNL tracked by 0xfin. Your can even pay to join other communities and receive signals.One-Click Trading: Easily access news and signals with tagged token tickers and instantly go to the trading section with just one click.Our Unique FeaturesPersonalized News Feed: Our app offers a personalized news feed that allows users to customize the content they receive based on their preferences and interests. This ensures that users only see news and updates that are relevant to them",
      "FIELD21": " making their browsing experience more efficient and enjoyable.Short Videos: Our app enables users to create short",
      "FIELD22": " engaging videos about crypto and NFTs. These videos can be easily shared on social media platforms",
      "FIELD23": " and users can earn commissions when others click on their referral links and make trades. With our app",
      "FIELD24": " users can easily monetize their content and share their knowledge and expertise with the wider community.Financial Tools Aggregator: We offer a range of financial tools where users can lend",
      "FIELD25": " borrow",
      "FIELD26": " or buy crypto at a discount.Our Game-Changer FeatureBut the real game-changer is our cross-chain multiple tokens swapping feature. With this feature",
      "FIELD27": " you can buy and sell multiple tokens just like shopping on Amazon.Especially",
      "FIELD28": " you can even create your own token indexes and trade them on different chains.Investing in cryptocurrency has never been easier. With 0xFin",
      "FIELD29": " you get all the necessary tools in one place and can trade with confidence. This project uses Python",
      "FIELD30": " and React as the main Programming languages.Using MySQL Database to store the top news that crawls by Python job every 10 mins.We define 0xfin as a social networking app",
      "FIELD31": " but we also support One-Click Trading by using Web3 Lib that connect to Kyberswap's router",
      "FIELD32": "",
      "FIELD33": "",
      "FIELD34": "",
      "FIELD35": "",
      "FIELD36": "",
      "FIELD37": "",
      "FIELD38": "",
      "FIELD39": "",
      "FIELD40": "",
      "FIELD41": "",
      "FIELD42": "",
      "FIELD43": "",
      "FIELD44": "",
      "FIELD45": "",
      "FIELD46": "",
      "FIELD47": "",
      "FIELD48": "",
      "FIELD49": "",
      "FIELD50": "",
      "FIELD51": "",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
    {
    id: 306,
    hackathon: "ETHGlobal Tokyo",
    title: "DeAcu: A decentralized auction market",
    more: "https://ethglobal.com/showcase/deacu-a-decentralized-auction-market-m95sn",
    demo: "https://auction.mydapp.io",
    repo: "https://github.com/Wallet3/ETHGlobalTokyo-Hackthon-AuctionPJ",
    video: "",
    winner: "📜 Scroll — Just Deploy 🏊‍♂️ Polygon — Pool Prize ",
    short: "DeAcu: A Web3 eBay/ヤフオク auction market for ERC20 tokens and ERC721 NFTs",
    description: " it supports ERC4337 wallet and L1/L2 chains",
      "FIELD11": "We are building a decentralized auction market for ERC20 tokens and ERC721 NFTs. This platform will enable authorized trading",
      "FIELD12": " listing",
      "FIELD13": " and order matching for theoretically any digital asset. It supports wallet login with ERC4337 Account Abstract",
      "FIELD14": " which provides users with the following benefits:Authorization and swap transactions are broadcast simultaneously instead of in two separate steps",
      "FIELD15": " resulting in a smoother user experience.Stablecoins such as DAI and USDC can be used to pay for gas fees.Powered by Wallet 3 ERC4337 Wallet We are a blockchain company from Japan",
      "FIELD16": " specializing in creating blockchain wallets.Our flagship product",
      "FIELD17": " Wallet3",
      "FIELD18": " supports all EVM-compatible blockchains",
      "FIELD19": " including the latest Layer1",
      "FIELD20": " Layer2",
      "FIELD21": " and zkRollup.We have developed Wallet3 in accordance with the principles of Web3",
      "FIELD22": " and have implemented MPC and ERC4337 account abstraction features.For this hackathon",
      "FIELD23": " we have decided to create a Web3 version of eBaya decentralized auction marketplace.Many ERC20 tokens and NFTs suffer from liquidity issues",
      "FIELD24": " and this auction system can help solve this problem by bundling tokens together and auctioning them off",
      "FIELD25": " for instance",
      "FIELD26": " 10",
      "FIELD27": "000 units of a less-popular token.Currently",
      "FIELD28": " our platform supports auctioning ERC20 tokens and ERC721 NFTs",
      "FIELD29": " but in the future",
      "FIELD30": " we plan to expand to other types of digital products.We will be showcasing our account abstraction feature from Wallet3",
      "FIELD31": " which comes with the added benefit of being able to support gas fees using stablecoins.After authorizing and creating an auction order transaction",
      "FIELD32": " both transactions will be broadcasted together for a more seamless user experience.Now",
      "FIELD33": " let's walk through a simple operational process:Open the DAPP interface and select \"login\".Use your pre-prepared Wallet3 ERC4337 wallet account to scan the login code.Let's create a new auction.You can choose an ERC20 token",
      "FIELD34": " enter the contract address",
      "FIELD35": " the quantity",
      "FIELD36": " the starting price",
      "FIELD37": " and the end time.Click \"create",
      "FIELD38": "\" authorize the contract to host the tokens in your wallet",
      "FIELD39": " and then create the auction using USDC to pay for the gas.After the auction is created successfully",
      "FIELD40": " it will appear on the auction list page with a countdown timer.Click on the auction order",
      "FIELD41": " and anyone can bid on it.After the auction ends",
      "FIELD42": " the settlement will occur.During the 36-hour hackathon",
      "FIELD43": " we wrote the contract code and most of the test cases using Hardhat and developed some front-end pages using the T3 Stack",
      "FIELD44": " including support for account abstraction wallet login",
      "FIELD45": " creating auction orders",
      "FIELD46": " and displaying orders.Due to time constraints",
      "FIELD47": " there is still a lot of front-end work to be done.After the hackathon",
      "FIELD48": " we plan to complete all the functionalities and launch it as a new DeFi project.If you are interested in this project or Wallet 3 ERC4337",
      "FIELD49": " please contact us as we are looking for partners and investment support.The demonstration above uses the Sepolia testnet.We are currently deploying our DAPP on more networks",
      "FIELD50": " including Gnosis testnet",
      "FIELD51": " Scroll Alpha，Poloygon Mumbai and zkEVM testnet and linea testnet.Thank you very much",
      "FIELD52": "",
      "FIELD53": "",
      "FIELD54": "",
      "FIELD55": "",
      "FIELD56": "",
      "FIELD57": "",
      "FIELD58": "",
      "FIELD59": "",
      "FIELD60": "",
      "FIELD61": "",
      "FIELD62": "",
      "FIELD63": "",
      "FIELD64": "",
      "FIELD65": "",
      "FIELD66": "",
      "FIELD67": "",
      "FIELD68": "",
      "FIELD69": "",
      "FIELD70": "",
      "FIELD71": "",
      "FIELD72": "",
      "FIELD73": "",
      "FIELD74": "",
      "FIELD75": "",
      "FIELD76": "",
      "FIELD77": "",
      "FIELD78": "",
      "FIELD79": "",
      "FIELD80": "",
      "FIELD81": "",
      "FIELD82": "",
      "FIELD83": "",
      "FIELD84": "",
      "FIELD85": "",
      "FIELD86": "",
      "FIELD87": "",
      "FIELD88": "",
      "FIELD89": "",
      "FIELD90": "",
      "FIELD91": "",
      "FIELD92": "",
      "FIELD93": "",
      "FIELD94": ""
    },
];
